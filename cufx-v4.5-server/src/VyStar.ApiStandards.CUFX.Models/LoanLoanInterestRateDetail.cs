/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details related to the interest rate for the loan. 
    /// </summary>
    [DataContract]
    public partial class LoanLoanInterestRateDetail 
    {
        /// <summary>
        /// Original effective rate when the loan was opened. 
        /// </summary>
        /// <value>Original effective rate when the loan was opened. </value>
        [DataMember(Name="originalEffectiveRate", EmitDefaultValue=true)]
        public decimal OriginalEffectiveRate { get; set; }

        /// <summary>
        /// Percentage of interest rate discount being given. 
        /// </summary>
        /// <value>Percentage of interest rate discount being given. </value>
        [DataMember(Name="rateDiscountPercentage", EmitDefaultValue=true)]
        public decimal RateDiscountPercentage { get; set; }

        /// <summary>
        /// Code-reason for giving the rate discount. 
        /// </summary>
        /// <value>Code-reason for giving the rate discount. </value>
        [DataMember(Name="rateDiscountReasonCode", EmitDefaultValue=false)]
        public string RateDiscountReasonCode { get; set; }

        /// <summary>
        /// Relationship-based pricing discount percentage: percentage of interest rate discount for satisfying specific requirements, i.e. an employee is eligible for a certain discount rate percentage. 
        /// </summary>
        /// <value>Relationship-based pricing discount percentage: percentage of interest rate discount for satisfying specific requirements, i.e. an employee is eligible for a certain discount rate percentage. </value>
        [DataMember(Name="relationshipRateDiscountPercentage", EmitDefaultValue=true)]
        public decimal RelationshipRateDiscountPercentage { get; set; }

        /// <summary>
        /// Reason for relationship-based pricing discount (i.e. multiple loans). This is FI-defined code and it can also be a relationship group in order to represent a group, i.e. all Bose employees. 
        /// </summary>
        /// <value>Reason for relationship-based pricing discount (i.e. multiple loans). This is FI-defined code and it can also be a relationship group in order to represent a group, i.e. all Bose employees. </value>
        [DataMember(Name="relationshipRateDiscountReasonCode", EmitDefaultValue=false)]
        public string RelationshipRateDiscountReasonCode { get; set; }

        /// <summary>
        /// Calculated annual percentage rate (APR). 
        /// </summary>
        /// <value>Calculated annual percentage rate (APR). </value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=true)]
        public decimal AnnualPercentageRate { get; set; }

        /// <summary>
        /// Interest rate that is used for calculations. Most of the time you would only use rate AND APR when there is a split or variable rate. 
        /// </summary>
        /// <value>Interest rate that is used for calculations. Most of the time you would only use rate AND APR when there is a split or variable rate. </value>
        [DataMember(Name="rate", EmitDefaultValue=true)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Indicates if loan rates are split. 
        /// </summary>
        /// <value>Indicates if loan rates are split. </value>
        [DataMember(Name="isSplitRate", EmitDefaultValue=true)]
        public bool IsSplitRate { get; set; }

        /// <summary>
        /// Describes the interest rate type that is used in the interest calculation process. 
        /// </summary>
        /// <value>Describes the interest rate type that is used in the interest calculation process. </value>
        [DataMember(Name="splitRateCode", EmitDefaultValue=false)]
        public string SplitRateCode { get; set; }

        /// <summary>
        /// Ceiling interest rate indicating the highest interest rate allowed. Note: revolving loans only, i.e. lines, credit cards. 
        /// </summary>
        /// <value>Ceiling interest rate indicating the highest interest rate allowed. Note: revolving loans only, i.e. lines, credit cards. </value>
        [DataMember(Name="rateMaximum", EmitDefaultValue=true)]
        public decimal RateMaximum { get; set; }

        /// <summary>
        /// Floor rate indicating the lowest interest rate allowed. Note: revolving loans only, i.e. lines, credit cards. 
        /// </summary>
        /// <value>Floor rate indicating the lowest interest rate allowed. Note: revolving loans only, i.e. lines, credit cards. </value>
        [DataMember(Name="rateMinimum", EmitDefaultValue=true)]
        public decimal RateMinimum { get; set; }

        /// <summary>
        /// Percentage rate change allowed. 
        /// </summary>
        /// <value>Percentage rate change allowed. </value>
        [DataMember(Name="ratePercentageChange", EmitDefaultValue=true)]
        public decimal RatePercentageChange { get; set; }


        /// <summary>
        /// Indicates type of margin: points or percentage. 
        /// </summary>
        /// <value>Indicates type of margin: points or percentage. </value>
        [TypeConverter(typeof(CustomEnumConverter<MarginEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MarginEnum
        {
            
            /// <summary>
            /// Enum PercentageEnum for Percentage
            /// </summary>
            [EnumMember(Value = "Percentage")]
            PercentageEnum = 1,
            
            /// <summary>
            /// Enum PointsEnum for Points
            /// </summary>
            [EnumMember(Value = "Points")]
            PointsEnum = 2
        }

        /// <summary>
        /// Indicates type of margin: points or percentage. 
        /// </summary>
        /// <value>Indicates type of margin: points or percentage. </value>
        [DataMember(Name="margin", EmitDefaultValue=true)]
        public MarginEnum Margin { get; set; }

        /// <summary>
        /// Base rate used for calculations. 
        /// </summary>
        /// <value>Base rate used for calculations. </value>
        [DataMember(Name="baseRateIndex", EmitDefaultValue=true)]
        public decimal BaseRateIndex { get; set; }

        /// <summary>
        /// Amount added to the index to determine the interest rate. 
        /// </summary>
        /// <value>Amount added to the index to determine the interest rate. </value>
        [DataMember(Name="rateMarginPercentage", EmitDefaultValue=true)]
        public decimal RateMarginPercentage { get; set; }

        /// <summary>
        /// Maximum first rate change increase. 
        /// </summary>
        /// <value>Maximum first rate change increase. </value>
        [DataMember(Name="maximumFirstRateChangeIncrease", EmitDefaultValue=true)]
        public decimal MaximumFirstRateChangeIncrease { get; set; }

        /// <summary>
        /// Maximum first rate change decrease. 
        /// </summary>
        /// <value>Maximum first rate change decrease. </value>
        [DataMember(Name="maximumFirstRateChangeDecrease", EmitDefaultValue=true)]
        public decimal MaximumFirstRateChangeDecrease { get; set; }

        /// <summary>
        /// Maximum percentage adjustable rate change increase. 
        /// </summary>
        /// <value>Maximum percentage adjustable rate change increase. </value>
        [DataMember(Name="maximumPercentageAdjustableRateChangeIncrease", EmitDefaultValue=true)]
        public decimal MaximumPercentageAdjustableRateChangeIncrease { get; set; }

        /// <summary>
        /// Maximum percentage adjustable rate change decrease. 
        /// </summary>
        /// <value>Maximum percentage adjustable rate change decrease. </value>
        [DataMember(Name="maxPercentageAdjustableRateChangeDecrease", EmitDefaultValue=true)]
        public decimal MaxPercentageAdjustableRateChangeDecrease { get; set; }

        /// <summary>
        /// Maximum annual rate change increase. 
        /// </summary>
        /// <value>Maximum annual rate change increase. </value>
        [DataMember(Name="maxAnnualRateChangeIncrease", EmitDefaultValue=true)]
        public decimal MaxAnnualRateChangeIncrease { get; set; }

        /// <summary>
        /// Maximum annual rate change decrease. 
        /// </summary>
        /// <value>Maximum annual rate change decrease. </value>
        [DataMember(Name="maxAnnualRateChangeDecrease", EmitDefaultValue=true)]
        public decimal MaxAnnualRateChangeDecrease { get; set; }

        /// <summary>
        /// Indicates if the rate is above or below the index (i.e. above or below prime). 
        /// </summary>
        /// <value>Indicates if the rate is above or below the index (i.e. above or below prime). </value>
        [DataMember(Name="isRateMarginAboveIndex", EmitDefaultValue=true)]
        public bool IsRateMarginAboveIndex { get; set; }

        /// <summary>
        /// Value that increases the margin rate. If you have bad credit, this is the margin rate applied based on your credit. It is used for risk-based pricing. 
        /// </summary>
        /// <value>Value that increases the margin rate. If you have bad credit, this is the margin rate applied based on your credit. It is used for risk-based pricing. </value>
        [DataMember(Name="marginRiskRate", EmitDefaultValue=true)]
        public decimal MarginRiskRate { get; set; }

        /// <summary>
        /// Rate change date. 
        /// </summary>
        /// <value>Rate change date. </value>
        [DataMember(Name="scheduledRateChangeDate", EmitDefaultValue=false)]
        public DateTime ScheduledRateChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets PeriodicCapAmount
        /// </summary>
        [DataMember(Name="periodicCapAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PeriodicCapAmount { get; set; }

        /// <summary>
        /// Starting interest rate for the Periodic Cap period. 
        /// </summary>
        /// <value>Starting interest rate for the Periodic Cap period. </value>
        [DataMember(Name="periodicCapStartRate", EmitDefaultValue=true)]
        public decimal PeriodicCapStartRate { get; set; }

        /// <summary>
        /// Starting date for the Periodic Cap period. 
        /// </summary>
        /// <value>Starting date for the Periodic Cap period. </value>
        [DataMember(Name="periodicCapStartDate", EmitDefaultValue=false)]
        public DateTime PeriodicCapStartDate { get; set; }


        /// <summary>
        /// Defined period during which the Periodic Cap applies. 
        /// </summary>
        /// <value>Defined period during which the Periodic Cap applies. </value>
        [TypeConverter(typeof(CustomEnumConverter<PeriodicCapFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PeriodicCapFrequencyEnum
        {
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 1,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 2,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 3,
            
            /// <summary>
            /// Enum SemiAnnualEnum for Semi-Annual
            /// </summary>
            [EnumMember(Value = "Semi-Annual")]
            SemiAnnualEnum = 4
        }

        /// <summary>
        /// Defined period during which the Periodic Cap applies. 
        /// </summary>
        /// <value>Defined period during which the Periodic Cap applies. </value>
        [DataMember(Name="periodicCapFrequency", EmitDefaultValue=true)]
        public PeriodicCapFrequencyEnum PeriodicCapFrequency { get; set; }

        /// <summary>
        /// Periodic Cap frequency value. 
        /// </summary>
        /// <value>Periodic Cap frequency value. </value>
        [DataMember(Name="periodicCapFrequencyValue", EmitDefaultValue=true)]
        public int PeriodicCapFrequencyValue { get; set; }

        /// <summary>
        /// Gets or Sets SplitRateBalance
        /// </summary>
        [DataMember(Name="splitRateBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount SplitRateBalance { get; set; }

        /// <summary>
        /// The date that the account may be subject to a payment change. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date that the account may be subject to a payment change. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="paymentChangeDateTime", EmitDefaultValue=false)]
        public string PaymentChangeDateTime { get; set; }

        /// <summary>
        /// The number of days to prior to the next payment change date to begin an account rate review. 
        /// </summary>
        /// <value>The number of days to prior to the next payment change date to begin an account rate review. </value>
        [DataMember(Name="rateReviewDays", EmitDefaultValue=false)]
        public string RateReviewDays { get; set; }

        /// <summary>
        /// The number of days to prior to the next payment change date to begin a payment review. 
        /// </summary>
        /// <value>The number of days to prior to the next payment change date to begin a payment review. </value>
        [DataMember(Name="paymentReviewDays", EmitDefaultValue=false)]
        public string PaymentReviewDays { get; set; }


        /// <summary>
        /// The frequency of interest rate adjustments on loan. 
        /// </summary>
        /// <value>The frequency of interest rate adjustments on loan. </value>
        [TypeConverter(typeof(CustomEnumConverter<RateChangeFrequencyTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RateChangeFrequencyTypeEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// The frequency of interest rate adjustments on loan. 
        /// </summary>
        /// <value>The frequency of interest rate adjustments on loan. </value>
        [DataMember(Name="rateChangeFrequencyType", EmitDefaultValue=true)]
        public RateChangeFrequencyTypeEnum RateChangeFrequencyType { get; set; }

        /// <summary>
        /// The number of time periods when FrequencyType is of type XDays, XMonths or XYears. 
        /// </summary>
        /// <value>The number of time periods when FrequencyType is of type XDays, XMonths or XYears. </value>
        [DataMember(Name="rateChangeFrequencyDuration", EmitDefaultValue=false)]
        public string RateChangeFrequencyDuration { get; set; }


        /// <summary>
        /// The frequency of payment changes on loan. 
        /// </summary>
        /// <value>The frequency of payment changes on loan. </value>
        [TypeConverter(typeof(CustomEnumConverter<PaymentChangeFrequencyTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentChangeFrequencyTypeEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// The frequency of payment changes on loan. 
        /// </summary>
        /// <value>The frequency of payment changes on loan. </value>
        [DataMember(Name="paymentChangeFrequencyType", EmitDefaultValue=true)]
        public PaymentChangeFrequencyTypeEnum PaymentChangeFrequencyType { get; set; }

        /// <summary>
        /// The number of time periods when FrequencyType is of type XDays, XMonths or XYears. 
        /// </summary>
        /// <value>The number of time periods when FrequencyType is of type XDays, XMonths or XYears. </value>
        [DataMember(Name="paymentChangeFrequencyDuration", EmitDefaultValue=false)]
        public string PaymentChangeFrequencyDuration { get; set; }

    }
}
