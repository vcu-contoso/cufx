/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The preference object defines all the fields necessary to define a person, business or vendor related to a financial institution. The ID uniquely identifies the party within the financial institution. 
    /// </summary>
    [DataContract]
    public partial class Preference 
    {
        /// <summary>
        /// Unique identifier for the preference.  This is not provided as an input, but as an output after the preference has been created. 
        /// </summary>
        /// <value>Unique identifier for the preference.  This is not provided as an input, but as an output after the preference has been created. </value>
        [DataMember(Name="preferenceId", EmitDefaultValue=false)]
        public string PreferenceId { get; set; }

        /// <summary>
        /// Gets or Sets PartyIdList
        /// </summary>
        [DataMember(Name="partyIdList", EmitDefaultValue=false)]
        public AccountPartyIdList PartyIdList { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipIdList
        /// </summary>
        [DataMember(Name="relationshipIdList", EmitDefaultValue=false)]
        public AccountFilterRelationshipIdList RelationshipIdList { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdList
        /// </summary>
        [DataMember(Name="accountIdList", EmitDefaultValue=false)]
        public AccountFilterAccountIdList AccountIdList { get; set; }

        /// <summary>
        /// Gets or Sets CardIdList
        /// </summary>
        [DataMember(Name="cardIdList", EmitDefaultValue=false)]
        public CardFilterCardIdList CardIdList { get; set; }

        /// <summary>
        /// Gets or Sets ContactIdList
        /// </summary>
        [DataMember(Name="contactIdList", EmitDefaultValue=false)]
        public ActivityActivityRelatedToContactIdList ContactIdList { get; set; }


        /// <summary>
        /// When a person calls in or walks up to a teller, sometimes they are asked for a codeword to verify their identity. 
        /// </summary>
        /// <value>When a person calls in or walks up to a teller, sometimes they are asked for a codeword to verify their identity. </value>
        [TypeConverter(typeof(CustomEnumConverter<DeliveryChannelEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DeliveryChannelEnum
        {
            
            /// <summary>
            /// Enum LiveSupportEnum for LiveSupport
            /// </summary>
            [EnumMember(Value = "LiveSupport")]
            LiveSupportEnum = 1,
            
            /// <summary>
            /// Enum ATMEnum for ATM
            /// </summary>
            [EnumMember(Value = "ATM")]
            ATMEnum = 2,
            
            /// <summary>
            /// Enum EmailEnum for Email
            /// </summary>
            [EnumMember(Value = "Email")]
            EmailEnum = 3,
            
            /// <summary>
            /// Enum IVREnum for IVR
            /// </summary>
            [EnumMember(Value = "IVR")]
            IVREnum = 4,
            
            /// <summary>
            /// Enum KioskEnum for Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            KioskEnum = 5,
            
            /// <summary>
            /// Enum MailEnum for Mail
            /// </summary>
            [EnumMember(Value = "Mail")]
            MailEnum = 6,
            
            /// <summary>
            /// Enum MobileEnum for Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            MobileEnum = 7,
            
            /// <summary>
            /// Enum OnlineBankingEnum for OnlineBanking
            /// </summary>
            [EnumMember(Value = "OnlineBanking")]
            OnlineBankingEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum PhoneEnum for Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            PhoneEnum = 10,
            
            /// <summary>
            /// Enum SMSEnum for SMS
            /// </summary>
            [EnumMember(Value = "SMS")]
            SMSEnum = 11
        }

        /// <summary>
        /// When a person calls in or walks up to a teller, sometimes they are asked for a codeword to verify their identity. 
        /// </summary>
        /// <value>When a person calls in or walks up to a teller, sometimes they are asked for a codeword to verify their identity. </value>
        [DataMember(Name="deliveryChannel", EmitDefaultValue=true)]
        public DeliveryChannelEnum DeliveryChannel { get; set; }


        /// <summary>
        /// Type of preference.  Additions to this list can be submitted to the CUFX committee. Whether the member has opted in to receive coverage of overdrawn accounts (look at status to see if it is Active), so that the FI pays the overdrawn account to a certain limit. If member has opted in and there is a member-requested total courtesy payment limit, look at that value. See sub type for specific type of EAlert and how to interpret the value and other preference fields. Determines if party(ies) wishes to receive eStatements. If value is True then they receive an eStatement.  If value is False or record does not exist, they do not receive eStatements. See the EAlertSubType StatementAvailable to determine if party wants to be alerted when statement is available. Determines if party(ies) wishes to receive eTaxForms or paper tax forms. If value is True then they receive an eTaxForm.  If value is False or record does not exist, they do not receive eTaxForms. See the EAlertSubType TaxFormAvailable to determine if party wants to be alerted when tax form is available. Determines if party(ies) wishes to receive eNotices or paper notices. If value is True then they receive an eNotice.  If value is False or record does not exist, they do not receive eNotices. Determines if party(ies) wishes to receive eReceipts or paper receipts. If value is True then they receive an eReceipt.  If value is False or record does not exist, they do not receive eReceipts. Determines if party(ies) wishes to be enrolled in text banking. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to receive the newsletter (i.e. opted-in or -out). No sub types apply. Value is set to True or False depending upon preference.  False is assumed if not present. If this preference is present and active, a Newsletter can be sent when available. Determines how the party, if specified on relationships, cards, or accounts, would like to communicated to. Value would be boolean True if they want to be communicated to for general operation changes, such as new branch openings, outages, etc.  False can be specified but it is also assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. Determines if party on specified relationships, cards, or accounts would like to receive marketing material. Value would be boolean True if they want marketing material or false if party has opted out of marketing material. False can be specified, but it is assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. The value contains a textual description as to when the party prefers to be contacted.  No sub types apply. The preferred language with which the party(ies) wishes to communicate.  No sub types apply. Value values are IANA â€“ language codes. http://www.iana.org/assignments/language-subtag-registry http://www.w3.org/International/questions/qa-lang-2or3.en.php If this type is specified and the value is not present, the value will assumed to be equal to en-us unless the value field is specified. If this type is not specified, then en-us (US English) is assumed. The website stylesheet preferred is contained in the value field.  No sub types apply. The mobile stylesheet preferred is contained in the value field.  No sub types apply. See sub type for the specific type of email contact format that should be used. A preference associated to the amount of time a session remains active. The value field holds the number of seconds that a session stays active. A preference associated to widgets being displayed within a web site, mobile, etc. See the WidgetSubType for specifics on displaying the widget within the delivery channel. Determines if party(ies) wishes to receive paper statements would typically be used in conjunction with eStatements option if party(ies) would like to receive both paper and eStatements. If value is True then they receive paper statements. If value is False or record does not exist, they do not receive paper statements, and have opted to receive eStatements. Determines if party(ies) wishes to be enrolled in member-to-member transfers within the same financial institution. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to be enrolled in person-to-person transfers/payments across financial institutions. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. The value contains information that can be interpreted by the end points.  The data to drive the preference is most likely in customData name/value pairs. Determines if party(ies) wishes to stop or inhibit solicitations. If value is True then solicitation is prohibited.  If value is False or record does not exist then solicitation activity can occur. 
        /// </summary>
        /// <value>Type of preference.  Additions to this list can be submitted to the CUFX committee. Whether the member has opted in to receive coverage of overdrawn accounts (look at status to see if it is Active), so that the FI pays the overdrawn account to a certain limit. If member has opted in and there is a member-requested total courtesy payment limit, look at that value. See sub type for specific type of EAlert and how to interpret the value and other preference fields. Determines if party(ies) wishes to receive eStatements. If value is True then they receive an eStatement.  If value is False or record does not exist, they do not receive eStatements. See the EAlertSubType StatementAvailable to determine if party wants to be alerted when statement is available. Determines if party(ies) wishes to receive eTaxForms or paper tax forms. If value is True then they receive an eTaxForm.  If value is False or record does not exist, they do not receive eTaxForms. See the EAlertSubType TaxFormAvailable to determine if party wants to be alerted when tax form is available. Determines if party(ies) wishes to receive eNotices or paper notices. If value is True then they receive an eNotice.  If value is False or record does not exist, they do not receive eNotices. Determines if party(ies) wishes to receive eReceipts or paper receipts. If value is True then they receive an eReceipt.  If value is False or record does not exist, they do not receive eReceipts. Determines if party(ies) wishes to be enrolled in text banking. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to receive the newsletter (i.e. opted-in or -out). No sub types apply. Value is set to True or False depending upon preference.  False is assumed if not present. If this preference is present and active, a Newsletter can be sent when available. Determines how the party, if specified on relationships, cards, or accounts, would like to communicated to. Value would be boolean True if they want to be communicated to for general operation changes, such as new branch openings, outages, etc.  False can be specified but it is also assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. Determines if party on specified relationships, cards, or accounts would like to receive marketing material. Value would be boolean True if they want marketing material or false if party has opted out of marketing material. False can be specified, but it is assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. The value contains a textual description as to when the party prefers to be contacted.  No sub types apply. The preferred language with which the party(ies) wishes to communicate.  No sub types apply. Value values are IANA â€“ language codes. http://www.iana.org/assignments/language-subtag-registry http://www.w3.org/International/questions/qa-lang-2or3.en.php If this type is specified and the value is not present, the value will assumed to be equal to en-us unless the value field is specified. If this type is not specified, then en-us (US English) is assumed. The website stylesheet preferred is contained in the value field.  No sub types apply. The mobile stylesheet preferred is contained in the value field.  No sub types apply. See sub type for the specific type of email contact format that should be used. A preference associated to the amount of time a session remains active. The value field holds the number of seconds that a session stays active. A preference associated to widgets being displayed within a web site, mobile, etc. See the WidgetSubType for specifics on displaying the widget within the delivery channel. Determines if party(ies) wishes to receive paper statements would typically be used in conjunction with eStatements option if party(ies) would like to receive both paper and eStatements. If value is True then they receive paper statements. If value is False or record does not exist, they do not receive paper statements, and have opted to receive eStatements. Determines if party(ies) wishes to be enrolled in member-to-member transfers within the same financial institution. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to be enrolled in person-to-person transfers/payments across financial institutions. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. The value contains information that can be interpreted by the end points.  The data to drive the preference is most likely in customData name/value pairs. Determines if party(ies) wishes to stop or inhibit solicitations. If value is True then solicitation is prohibited.  If value is False or record does not exist then solicitation activity can occur. </value>
        [TypeConverter(typeof(CustomEnumConverter<PreferenceTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PreferenceTypeEnum
        {
            
            /// <summary>
            /// Enum CourtesyPaymentEnum for CourtesyPayment
            /// </summary>
            [EnumMember(Value = "CourtesyPayment")]
            CourtesyPaymentEnum = 1,
            
            /// <summary>
            /// Enum EAlertEnum for EAlert
            /// </summary>
            [EnumMember(Value = "EAlert")]
            EAlertEnum = 2,
            
            /// <summary>
            /// Enum EStatementEnum for EStatement
            /// </summary>
            [EnumMember(Value = "EStatement")]
            EStatementEnum = 3,
            
            /// <summary>
            /// Enum ETaxFormsEnum for ETaxForms
            /// </summary>
            [EnumMember(Value = "ETaxForms")]
            ETaxFormsEnum = 4,
            
            /// <summary>
            /// Enum ENoticeEnum for ENotice
            /// </summary>
            [EnumMember(Value = "ENotice")]
            ENoticeEnum = 5,
            
            /// <summary>
            /// Enum EReceiptEnum for EReceipt
            /// </summary>
            [EnumMember(Value = "EReceipt")]
            EReceiptEnum = 6,
            
            /// <summary>
            /// Enum EnrolledInTextBankingEnum for EnrolledInTextBanking
            /// </summary>
            [EnumMember(Value = "EnrolledInTextBanking")]
            EnrolledInTextBankingEnum = 7,
            
            /// <summary>
            /// Enum NewsletterEnum for Newsletter
            /// </summary>
            [EnumMember(Value = "Newsletter")]
            NewsletterEnum = 8,
            
            /// <summary>
            /// Enum CommunicationEnum for Communication
            /// </summary>
            [EnumMember(Value = "Communication")]
            CommunicationEnum = 9,
            
            /// <summary>
            /// Enum MarketingEnum for Marketing
            /// </summary>
            [EnumMember(Value = "Marketing")]
            MarketingEnum = 10,
            
            /// <summary>
            /// Enum ContactHoursEnum for ContactHours
            /// </summary>
            [EnumMember(Value = "ContactHours")]
            ContactHoursEnum = 11,
            
            /// <summary>
            /// Enum LanguageEnum for Language
            /// </summary>
            [EnumMember(Value = "Language")]
            LanguageEnum = 12,
            
            /// <summary>
            /// Enum WebsiteFormatStylesheetEnum for WebsiteFormatStylesheet
            /// </summary>
            [EnumMember(Value = "WebsiteFormatStylesheet")]
            WebsiteFormatStylesheetEnum = 13,
            
            /// <summary>
            /// Enum MobileSiteFormatStylesheetEnum for MobileSiteFormatStylesheet
            /// </summary>
            [EnumMember(Value = "MobileSiteFormatStylesheet")]
            MobileSiteFormatStylesheetEnum = 14,
            
            /// <summary>
            /// Enum EmailFormatEnum for EmailFormat
            /// </summary>
            [EnumMember(Value = "EmailFormat")]
            EmailFormatEnum = 15,
            
            /// <summary>
            /// Enum TimeoutEnum for Timeout
            /// </summary>
            [EnumMember(Value = "Timeout")]
            TimeoutEnum = 16,
            
            /// <summary>
            /// Enum WidgetEnum for Widget
            /// </summary>
            [EnumMember(Value = "Widget")]
            WidgetEnum = 17,
            
            /// <summary>
            /// Enum PaperStatementEnum for PaperStatement
            /// </summary>
            [EnumMember(Value = "PaperStatement")]
            PaperStatementEnum = 18,
            
            /// <summary>
            /// Enum M2MTransfersEnabledEnum for M2MTransfersEnabled
            /// </summary>
            [EnumMember(Value = "M2MTransfersEnabled")]
            M2MTransfersEnabledEnum = 19,
            
            /// <summary>
            /// Enum P2PTransfersEnabledEnum for P2PTransfersEnabled
            /// </summary>
            [EnumMember(Value = "P2PTransfersEnabled")]
            P2PTransfersEnabledEnum = 20,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 21,
            
            /// <summary>
            /// Enum NoSolicitationEnum for NoSolicitation
            /// </summary>
            [EnumMember(Value = "NoSolicitation")]
            NoSolicitationEnum = 22
        }

        /// <summary>
        /// Type of preference.  Additions to this list can be submitted to the CUFX committee. Whether the member has opted in to receive coverage of overdrawn accounts (look at status to see if it is Active), so that the FI pays the overdrawn account to a certain limit. If member has opted in and there is a member-requested total courtesy payment limit, look at that value. See sub type for specific type of EAlert and how to interpret the value and other preference fields. Determines if party(ies) wishes to receive eStatements. If value is True then they receive an eStatement.  If value is False or record does not exist, they do not receive eStatements. See the EAlertSubType StatementAvailable to determine if party wants to be alerted when statement is available. Determines if party(ies) wishes to receive eTaxForms or paper tax forms. If value is True then they receive an eTaxForm.  If value is False or record does not exist, they do not receive eTaxForms. See the EAlertSubType TaxFormAvailable to determine if party wants to be alerted when tax form is available. Determines if party(ies) wishes to receive eNotices or paper notices. If value is True then they receive an eNotice.  If value is False or record does not exist, they do not receive eNotices. Determines if party(ies) wishes to receive eReceipts or paper receipts. If value is True then they receive an eReceipt.  If value is False or record does not exist, they do not receive eReceipts. Determines if party(ies) wishes to be enrolled in text banking. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to receive the newsletter (i.e. opted-in or -out). No sub types apply. Value is set to True or False depending upon preference.  False is assumed if not present. If this preference is present and active, a Newsletter can be sent when available. Determines how the party, if specified on relationships, cards, or accounts, would like to communicated to. Value would be boolean True if they want to be communicated to for general operation changes, such as new branch openings, outages, etc.  False can be specified but it is also assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. Determines if party on specified relationships, cards, or accounts would like to receive marketing material. Value would be boolean True if they want marketing material or false if party has opted out of marketing material. False can be specified, but it is assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. The value contains a textual description as to when the party prefers to be contacted.  No sub types apply. The preferred language with which the party(ies) wishes to communicate.  No sub types apply. Value values are IANA â€“ language codes. http://www.iana.org/assignments/language-subtag-registry http://www.w3.org/International/questions/qa-lang-2or3.en.php If this type is specified and the value is not present, the value will assumed to be equal to en-us unless the value field is specified. If this type is not specified, then en-us (US English) is assumed. The website stylesheet preferred is contained in the value field.  No sub types apply. The mobile stylesheet preferred is contained in the value field.  No sub types apply. See sub type for the specific type of email contact format that should be used. A preference associated to the amount of time a session remains active. The value field holds the number of seconds that a session stays active. A preference associated to widgets being displayed within a web site, mobile, etc. See the WidgetSubType for specifics on displaying the widget within the delivery channel. Determines if party(ies) wishes to receive paper statements would typically be used in conjunction with eStatements option if party(ies) would like to receive both paper and eStatements. If value is True then they receive paper statements. If value is False or record does not exist, they do not receive paper statements, and have opted to receive eStatements. Determines if party(ies) wishes to be enrolled in member-to-member transfers within the same financial institution. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to be enrolled in person-to-person transfers/payments across financial institutions. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. The value contains information that can be interpreted by the end points.  The data to drive the preference is most likely in customData name/value pairs. Determines if party(ies) wishes to stop or inhibit solicitations. If value is True then solicitation is prohibited.  If value is False or record does not exist then solicitation activity can occur. 
        /// </summary>
        /// <value>Type of preference.  Additions to this list can be submitted to the CUFX committee. Whether the member has opted in to receive coverage of overdrawn accounts (look at status to see if it is Active), so that the FI pays the overdrawn account to a certain limit. If member has opted in and there is a member-requested total courtesy payment limit, look at that value. See sub type for specific type of EAlert and how to interpret the value and other preference fields. Determines if party(ies) wishes to receive eStatements. If value is True then they receive an eStatement.  If value is False or record does not exist, they do not receive eStatements. See the EAlertSubType StatementAvailable to determine if party wants to be alerted when statement is available. Determines if party(ies) wishes to receive eTaxForms or paper tax forms. If value is True then they receive an eTaxForm.  If value is False or record does not exist, they do not receive eTaxForms. See the EAlertSubType TaxFormAvailable to determine if party wants to be alerted when tax form is available. Determines if party(ies) wishes to receive eNotices or paper notices. If value is True then they receive an eNotice.  If value is False or record does not exist, they do not receive eNotices. Determines if party(ies) wishes to receive eReceipts or paper receipts. If value is True then they receive an eReceipt.  If value is False or record does not exist, they do not receive eReceipts. Determines if party(ies) wishes to be enrolled in text banking. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to receive the newsletter (i.e. opted-in or -out). No sub types apply. Value is set to True or False depending upon preference.  False is assumed if not present. If this preference is present and active, a Newsletter can be sent when available. Determines how the party, if specified on relationships, cards, or accounts, would like to communicated to. Value would be boolean True if they want to be communicated to for general operation changes, such as new branch openings, outages, etc.  False can be specified but it is also assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. Determines if party on specified relationships, cards, or accounts would like to receive marketing material. Value would be boolean True if they want marketing material or false if party has opted out of marketing material. False can be specified, but it is assumed if not present.  No subTypes apply. The contact ID related to this preference is the specific contact that should be used for communicating to the party. If this preference is present and active, communication should go to this contact point specified. The value contains a textual description as to when the party prefers to be contacted.  No sub types apply. The preferred language with which the party(ies) wishes to communicate.  No sub types apply. Value values are IANA â€“ language codes. http://www.iana.org/assignments/language-subtag-registry http://www.w3.org/International/questions/qa-lang-2or3.en.php If this type is specified and the value is not present, the value will assumed to be equal to en-us unless the value field is specified. If this type is not specified, then en-us (US English) is assumed. The website stylesheet preferred is contained in the value field.  No sub types apply. The mobile stylesheet preferred is contained in the value field.  No sub types apply. See sub type for the specific type of email contact format that should be used. A preference associated to the amount of time a session remains active. The value field holds the number of seconds that a session stays active. A preference associated to widgets being displayed within a web site, mobile, etc. See the WidgetSubType for specifics on displaying the widget within the delivery channel. Determines if party(ies) wishes to receive paper statements would typically be used in conjunction with eStatements option if party(ies) would like to receive both paper and eStatements. If value is True then they receive paper statements. If value is False or record does not exist, they do not receive paper statements, and have opted to receive eStatements. Determines if party(ies) wishes to be enrolled in member-to-member transfers within the same financial institution. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. Determines if party(ies) wishes to be enrolled in person-to-person transfers/payments across financial institutions. If value is True then they are enrolled.  If value is False or record does not exist, they are not enrolled. The value contains information that can be interpreted by the end points.  The data to drive the preference is most likely in customData name/value pairs. Determines if party(ies) wishes to stop or inhibit solicitations. If value is True then solicitation is prohibited.  If value is False or record does not exist then solicitation activity can occur. </value>
        [DataMember(Name="preferenceType", EmitDefaultValue=true)]
        public PreferenceTypeEnum PreferenceType { get; set; }

        /// <summary>
        /// Gets or Sets SubType
        /// </summary>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public PreferenceSubType SubType { get; set; }

        /// <summary>
        /// Date that the preference was last changed.  Typically read-only. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date that the preference was last changed.  Typically read-only. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="lastChangedDateTime", EmitDefaultValue=false)]
        public string LastChangedDateTime { get; set; }


        /// <summary>
        /// The preference status can either be a Template, Inactive or Active. If Inactive then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. If Template, then this indicates that the preference is available for consumption by all parties. Once the party creates the preference, it would be saved with the account information, etc. to relate it to the accounts, parties, relationships, and cards appropriate for the party. If Active, then preference should be used when determining actions to take for the party, relationship, etc. If Inactive, then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. 
        /// </summary>
        /// <value>The preference status can either be a Template, Inactive or Active. If Inactive then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. If Template, then this indicates that the preference is available for consumption by all parties. Once the party creates the preference, it would be saved with the account information, etc. to relate it to the accounts, parties, relationships, and cards appropriate for the party. If Active, then preference should be used when determining actions to take for the party, relationship, etc. If Inactive, then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. </value>
        [TypeConverter(typeof(CustomEnumConverter<PreferenceStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PreferenceStatusEnum
        {
            
            /// <summary>
            /// Enum TemplateEnum for Template
            /// </summary>
            [EnumMember(Value = "Template")]
            TemplateEnum = 1,
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 2,
            
            /// <summary>
            /// Enum InactiveEnum for Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            InactiveEnum = 3
        }

        /// <summary>
        /// The preference status can either be a Template, Inactive or Active. If Inactive then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. If Template, then this indicates that the preference is available for consumption by all parties. Once the party creates the preference, it would be saved with the account information, etc. to relate it to the accounts, parties, relationships, and cards appropriate for the party. If Active, then preference should be used when determining actions to take for the party, relationship, etc. If Inactive, then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. 
        /// </summary>
        /// <value>The preference status can either be a Template, Inactive or Active. If Inactive then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. If Template, then this indicates that the preference is available for consumption by all parties. Once the party creates the preference, it would be saved with the account information, etc. to relate it to the accounts, parties, relationships, and cards appropriate for the party. If Active, then preference should be used when determining actions to take for the party, relationship, etc. If Inactive, then the preference record should be ignored.  This is helpful for retaining values if a preference is temporarily inactivated but the current values should be retained for future use. </value>
        [DataMember(Name="preferenceStatus", EmitDefaultValue=true)]
        public PreferenceStatusEnum PreferenceStatus { get; set; }

        /// <summary>
        /// The value specified for the preference.  This can either be a numeric, boolean, date/time or text value depending upon the type and sub type of the preference. For preference status of Template, this value represents the default value if provided. 
        /// </summary>
        /// <value>The value specified for the preference.  This can either be a numeric, boolean, date/time or text value depending upon the type and sub type of the preference. For preference status of Template, this value represents the default value if provided. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }


        /// <summary>
        /// Data type values. 
        /// </summary>
        /// <value>Data type values. </value>
        [TypeConverter(typeof(CustomEnumConverter<ValueDataTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ValueDataTypeEnum
        {
            
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 1,
            
            /// <summary>
            /// Enum IntegerEnum for integer
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum = 2,
            
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 3,
            
            /// <summary>
            /// Enum DateTimeEnum for dateTime
            /// </summary>
            [EnumMember(Value = "dateTime")]
            DateTimeEnum = 4,
            
            /// <summary>
            /// Enum BooleanEnum for boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            BooleanEnum = 5,
            
            /// <summary>
            /// Enum LongEnum for long
            /// </summary>
            [EnumMember(Value = "long")]
            LongEnum = 6,
            
            /// <summary>
            /// Enum DoubleEnum for double
            /// </summary>
            [EnumMember(Value = "double")]
            DoubleEnum = 7,
            
            /// <summary>
            /// Enum FloatEnum for float
            /// </summary>
            [EnumMember(Value = "float")]
            FloatEnum = 8,
            
            /// <summary>
            /// Enum DecimalEnum for decimal
            /// </summary>
            [EnumMember(Value = "decimal")]
            DecimalEnum = 9
        }

        /// <summary>
        /// Data type values. 
        /// </summary>
        /// <value>Data type values. </value>
        [DataMember(Name="valueDataType", EmitDefaultValue=true)]
        public ValueDataTypeEnum ValueDataType { get; set; }


        /// <summary>
        /// The preference frequency rate. 
        /// </summary>
        /// <value>The preference frequency rate. </value>
        [TypeConverter(typeof(CustomEnumConverter<PreferenceFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PreferenceFrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// The preference frequency rate. 
        /// </summary>
        /// <value>The preference frequency rate. </value>
        [DataMember(Name="preferenceFrequency", EmitDefaultValue=true)]
        public PreferenceFrequencyEnum PreferenceFrequency { get; set; }

        /// <summary>
        /// When type is EAlert and subType is ScheduledMessage, additional custom text to send in an alert. For preference status of Template, this value represents the default value if provided. 
        /// </summary>
        /// <value>When type is EAlert and subType is ScheduledMessage, additional custom text to send in an alert. For preference status of Template, this value represents the default value if provided. </value>
        [DataMember(Name="alertCustomText", EmitDefaultValue=false)]
        public string AlertCustomText { get; set; }

        /// <summary>
        /// Gets or Sets WhereToContactIdList
        /// </summary>
        [DataMember(Name="whereToContactIdList", EmitDefaultValue=false)]
        public ActivityActivityRelatedToContactIdList WhereToContactIdList { get; set; }

        /// <summary>
        /// Valid only for preference records of EAlert type. Determines if the alert, when sent to the party, is expecting a response back from the party. For example, if a party receives an alert that states that their loan is overdue, it could ask a question that the user needs to respond to in order to make the payment.  An additional example might be if a transaction went through that appears to be fraudulent, the alert could expect a response back from the party to allow the posting to occur. This field is typically not managed by the party but is set by the system. 
        /// </summary>
        /// <value>Valid only for preference records of EAlert type. Determines if the alert, when sent to the party, is expecting a response back from the party. For example, if a party receives an alert that states that their loan is overdue, it could ask a question that the user needs to respond to in order to make the payment.  An additional example might be if a transaction went through that appears to be fraudulent, the alert could expect a response back from the party to allow the posting to occur. This field is typically not managed by the party but is set by the system. </value>
        [DataMember(Name="actionableAlert", EmitDefaultValue=true)]
        public bool ActionableAlert { get; set; }

        /// <summary>
        /// When the preference is of type Widget, this pulls all the preferences related to a specific widget together for the party on the accounts, etc. 
        /// </summary>
        /// <value>When the preference is of type Widget, this pulls all the preferences related to a specific widget together for the party on the accounts, etc. </value>
        [DataMember(Name="widgetName", EmitDefaultValue=false)]
        public string WidgetName { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentificationList
        /// </summary>
        [DataMember(Name="accountIdentificationList", EmitDefaultValue=false)]
        public AccountFilterAccountIdentificationList AccountIdentificationList { get; set; }

    }
}
