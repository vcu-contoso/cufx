/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details relating to a loan account. 
    /// </summary>
    [DataContract]
    public partial class Loan 
    {
        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="accountSubType", EmitDefaultValue=false)]
        public string AccountSubType { get; set; }

        /// <summary>
        /// The date that the account was opened. 
        /// </summary>
        /// <value>The date that the account was opened. </value>
        [DataMember(Name="openDate", EmitDefaultValue=false)]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// The date that the account was closed. 
        /// </summary>
        /// <value>The date that the account was closed. </value>
        [DataMember(Name="closeDate", EmitDefaultValue=false)]
        public DateTime CloseDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public AccountAccountStatus AccountStatus { get; set; }

        /// <summary>
        /// For use to support additional acount sub statuses not present in enumerations. 
        /// </summary>
        /// <value>For use to support additional acount sub statuses not present in enumerations. </value>
        [DataMember(Name="accountSubStatus", EmitDefaultValue=false)]
        public string AccountSubStatus { get; set; }

        /// <summary>
        /// The account number portion of a draft or line of credit MICR line. 
        /// </summary>
        /// <value>The account number portion of a draft or line of credit MICR line. </value>
        [DataMember(Name="micrAccountNumber", EmitDefaultValue=false)]
        public string MicrAccountNumber { get; set; }

        /// <summary>
        /// Routing number for the account. 
        /// </summary>
        /// <value>Routing number for the account. </value>
        [DataMember(Name="routingNumber", EmitDefaultValue=false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The account ID as a masked or obfuscated representation of the Account ID (accountId). This can be used for display or document generation purposes as a security precaution, or in cases where the accountId element has been encrypted or tokenized. 
        /// </summary>
        /// <value>The account ID as a masked or obfuscated representation of the Account ID (accountId). This can be used for display or document generation purposes as a security precaution, or in cases where the accountId element has been encrypted or tokenized. </value>
        [DataMember(Name="displayAccountId", EmitDefaultValue=false)]
        public string DisplayAccountId { get; set; }


        /// <summary>
        /// Whether the ID is actual, or simply reserved. 
        /// </summary>
        /// <value>Whether the ID is actual, or simply reserved. </value>
        [TypeConverter(typeof(CustomEnumConverter<IdTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IdTypeEnum
        {
            
            /// <summary>
            /// Enum ReservedEnum for Reserved
            /// </summary>
            [EnumMember(Value = "Reserved")]
            ReservedEnum = 1,
            
            /// <summary>
            /// Enum ActualEnum for Actual
            /// </summary>
            [EnumMember(Value = "Actual")]
            ActualEnum = 2
        }

        /// <summary>
        /// Whether the ID is actual, or simply reserved. 
        /// </summary>
        /// <value>Whether the ID is actual, or simply reserved. </value>
        [DataMember(Name="idType", EmitDefaultValue=true)]
        public IdTypeEnum IdType { get; set; }

        /// <summary>
        /// The account description is the textual representation of the account. This value is visible to the user and must be human-readable. 
        /// </summary>
        /// <value>The account description is the textual representation of the account. This value is visible to the user and must be human-readable. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. Deprecated - See accountSubType in AccountBase. - Planned removal in v5.0. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. Deprecated - See accountSubType in AccountBase. - Planned removal in v5.0. </value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// The date that Escheatment was applied to the account. 
        /// </summary>
        /// <value>The date that Escheatment was applied to the account. </value>
        [DataMember(Name="accountEscheatDate", EmitDefaultValue=false)]
        public DateTime AccountEscheatDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountEscheatAmount
        /// </summary>
        [DataMember(Name="accountEscheatAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount AccountEscheatAmount { get; set; }

        /// <summary>
        /// The date that the account was charged off. 
        /// </summary>
        /// <value>The date that the account was charged off. </value>
        [DataMember(Name="chargeOffDate", EmitDefaultValue=false)]
        public DateTime ChargeOffDate { get; set; }

        /// <summary>
        /// Gets or Sets ChargeOffAmount
        /// </summary>
        [DataMember(Name="chargeOffAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount ChargeOffAmount { get; set; }

        /// <summary>
        /// Description by the party or user that overrides the default description. 
        /// </summary>
        /// <value>Description by the party or user that overrides the default description. </value>
        [DataMember(Name="accountNickName", EmitDefaultValue=false)]
        public string AccountNickName { get; set; }

        /// <summary>
        /// Name or number identifying which branch owns the account. 
        /// </summary>
        /// <value>Name or number identifying which branch owns the account. </value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets ActualBalance
        /// </summary>
        [DataMember(Name="actualBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount ActualBalance { get; set; }

        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name="availableBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount AvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceAvailableBalance
        /// </summary>
        [DataMember(Name="cashAdvanceAvailableBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceAvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceBalance
        /// </summary>
        [DataMember(Name="cashAdvanceBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceLimit
        /// </summary>
        [DataMember(Name="cashAdvanceLimit", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceLimit { get; set; }

        /// <summary>
        /// Gets or Sets MinimumBalance
        /// </summary>
        [DataMember(Name="minimumBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumBalance { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountBankAddress
        /// </summary>
        [DataMember(Name="externalAccountBankAddress", EmitDefaultValue=false)]
        public AccountExternalAccountBankAddress ExternalAccountBankAddress { get; set; }

        /// <summary>
        /// SWIFTCode for wire transfer. 
        /// </summary>
        /// <value>SWIFTCode for wire transfer. </value>
        [DataMember(Name="externalAccountSWIFTCode", EmitDefaultValue=false)]
        public string ExternalAccountSWIFTCode { get; set; }

        /// <summary>
        /// IBAN of external institution, used for wire transfers.  This replaces the micrAccountNumber for certain financial institutions in foreign nations, and no routing or SWIFT code is necessary when an IBAN (and potentially bank code, below) is provided to identify the account. 
        /// </summary>
        /// <value>IBAN of external institution, used for wire transfers.  This replaces the micrAccountNumber for certain financial institutions in foreign nations, and no routing or SWIFT code is necessary when an IBAN (and potentially bank code, below) is provided to identify the account. </value>
        [DataMember(Name="externalAccountIBANCode", EmitDefaultValue=false)]
        public string ExternalAccountIBANCode { get; set; }

        /// <summary>
        /// Bank code, required (in addition to other identifiers) for institutions in certain foreign nations, used for wire transfers. 
        /// </summary>
        /// <value>Bank code, required (in addition to other identifiers) for institutions in certain foreign nations, used for wire transfers. </value>
        [DataMember(Name="externalAccountBankCode", EmitDefaultValue=false)]
        public string ExternalAccountBankCode { get; set; }

        /// <summary>
        /// True for an external account, false for an internal account. 
        /// </summary>
        /// <value>True for an external account, false for an internal account. </value>
        [DataMember(Name="externalAccountFlag", EmitDefaultValue=true)]
        public bool ExternalAccountFlag { get; set; }

        /// <summary>
        /// Default is false.  When user confirms microdeposit, this becomes true. 
        /// </summary>
        /// <value>Default is false.  When user confirms microdeposit, this becomes true. </value>
        [DataMember(Name="externalAccountVerified", EmitDefaultValue=true)]
        public bool ExternalAccountVerified { get; set; }

        /// <summary>
        /// True when transfers are allowed from external account. 
        /// </summary>
        /// <value>True when transfers are allowed from external account. </value>
        [DataMember(Name="externalTransferFrom", EmitDefaultValue=true)]
        public bool ExternalTransferFrom { get; set; }

        /// <summary>
        /// True when transfers are allowed to external account. 
        /// </summary>
        /// <value>True when transfers are allowed to external account. </value>
        [DataMember(Name="externalTransferTo", EmitDefaultValue=true)]
        public bool ExternalTransferTo { get; set; }

        /// <summary>
        /// True when transfers are allowed from this account. 
        /// </summary>
        /// <value>True when transfers are allowed from this account. </value>
        [DataMember(Name="transferFrom", EmitDefaultValue=true)]
        public bool TransferFrom { get; set; }

        /// <summary>
        /// True when transfers are allowed to this account. 
        /// </summary>
        /// <value>True when transfers are allowed to this account. </value>
        [DataMember(Name="transferTo", EmitDefaultValue=true)]
        public bool TransferTo { get; set; }


        /// <summary>
        /// Whether the rate type is fixed or variable based on some index. 
        /// </summary>
        /// <value>Whether the rate type is fixed or variable based on some index. </value>
        [TypeConverter(typeof(CustomEnumConverter<RateTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RateTypeEnum
        {
            
            /// <summary>
            /// Enum FixedEnum for Fixed
            /// </summary>
            [EnumMember(Value = "Fixed")]
            FixedEnum = 1,
            
            /// <summary>
            /// Enum VariableEnum for Variable
            /// </summary>
            [EnumMember(Value = "Variable")]
            VariableEnum = 2
        }

        /// <summary>
        /// Whether the rate type is fixed or variable based on some index. 
        /// </summary>
        /// <value>Whether the rate type is fixed or variable based on some index. </value>
        [DataMember(Name="rateType", EmitDefaultValue=true)]
        public RateTypeEnum RateType { get; set; }

        /// <summary>
        /// FI defined code that identifies the source of the application that created the account such as customer request, cross sale, counter offer, promo, etc. 
        /// </summary>
        /// <value>FI defined code that identifies the source of the application that created the account such as customer request, cross sale, counter offer, promo, etc. </value>
        [DataMember(Name="sourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Gets or Sets PartyIdList
        /// </summary>
        [DataMember(Name="partyIdList", EmitDefaultValue=false)]
        public AccountPartyIdList PartyIdList { get; set; }

        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Gets or Sets AccountNoteList
        /// </summary>
        [DataMember(Name="accountNoteList", EmitDefaultValue=false)]
        public AccountAccountNoteList AccountNoteList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public AccountMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets TransactionList
        /// </summary>
        [DataMember(Name="transactionList", EmitDefaultValue=false)]
        public AccountTransactionList TransactionList { get; set; }


        /// <summary>
        /// The time interval for posting interest to the account. 
        /// </summary>
        /// <value>The time interval for posting interest to the account. </value>
        [TypeConverter(typeof(CustomEnumConverter<InterestPostingFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InterestPostingFrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// The time interval for posting interest to the account. 
        /// </summary>
        /// <value>The time interval for posting interest to the account. </value>
        [DataMember(Name="interestPostingFrequency", EmitDefaultValue=true)]
        public InterestPostingFrequencyEnum InterestPostingFrequency { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingsInfoList
        /// </summary>
        [DataMember(Name="withholdingsInfoList", EmitDefaultValue=false)]
        public AccountWithholdingsInfoList WithholdingsInfoList { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="overDraftProtectionAccountId", EmitDefaultValue=false)]
        public string OverDraftProtectionAccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<OverDraftProtectionAccountTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OverDraftProtectionAccountTypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="overDraftProtectionAccountType", EmitDefaultValue=true)]
        public OverDraftProtectionAccountTypeEnum OverDraftProtectionAccountType { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="overDraftProtectionAccountSubType", EmitDefaultValue=false)]
        public string OverDraftProtectionAccountSubType { get; set; }

        /// <summary>
        /// Gets or Sets LoanPartyList
        /// </summary>
        [DataMember(Name="loanPartyList", EmitDefaultValue=false)]
        public LoanLoanPartyList LoanPartyList { get; set; }

        /// <summary>
        /// Officer initials/name/number indicating who approved the loan. 
        /// </summary>
        /// <value>Officer initials/name/number indicating who approved the loan. </value>
        [DataMember(Name="officerId", EmitDefaultValue=false)]
        public string OfficerId { get; set; }

        /// <summary>
        /// The processor of the loan. 
        /// </summary>
        /// <value>The processor of the loan. </value>
        [DataMember(Name="processorId", EmitDefaultValue=false)]
        public string ProcessorId { get; set; }

        /// <summary>
        /// The date on which the loan was decisioned. 
        /// </summary>
        /// <value>The date on which the loan was decisioned. </value>
        [DataMember(Name="loanDecisionDate", EmitDefaultValue=false)]
        public DateTime LoanDecisionDate { get; set; }

        /// <summary>
        /// The date on which the application was originated. 
        /// </summary>
        /// <value>The date on which the application was originated. </value>
        [DataMember(Name="applicationOriginationDate", EmitDefaultValue=false)]
        public DateTime ApplicationOriginationDate { get; set; }


        /// <summary>
        /// Decision status. 
        /// </summary>
        /// <value>Decision status. </value>
        [TypeConverter(typeof(CustomEnumConverter<ApplicationDecisionStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApplicationDecisionStatusEnum
        {
            
            /// <summary>
            /// Enum ApproveEnum for Approve
            /// </summary>
            [EnumMember(Value = "Approve")]
            ApproveEnum = 1,
            
            /// <summary>
            /// Enum CounterOfferEnum for CounterOffer
            /// </summary>
            [EnumMember(Value = "CounterOffer")]
            CounterOfferEnum = 2,
            
            /// <summary>
            /// Enum DeniedEnum for Denied
            /// </summary>
            [EnumMember(Value = "Denied")]
            DeniedEnum = 3,
            
            /// <summary>
            /// Enum ReviewEnum for Review
            /// </summary>
            [EnumMember(Value = "Review")]
            ReviewEnum = 4,
            
            /// <summary>
            /// Enum WithdrawnEnum for Withdrawn
            /// </summary>
            [EnumMember(Value = "Withdrawn")]
            WithdrawnEnum = 5
        }

        /// <summary>
        /// Decision status. 
        /// </summary>
        /// <value>Decision status. </value>
        [DataMember(Name="applicationDecisionStatus", EmitDefaultValue=true)]
        public ApplicationDecisionStatusEnum ApplicationDecisionStatus { get; set; }

        /// <summary>
        /// A unique number associated with a loan.  This number is not required. 
        /// </summary>
        /// <value>A unique number associated with a loan.  This number is not required. </value>
        [DataMember(Name="noteNumber", EmitDefaultValue=false)]
        public string NoteNumber { get; set; }


        /// <summary>
        /// Defines which type of loan this loan account represents. 
        /// </summary>
        /// <value>Defines which type of loan this loan account represents. </value>
        [TypeConverter(typeof(CustomEnumConverter<CategoryEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum AverageDailyBalanceLineOfCreditEnum for AverageDailyBalanceLineOfCredit
            /// </summary>
            [EnumMember(Value = "AverageDailyBalanceLineOfCredit")]
            AverageDailyBalanceLineOfCreditEnum = 1,
            
            /// <summary>
            /// Enum ClosedEndEnum for ClosedEnd
            /// </summary>
            [EnumMember(Value = "ClosedEnd")]
            ClosedEndEnum = 2,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 3,
            
            /// <summary>
            /// Enum LeaseEnum for Lease
            /// </summary>
            [EnumMember(Value = "Lease")]
            LeaseEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum LineOfCreditCombinationEnum for LineOfCreditCombination
            /// </summary>
            [EnumMember(Value = "LineOfCreditCombination")]
            LineOfCreditCombinationEnum = 6,
            
            /// <summary>
            /// Enum OpenEndEnum for OpenEnd
            /// </summary>
            [EnumMember(Value = "OpenEnd")]
            OpenEndEnum = 7,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 8,
            
            /// <summary>
            /// Enum CommercialEnum for Commercial
            /// </summary>
            [EnumMember(Value = "Commercial")]
            CommercialEnum = 9,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 10,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 11,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 12
        }

        /// <summary>
        /// Defines which type of loan this loan account represents. 
        /// </summary>
        /// <value>Defines which type of loan this loan account represents. </value>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public CategoryEnum Category { get; set; }

        /// <summary>
        /// Code that identifies the purpose for the loan. 
        /// </summary>
        /// <value>Code that identifies the purpose for the loan. </value>
        [DataMember(Name="purposeCode", EmitDefaultValue=false)]
        public string PurposeCode { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name="requestedAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets NoteAmount
        /// </summary>
        [DataMember(Name="noteAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount NoteAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name="creditLimit", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CreditLimit { get; set; }

        /// <summary>
        /// Expiration date of the credit limit on a line of credit or credit card. 
        /// </summary>
        /// <value>Expiration date of the credit limit on a line of credit or credit card. </value>
        [DataMember(Name="creditLimitExpiration", EmitDefaultValue=false)]
        public DateTime CreditLimitExpiration { get; set; }

        /// <summary>
        /// Used to aggregate a group of loan balances to determine their individual available balance. Used to determine the total available credit amount you are allowed for all loans defined on the core that are included in this group. 
        /// </summary>
        /// <value>Used to aggregate a group of loan balances to determine their individual available balance. Used to determine the total available credit amount you are allowed for all loans defined on the core that are included in this group. </value>
        [DataMember(Name="creditLimitGroupCode", EmitDefaultValue=false)]
        public string CreditLimitGroupCode { get; set; }


        /// <summary>
        /// This individual has contractual responsibility for this account and is primarily responsible for its payment. This individual is contractually obligated to repay all debts arising on this account. There are other people associated with this account who may or may not have contractual responsibility. This individual is an authorized user of this account; another individual has contractual responsibility. This individual is liable for the credit, but does not receive the benefit of the loan. Note: this individual is required to sign the Co-Signer Notice (Reg AA). This individual is responsible for this account, which is guaranteed by a Co-maker (co-signer). The individual guarantees this account along with the Maker. Note: this is the same as the co-borrower. No further responsibility. Responsibility not specified. A business or commmercial entity has contractual responsibility for this account and is primarily responsible for its payment. This individual associated to this account is deceased. 
        /// </summary>
        /// <value>This individual has contractual responsibility for this account and is primarily responsible for its payment. This individual is contractually obligated to repay all debts arising on this account. There are other people associated with this account who may or may not have contractual responsibility. This individual is an authorized user of this account; another individual has contractual responsibility. This individual is liable for the credit, but does not receive the benefit of the loan. Note: this individual is required to sign the Co-Signer Notice (Reg AA). This individual is responsible for this account, which is guaranteed by a Co-maker (co-signer). The individual guarantees this account along with the Maker. Note: this is the same as the co-borrower. No further responsibility. Responsibility not specified. A business or commmercial entity has contractual responsibility for this account and is primarily responsible for its payment. This individual associated to this account is deceased. </value>
        [TypeConverter(typeof(CustomEnumConverter<EcoaGroupEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EcoaGroupEnum
        {
            
            /// <summary>
            /// Enum IndividualEnum for Individual
            /// </summary>
            [EnumMember(Value = "Individual")]
            IndividualEnum = 1,
            
            /// <summary>
            /// Enum JointEnum for Joint
            /// </summary>
            [EnumMember(Value = "Joint")]
            JointEnum = 2,
            
            /// <summary>
            /// Enum AuthorizedUserEnum for AuthorizedUser
            /// </summary>
            [EnumMember(Value = "AuthorizedUser")]
            AuthorizedUserEnum = 3,
            
            /// <summary>
            /// Enum CoSignerEnum for CoSigner
            /// </summary>
            [EnumMember(Value = "CoSigner")]
            CoSignerEnum = 4,
            
            /// <summary>
            /// Enum MakerEnum for Maker
            /// </summary>
            [EnumMember(Value = "Maker")]
            MakerEnum = 5,
            
            /// <summary>
            /// Enum CoMakerEnum for CoMaker
            /// </summary>
            [EnumMember(Value = "CoMaker")]
            CoMakerEnum = 6,
            
            /// <summary>
            /// Enum TerminatedEnum for Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            TerminatedEnum = 7,
            
            /// <summary>
            /// Enum UndesignatedEnum for Undesignated
            /// </summary>
            [EnumMember(Value = "Undesignated")]
            UndesignatedEnum = 8,
            
            /// <summary>
            /// Enum BusinessOrCommercialEnum for BusinessOrCommercial
            /// </summary>
            [EnumMember(Value = "BusinessOrCommercial")]
            BusinessOrCommercialEnum = 9,
            
            /// <summary>
            /// Enum DeceasedEnum for Deceased
            /// </summary>
            [EnumMember(Value = "Deceased")]
            DeceasedEnum = 10
        }

        /// <summary>
        /// This individual has contractual responsibility for this account and is primarily responsible for its payment. This individual is contractually obligated to repay all debts arising on this account. There are other people associated with this account who may or may not have contractual responsibility. This individual is an authorized user of this account; another individual has contractual responsibility. This individual is liable for the credit, but does not receive the benefit of the loan. Note: this individual is required to sign the Co-Signer Notice (Reg AA). This individual is responsible for this account, which is guaranteed by a Co-maker (co-signer). The individual guarantees this account along with the Maker. Note: this is the same as the co-borrower. No further responsibility. Responsibility not specified. A business or commmercial entity has contractual responsibility for this account and is primarily responsible for its payment. This individual associated to this account is deceased. 
        /// </summary>
        /// <value>This individual has contractual responsibility for this account and is primarily responsible for its payment. This individual is contractually obligated to repay all debts arising on this account. There are other people associated with this account who may or may not have contractual responsibility. This individual is an authorized user of this account; another individual has contractual responsibility. This individual is liable for the credit, but does not receive the benefit of the loan. Note: this individual is required to sign the Co-Signer Notice (Reg AA). This individual is responsible for this account, which is guaranteed by a Co-maker (co-signer). The individual guarantees this account along with the Maker. Note: this is the same as the co-borrower. No further responsibility. Responsibility not specified. A business or commmercial entity has contractual responsibility for this account and is primarily responsible for its payment. This individual associated to this account is deceased. </value>
        [DataMember(Name="ecoaGroup", EmitDefaultValue=true)]
        public EcoaGroupEnum EcoaGroup { get; set; }

        /// <summary>
        /// Code used for reporting to the credit bureaus. 
        /// </summary>
        /// <value>Code used for reporting to the credit bureaus. </value>
        [DataMember(Name="creditReportingCode", EmitDefaultValue=false)]
        public string CreditReportingCode { get; set; }

        /// <summary>
        /// Indicates revolving line of credit or non-revolving line of credit. 
        /// </summary>
        /// <value>Indicates revolving line of credit or non-revolving line of credit. </value>
        [DataMember(Name="isRevolvingLineOfCredit", EmitDefaultValue=true)]
        public bool IsRevolvingLineOfCredit { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAdvanceAmount
        /// </summary>
        [DataMember(Name="minimumAdvanceAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumAdvanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAdvanceAmount
        /// </summary>
        [DataMember(Name="maximumAdvanceAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MaximumAdvanceAmount { get; set; }

        /// <summary>
        /// Date on which the loan was originated. 
        /// </summary>
        /// <value>Date on which the loan was originated. </value>
        [DataMember(Name="originationDate", EmitDefaultValue=false)]
        public DateTime OriginationDate { get; set; }

        /// <summary>
        /// Date on which the loan was funded. 
        /// </summary>
        /// <value>Date on which the loan was funded. </value>
        [DataMember(Name="fundedDate", EmitDefaultValue=false)]
        public DateTime FundedDate { get; set; }

        /// <summary>
        /// Date on which loan amount is disbursed. 
        /// </summary>
        /// <value>Date on which loan amount is disbursed. </value>
        [DataMember(Name="disbursalDate", EmitDefaultValue=false)]
        public DateTime DisbursalDate { get; set; }

        /// <summary>
        /// Actual date (not system date) that a loan record is created on the host system. 
        /// </summary>
        /// <value>Actual date (not system date) that a loan record is created on the host system. </value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Date on which the last loan payment was received. 
        /// </summary>
        /// <value>Date on which the last loan payment was received. </value>
        [DataMember(Name="lastPaymentDate", EmitDefaultValue=false)]
        public DateTime LastPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets LastPaymentAmount
        /// </summary>
        [DataMember(Name="lastPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount LastPaymentAmount { get; set; }

        /// <summary>
        /// Term value of the loan. 
        /// </summary>
        /// <value>Term value of the loan. </value>
        [DataMember(Name="term", EmitDefaultValue=true)]
        public int Term { get; set; }


        /// <summary>
        /// Type of term value specified. 
        /// </summary>
        /// <value>Type of term value specified. </value>
        [TypeConverter(typeof(CustomEnumConverter<TermTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TermTypeEnum
        {
            
            /// <summary>
            /// Enum DaysEnum for Days
            /// </summary>
            [EnumMember(Value = "Days")]
            DaysEnum = 1,
            
            /// <summary>
            /// Enum MonthsEnum for Months
            /// </summary>
            [EnumMember(Value = "Months")]
            MonthsEnum = 2,
            
            /// <summary>
            /// Enum YearsEnum for Years
            /// </summary>
            [EnumMember(Value = "Years")]
            YearsEnum = 3
        }

        /// <summary>
        /// Type of term value specified. 
        /// </summary>
        /// <value>Type of term value specified. </value>
        [DataMember(Name="termType", EmitDefaultValue=true)]
        public TermTypeEnum TermType { get; set; }

        /// <summary>
        /// Gets or Sets CreditReportList
        /// </summary>
        [DataMember(Name="creditReportList", EmitDefaultValue=false)]
        public ApplicantCreditReportList CreditReportList { get; set; }

        /// <summary>
        /// Gets or Sets LoanInterestRateDetail
        /// </summary>
        [DataMember(Name="loanInterestRateDetail", EmitDefaultValue=false)]
        public LoanLoanInterestRateDetail LoanInterestRateDetail { get; set; }

        /// <summary>
        /// Gets or Sets PaymentOption
        /// </summary>
        [DataMember(Name="paymentOption", EmitDefaultValue=false)]
        public LoanPaymentOption PaymentOption { get; set; }


        /// <summary>
        /// Method for calculating the interest on the loan (360, 365). 
        /// </summary>
        /// <value>Method for calculating the interest on the loan (360, 365). </value>
        [TypeConverter(typeof(CustomEnumConverter<InterestCalculationTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InterestCalculationTypeEnum
        {
            
            /// <summary>
            /// Enum Actual360Enum for Actual360
            /// </summary>
            [EnumMember(Value = "Actual360")]
            Actual360Enum = 1,
            
            /// <summary>
            /// Enum Actual364Enum for Actual364
            /// </summary>
            [EnumMember(Value = "Actual364")]
            Actual364Enum = 2,
            
            /// <summary>
            /// Enum Daily365Enum for Daily365
            /// </summary>
            [EnumMember(Value = "Daily365")]
            Daily365Enum = 3,
            
            /// <summary>
            /// Enum Daily365LeapEnum for Daily365Leap
            /// </summary>
            [EnumMember(Value = "Daily365Leap")]
            Daily365LeapEnum = 4,
            
            /// <summary>
            /// Enum DailyBilled360Enum for DailyBilled360
            /// </summary>
            [EnumMember(Value = "DailyBilled360")]
            DailyBilled360Enum = 5,
            
            /// <summary>
            /// Enum Monthly360Enum for Monthly360
            /// </summary>
            [EnumMember(Value = "Monthly360")]
            Monthly360Enum = 6,
            
            /// <summary>
            /// Enum Scheduled364Enum for Scheduled364
            /// </summary>
            [EnumMember(Value = "Scheduled364")]
            Scheduled364Enum = 7
        }

        /// <summary>
        /// Method for calculating the interest on the loan (360, 365). 
        /// </summary>
        /// <value>Method for calculating the interest on the loan (360, 365). </value>
        [DataMember(Name="interestCalculationType", EmitDefaultValue=true)]
        public InterestCalculationTypeEnum InterestCalculationType { get; set; }

        /// <summary>
        /// Daily periodic rate for calculating interest. 
        /// </summary>
        /// <value>Daily periodic rate for calculating interest. </value>
        [DataMember(Name="dailyPeriodicRate", EmitDefaultValue=true)]
        public decimal DailyPeriodicRate { get; set; }

        /// <summary>
        /// The full number of payments for the life time of the loan. 
        /// </summary>
        /// <value>The full number of payments for the life time of the loan. </value>
        [DataMember(Name="totalNumberOfPayments", EmitDefaultValue=true)]
        public int TotalNumberOfPayments { get; set; }

        /// <summary>
        /// Gets or Sets PrePaidFinanceCharges
        /// </summary>
        [DataMember(Name="prePaidFinanceCharges", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PrePaidFinanceCharges { get; set; }

        /// <summary>
        /// Gets or Sets PrepaidInterest
        /// </summary>
        [DataMember(Name="prepaidInterest", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PrepaidInterest { get; set; }

        /// <summary>
        /// Date through which the interest is paid. 
        /// </summary>
        /// <value>Date through which the interest is paid. </value>
        [DataMember(Name="interestPaidThruDate", EmitDefaultValue=false)]
        public DateTime InterestPaidThruDate { get; set; }

        /// <summary>
        /// Minimum number of days after a payment change before the payment becomes due, e.g. the billing cycle closes on the 1st. Loan has 25 grace days. Payment is due on the 25th. 
        /// </summary>
        /// <value>Minimum number of days after a payment change before the payment becomes due, e.g. the billing cycle closes on the 1st. Loan has 25 grace days. Payment is due on the 25th. </value>
        [DataMember(Name="numberOfGraceDays", EmitDefaultValue=true)]
        public int NumberOfGraceDays { get; set; }

        /// <summary>
        /// Gets or Sets BalloonAmount
        /// </summary>
        [DataMember(Name="balloonAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount BalloonAmount { get; set; }

        /// <summary>
        /// Date the balloon payment becomes due. 
        /// </summary>
        /// <value>Date the balloon payment becomes due. </value>
        [DataMember(Name="balloonDueDate", EmitDefaultValue=false)]
        public DateTime BalloonDueDate { get; set; }


        /// <summary>
        /// Call term/balloon term type. 
        /// </summary>
        /// <value>Call term/balloon term type. </value>
        [TypeConverter(typeof(CustomEnumConverter<BalloonDueDateTermEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BalloonDueDateTermEnum
        {
            
            /// <summary>
            /// Enum MonthsEnum for Months
            /// </summary>
            [EnumMember(Value = "Months")]
            MonthsEnum = 1,
            
            /// <summary>
            /// Enum YearsEnum for Years
            /// </summary>
            [EnumMember(Value = "Years")]
            YearsEnum = 2
        }

        /// <summary>
        /// Call term/balloon term type. 
        /// </summary>
        /// <value>Call term/balloon term type. </value>
        [DataMember(Name="balloonDueDateTerm", EmitDefaultValue=true)]
        public BalloonDueDateTermEnum BalloonDueDateTerm { get; set; }

        /// <summary>
        /// Call term/balloon term value. 
        /// </summary>
        /// <value>Call term/balloon term value. </value>
        [DataMember(Name="balloonDueDateTermValue", EmitDefaultValue=true)]
        public int BalloonDueDateTermValue { get; set; }


        /// <summary>
        /// How to handle prepayment penalties 
        /// </summary>
        /// <value>How to handle prepayment penalties </value>
        [TypeConverter(typeof(CustomEnumConverter<PrepaymentPenaltyBasisEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PrepaymentPenaltyBasisEnum
        {
            
            /// <summary>
            /// Enum AmountEnum for Amount
            /// </summary>
            [EnumMember(Value = "Amount")]
            AmountEnum = 1,
            
            /// <summary>
            /// Enum PercentOfBalanceEnum for PercentOfBalance
            /// </summary>
            [EnumMember(Value = "PercentOfBalance")]
            PercentOfBalanceEnum = 2,
            
            /// <summary>
            /// Enum PercentOfOriginalAmountEnum for PercentOfOriginalAmount
            /// </summary>
            [EnumMember(Value = "PercentOfOriginalAmount")]
            PercentOfOriginalAmountEnum = 3,
            
            /// <summary>
            /// Enum PercentOfPrincipalEnum for PercentOfPrincipal
            /// </summary>
            [EnumMember(Value = "PercentOfPrincipal")]
            PercentOfPrincipalEnum = 4,
            
            /// <summary>
            /// Enum PercentOfUndisbursedEnum for PercentOfUndisbursed
            /// </summary>
            [EnumMember(Value = "PercentOfUndisbursed")]
            PercentOfUndisbursedEnum = 5
        }

        /// <summary>
        /// How to handle prepayment penalties 
        /// </summary>
        /// <value>How to handle prepayment penalties </value>
        [DataMember(Name="prepaymentPenaltyBasis", EmitDefaultValue=true)]
        public PrepaymentPenaltyBasisEnum PrepaymentPenaltyBasis { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentPenaltyBasisAmount
        /// </summary>
        [DataMember(Name="prepaymentPenaltyBasisAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PrepaymentPenaltyBasisAmount { get; set; }

        /// <summary>
        /// Prepayment penalty percentage, which is required if PrepaymentPenaltyBasis is not Amount. It will be required depending on PrepaymentPenaltyBasis value. 
        /// </summary>
        /// <value>Prepayment penalty percentage, which is required if PrepaymentPenaltyBasis is not Amount. It will be required depending on PrepaymentPenaltyBasis value. </value>
        [DataMember(Name="prepaymentPenaltyPercentage", EmitDefaultValue=true)]
        public decimal PrepaymentPenaltyPercentage { get; set; }

        /// <summary>
        /// Prepayment penalty expiration date. 
        /// </summary>
        /// <value>Prepayment penalty expiration date. </value>
        [DataMember(Name="prepaymentPenaltyExpirationDate", EmitDefaultValue=false)]
        public DateTime PrepaymentPenaltyExpirationDate { get; set; }

        /// <summary>
        /// Used in statement generation programs. Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. 
        /// </summary>
        /// <value>Used in statement generation programs. Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. </value>
        [DataMember(Name="statementCode", EmitDefaultValue=false)]
        public string StatementCode { get; set; }

        /// <summary>
        /// Used to define/categorize loans into statement groups. Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. 
        /// </summary>
        /// <value>Used to define/categorize loans into statement groups. Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. </value>
        [DataMember(Name="statementGroup", EmitDefaultValue=false)]
        public string StatementGroup { get; set; }

        /// <summary>
        /// Date for statement cut-off (billing date). Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. 
        /// </summary>
        /// <value>Date for statement cut-off (billing date). Deprecation: Element is valid for all account types and is being relocated to account.xsd in v5.0 resulting in a sequence breaking change. </value>
        [DataMember(Name="statementDate", EmitDefaultValue=false)]
        public DateTime StatementDate { get; set; }

        /// <summary>
        /// Debt to income percentage. 
        /// </summary>
        /// <value>Debt to income percentage. </value>
        [DataMember(Name="debtIncomeRatio", EmitDefaultValue=true)]
        public decimal DebtIncomeRatio { get; set; }

        /// <summary>
        /// Gets or Sets LoanFeeList
        /// </summary>
        [DataMember(Name="loanFeeList", EmitDefaultValue=false)]
        public LoanLoanFeeList LoanFeeList { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceAddOnList
        /// </summary>
        [DataMember(Name="insuranceAddOnList", EmitDefaultValue=false)]
        public LoanInsuranceAddOnList InsuranceAddOnList { get; set; }

        /// <summary>
        /// Gets or Sets CollateralList
        /// </summary>
        [DataMember(Name="collateralList", EmitDefaultValue=false)]
        public LoanCollateralList CollateralList { get; set; }

        /// <summary>
        /// Gets or Sets AutoPaymentOption
        /// </summary>
        [DataMember(Name="autoPaymentOption", EmitDefaultValue=false)]
        public LoanAutoPaymentOption AutoPaymentOption { get; set; }

        /// <summary>
        /// Gets or Sets DelinquencyNoticeList
        /// </summary>
        [DataMember(Name="delinquencyNoticeList", EmitDefaultValue=false)]
        public LoanDelinquencyNoticeList DelinquencyNoticeList { get; set; }

        /// <summary>
        /// Gets or Sets SkipPayment
        /// </summary>
        [DataMember(Name="skipPayment", EmitDefaultValue=false)]
        public LoanSkipPayment SkipPayment { get; set; }

        /// <summary>
        /// Promo code used to link applications to specific promotions. 
        /// </summary>
        /// <value>Promo code used to link applications to specific promotions. </value>
        [DataMember(Name="promotionCode", EmitDefaultValue=false)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Gets or Sets LoanNoteList
        /// </summary>
        [DataMember(Name="loanNoteList", EmitDefaultValue=false)]
        public AccountAccountNoteList LoanNoteList { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimitIncreaseRequestList
        /// </summary>
        [DataMember(Name="creditLimitIncreaseRequestList", EmitDefaultValue=false)]
        public LoanCreditLimitIncreaseRequestList CreditLimitIncreaseRequestList { get; set; }

        /// <summary>
        /// The total number of payments for the remaining life of the loan. 
        /// </summary>
        /// <value>The total number of payments for the remaining life of the loan. </value>
        [DataMember(Name="numberOfPaymentsRemaining", EmitDefaultValue=true)]
        public int NumberOfPaymentsRemaining { get; set; }

        /// <summary>
        /// The description of the Loan Account Category when LoanAccountCategory is set to OtherLoan. 
        /// </summary>
        /// <value>The description of the Loan Account Category when LoanAccountCategory is set to OtherLoan. </value>
        [DataMember(Name="otherLoanAccountCategory", EmitDefaultValue=false)]
        public string OtherLoanAccountCategory { get; set; }

    }
}
