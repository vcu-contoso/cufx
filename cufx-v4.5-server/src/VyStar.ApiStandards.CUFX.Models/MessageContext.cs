/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The message context contains information that is passed as part of each CUFX message call. All the fields are optional, and whether or not they contain information is determined by the specific implementation requirements. For example, in a multi-tenant environment where multiple financial institutions are hosted, the Financial Institution ID (FIID) may be a required field, necessary for distinguishing which FI the message pertains to. For a single tenant environment with only one financial institution, the Financial Institution ID may not be necessary. 
    /// </summary>
    [DataContract]
    public partial class MessageContext 
    {

        /// <summary>
        /// The CUFX release version for this request. 
        /// </summary>
        /// <value>The CUFX release version for this request. </value>
        [TypeConverter(typeof(CustomEnumConverter<CufxVersionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CufxVersionEnum
        {
            
            /// <summary>
            /// Enum _103Enum for 1.0.3
            /// </summary>
            [EnumMember(Value = "1.0.3")]
            _103Enum = 1,
            
            /// <summary>
            /// Enum _106Enum for 1.0.6
            /// </summary>
            [EnumMember(Value = "1.0.6")]
            _106Enum = 2,
            
            /// <summary>
            /// Enum _200Enum for 2.0.0
            /// </summary>
            [EnumMember(Value = "2.0.0")]
            _200Enum = 3,
            
            /// <summary>
            /// Enum _310Enum for 3.1.0
            /// </summary>
            [EnumMember(Value = "3.1.0")]
            _310Enum = 4,
            
            /// <summary>
            /// Enum _320Enum for 3.2.0
            /// </summary>
            [EnumMember(Value = "3.2.0")]
            _320Enum = 5,
            
            /// <summary>
            /// Enum _330Enum for 3.3.0
            /// </summary>
            [EnumMember(Value = "3.3.0")]
            _330Enum = 6,
            
            /// <summary>
            /// Enum _400Enum for 4.0.0
            /// </summary>
            [EnumMember(Value = "4.0.0")]
            _400Enum = 7,
            
            /// <summary>
            /// Enum _410Enum for 4.1.0
            /// </summary>
            [EnumMember(Value = "4.1.0")]
            _410Enum = 8,
            
            /// <summary>
            /// Enum _420Enum for 4.2.0
            /// </summary>
            [EnumMember(Value = "4.2.0")]
            _420Enum = 9,
            
            /// <summary>
            /// Enum _430Enum for 4.3.0
            /// </summary>
            [EnumMember(Value = "4.3.0")]
            _430Enum = 10,
            
            /// <summary>
            /// Enum _440Enum for 4.4.0
            /// </summary>
            [EnumMember(Value = "4.4.0")]
            _440Enum = 11,
            
            /// <summary>
            /// Enum _450Enum for 4.5.0
            /// </summary>
            [EnumMember(Value = "4.5.0")]
            _450Enum = 12
        }

        /// <summary>
        /// The CUFX release version for this request. 
        /// </summary>
        /// <value>The CUFX release version for this request. </value>
        [DataMember(Name="cufxVersion", EmitDefaultValue=true)]
        public CufxVersionEnum CufxVersion { get; set; }

        /// <summary>
        /// The request ID is a unique identifier which identifies the request from the source system. The client application sends this along with the messages so that it can be logged as a reference for troubleshooting purposes. 
        /// </summary>
        /// <value>The request ID is a unique identifier which identifies the request from the source system. The client application sends this along with the messages so that it can be logged as a reference for troubleshooting purposes. </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Unique identification for the configuration. 
        /// </summary>
        /// <value>Unique identification for the configuration. </value>
        [DataMember(Name="configurationId", EmitDefaultValue=false)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// The vendor ID is a unique identifier which identifies the vendor that is creating a message. The vendor ID is assigned by the FI or established in concert by the vendor and FI. The client application sends this along with the messages so that logging or other business may take place based on the vendor utilizing the service. This ID is not generated per data or security request but is generated \&quot;out-of-band\&quot; (i.e. prior generation by some external mechanism) of this process and stored in the Financial Institutions and Vendorâ€™s systems. A standard error will be returned if the vendor ID is not provided when it is required. 
        /// </summary>
        /// <value>The vendor ID is a unique identifier which identifies the vendor that is creating a message. The vendor ID is assigned by the FI or established in concert by the vendor and FI. The client application sends this along with the messages so that logging or other business may take place based on the vendor utilizing the service. This ID is not generated per data or security request but is generated \&quot;out-of-band\&quot; (i.e. prior generation by some external mechanism) of this process and stored in the Financial Institutions and Vendorâ€™s systems. A standard error will be returned if the vendor ID is not provided when it is required. </value>
        [DataMember(Name="vendorId", EmitDefaultValue=false)]
        public string VendorId { get; set; }

        /// <summary>
        /// The app id is the unique identifier that identifies the application. 
        /// </summary>
        /// <value>The app id is the unique identifier that identifies the application. </value>
        [DataMember(Name="appId", EmitDefaultValue=false)]
        public string AppId { get; set; }

        /// <summary>
        /// The financial institution ID  is used by systems to uniquely identify each financial institution. This ID is determined outside of the process and stored in each system of record, e.g. local application database, vendor configuration file, FI core database, etc. This is helpful for applications that are multi-tenant and  service more than one financial institution. See dataSourceId for more information about multiple data sources for a single FI. A standard error will be returned if the FIID is not provided when it is required. 
        /// </summary>
        /// <value>The financial institution ID  is used by systems to uniquely identify each financial institution. This ID is determined outside of the process and stored in each system of record, e.g. local application database, vendor configuration file, FI core database, etc. This is helpful for applications that are multi-tenant and  service more than one financial institution. See dataSourceId for more information about multiple data sources for a single FI. A standard error will be returned if the FIID is not provided when it is required. </value>
        [DataMember(Name="fiId", EmitDefaultValue=false)]
        public string FiId { get; set; }

        /// <summary>
        /// The data source ID  is used by the systems to uniquely identify a registered data source within the financial institution. This is an agreed upon ID determined outside of the process and stored in each system of record. There may be more than one data source ID per financial institution. For instance, one data source ID may represent the financial institutionâ€™s core provider and another may be used to represent the credit card provider that is not within the core. There may be a one-to-many relationship between FIID  and data source ID. 
        /// </summary>
        /// <value>The data source ID  is used by the systems to uniquely identify a registered data source within the financial institution. This is an agreed upon ID determined outside of the process and stored in each system of record. There may be more than one data source ID per financial institution. For instance, one data source ID may represent the financial institutionâ€™s core provider and another may be used to represent the credit card provider that is not within the core. There may be a one-to-many relationship between FIID  and data source ID. </value>
        [DataMember(Name="dataSourceId", EmitDefaultValue=false)]
        public string DataSourceId { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the network node for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the network node for identification. </value>
        [DataMember(Name="sendingNetworkNodeId", EmitDefaultValue=false)]
        public string SendingNetworkNodeId { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the network node for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the network node for identification. </value>
        [DataMember(Name="receivingNetworkNodeId", EmitDefaultValue=false)]
        public string ReceivingNetworkNodeId { get; set; }

        /// <summary>
        /// Indicates the environment in which the message should be executed. Depends upon agreements between endpoints what is passed for each environment. Examples might be: Dev, QAInternal, UAT, Training, Sandbox, Production. 
        /// </summary>
        /// <value>Indicates the environment in which the message should be executed. Depends upon agreements between endpoints what is passed for each environment. Examples might be: Dev, QAInternal, UAT, Training, Sandbox, Production. </value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }


        /// <summary>
        /// Applicable to creates and updates.  The return data filter is used to streamline the amount of information to return to the client after an update or create.  The client can request all data from the object, only fields that were updated or created, or no data (just a confirmation that it was successful). 
        /// </summary>
        /// <value>Applicable to creates and updates.  The return data filter is used to streamline the amount of information to return to the client after an update or create.  The client can request all data from the object, only fields that were updated or created, or no data (just a confirmation that it was successful). </value>
        [TypeConverter(typeof(CustomEnumConverter<ReturnDataFilterEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReturnDataFilterEnum
        {
            
            /// <summary>
            /// Enum AllEnum for All
            /// </summary>
            [EnumMember(Value = "All")]
            AllEnum = 1,
            
            /// <summary>
            /// Enum OnlyCreatedOrChangedDataEnum for OnlyCreatedOrChangedData
            /// </summary>
            [EnumMember(Value = "OnlyCreatedOrChangedData")]
            OnlyCreatedOrChangedDataEnum = 2,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 3
        }

        /// <summary>
        /// Applicable to creates and updates.  The return data filter is used to streamline the amount of information to return to the client after an update or create.  The client can request all data from the object, only fields that were updated or created, or no data (just a confirmation that it was successful). 
        /// </summary>
        /// <value>Applicable to creates and updates.  The return data filter is used to streamline the amount of information to return to the client after an update or create.  The client can request all data from the object, only fields that were updated or created, or no data (just a confirmation that it was successful). </value>
        [DataMember(Name="returnDataFilter", EmitDefaultValue=true)]
        public ReturnDataFilterEnum ReturnDataFilter { get; set; }

        /// <summary>
        /// A boolean to indicate the inclusion of blank or empty fields in the response message. 
        /// </summary>
        /// <value>A boolean to indicate the inclusion of blank or empty fields in the response message. </value>
        [DataMember(Name="includeBlankFields", EmitDefaultValue=true)]
        public bool IncludeBlankFields { get; set; }

        /// <summary>
        /// A boolean to indicate the inclusion of zero values in the response message. 
        /// </summary>
        /// <value>A boolean to indicate the inclusion of zero values in the response message. </value>
        [DataMember(Name="includeZeroNumerics", EmitDefaultValue=true)]
        public bool IncludeZeroNumerics { get; set; }

        /// <summary>
        /// The  session ID is a unique identifier for the session, based on the connection to the processor or core system for the message being performed. processorSessionId found in the User object is depreciated in favor of sessionId. 
        /// </summary>
        /// <value>The  session ID is a unique identifier for the session, based on the connection to the processor or core system for the message being performed. processorSessionId found in the User object is depreciated in favor of sessionId. </value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets UserList
        /// </summary>
        [DataMember(Name="userList", EmitDefaultValue=false)]
        public MessageContextUserList UserList { get; set; }

        /// <summary>
        /// Gets or Sets StatusList
        /// </summary>
        [DataMember(Name="statusList", EmitDefaultValue=false)]
        public MessageContextStatusList StatusList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
