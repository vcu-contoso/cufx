/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Individual (parent) is the next of kin of another individual (child). 
    /// </summary>
    [DataContract]
    public partial class PartyAssociationPartyAssociationTypeNextOfKin 
    {
        /// <summary>
        /// Pagination support. Current page of information presented in the message response. Typically used in combination with totalPages and pageSize. 
        /// </summary>
        /// <value>Pagination support. Current page of information presented in the message response. Typically used in combination with totalPages and pageSize. </value>
        [DataMember(Name="currentPage", EmitDefaultValue=true)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Pagination support. Total pages of information available as a result of the query. Typically used in combination with currentPage and pageSize. 
        /// </summary>
        /// <value>Pagination support. Total pages of information available as a result of the query. Typically used in combination with currentPage and pageSize. </value>
        [DataMember(Name="totalPages", EmitDefaultValue=true)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Pagination support. The total number of records that may be returned as part of 1 page. Typically used in combination with currentPage and totalPages. 
        /// </summary>
        /// <value>Pagination support. The total number of records that may be returned as part of 1 page. Typically used in combination with currentPage and totalPages. </value>
        [DataMember(Name="pageSize", EmitDefaultValue=true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Pagination support. The record position index of the current message response. 
        /// </summary>
        /// <value>Pagination support. The record position index of the current message response. </value>
        [DataMember(Name="positionIndex", EmitDefaultValue=false)]
        public string PositionIndex { get; set; }

        /// <summary>
        /// Pagination support. The requested page value to be returned in the message response. 
        /// </summary>
        /// <value>Pagination support. The requested page value to be returned in the message response. </value>
        [DataMember(Name="returnPage", EmitDefaultValue=true)]
        public int ReturnPage { get; set; }

        /// <summary>
        /// Pagination support. The requested record position to be returned in the message response. 
        /// </summary>
        /// <value>Pagination support. The requested record position to be returned in the message response. </value>
        [DataMember(Name="returnPositionIndex", EmitDefaultValue=false)]
        public string ReturnPositionIndex { get; set; }


        /// <summary>
        /// Party is the next of kin of another party but the relationship isnt specified. Party is parent of another party. Party is spouse of another party. Party is first cousin of another party. Party is child of another party. Party is sibling of another party. Party is grandchild of another party. Party is great grandchild of another party. Party is niece or nephew of another party. Party is aunt or uncle of another party. Party is great grandparent of another party. Party is great niece or great nephew of another party. Party is great aunt or great uncle of another party. Party is great-great grandparent of another party. Party is great-great grandchild of another party. Party is first cousin once removed of another party. Party is great grand aunt or great grand uncle of another party. Party is great-great-great grandchild of another party. Party is great-great-great grandparent of another party. Party is first cousin twice removed of another party. Party is second cousin of another party. Party is related to another party but the option is not listed. 
        /// </summary>
        /// <value>Party is the next of kin of another party but the relationship isnt specified. Party is parent of another party. Party is spouse of another party. Party is first cousin of another party. Party is child of another party. Party is sibling of another party. Party is grandchild of another party. Party is great grandchild of another party. Party is niece or nephew of another party. Party is aunt or uncle of another party. Party is great grandparent of another party. Party is great niece or great nephew of another party. Party is great aunt or great uncle of another party. Party is great-great grandparent of another party. Party is great-great grandchild of another party. Party is first cousin once removed of another party. Party is great grand aunt or great grand uncle of another party. Party is great-great-great grandchild of another party. Party is great-great-great grandparent of another party. Party is first cousin twice removed of another party. Party is second cousin of another party. Party is related to another party but the option is not listed. </value>
        [TypeConverter(typeof(CustomEnumConverter<QualifierEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QualifierEnum
        {
            
            /// <summary>
            /// Enum NotSpecifiedEnum for NotSpecified
            /// </summary>
            [EnumMember(Value = "NotSpecified")]
            NotSpecifiedEnum = 1,
            
            /// <summary>
            /// Enum ParentEnum for Parent
            /// </summary>
            [EnumMember(Value = "Parent")]
            ParentEnum = 2,
            
            /// <summary>
            /// Enum SpouseEnum for Spouse
            /// </summary>
            [EnumMember(Value = "Spouse")]
            SpouseEnum = 3,
            
            /// <summary>
            /// Enum FirstCousinEnum for FirstCousin
            /// </summary>
            [EnumMember(Value = "FirstCousin")]
            FirstCousinEnum = 4,
            
            /// <summary>
            /// Enum ChildEnum for Child
            /// </summary>
            [EnumMember(Value = "Child")]
            ChildEnum = 5,
            
            /// <summary>
            /// Enum SiblingEnum for Sibling
            /// </summary>
            [EnumMember(Value = "Sibling")]
            SiblingEnum = 6,
            
            /// <summary>
            /// Enum GrandChildEnum for GrandChild
            /// </summary>
            [EnumMember(Value = "GrandChild")]
            GrandChildEnum = 7,
            
            /// <summary>
            /// Enum GreatGrandchildEnum for GreatGrandchild
            /// </summary>
            [EnumMember(Value = "GreatGrandchild")]
            GreatGrandchildEnum = 8,
            
            /// <summary>
            /// Enum NieceNephewEnum for NieceNephew
            /// </summary>
            [EnumMember(Value = "NieceNephew")]
            NieceNephewEnum = 9,
            
            /// <summary>
            /// Enum AuntUncleEnum for AuntUncle
            /// </summary>
            [EnumMember(Value = "AuntUncle")]
            AuntUncleEnum = 10,
            
            /// <summary>
            /// Enum GreatGrandparentEnum for GreatGrandparent
            /// </summary>
            [EnumMember(Value = "GreatGrandparent")]
            GreatGrandparentEnum = 11,
            
            /// <summary>
            /// Enum GreatNieceNephewEnum for GreatNieceNephew
            /// </summary>
            [EnumMember(Value = "GreatNieceNephew")]
            GreatNieceNephewEnum = 12,
            
            /// <summary>
            /// Enum GreatAuntUncleEnum for GreatAuntUncle
            /// </summary>
            [EnumMember(Value = "GreatAuntUncle")]
            GreatAuntUncleEnum = 13,
            
            /// <summary>
            /// Enum GreatGreatGrandparentEnum for GreatGreatGrandparent
            /// </summary>
            [EnumMember(Value = "GreatGreatGrandparent")]
            GreatGreatGrandparentEnum = 14,
            
            /// <summary>
            /// Enum GreatGreatGrandChildEnum for GreatGreatGrandChild
            /// </summary>
            [EnumMember(Value = "GreatGreatGrandChild")]
            GreatGreatGrandChildEnum = 15,
            
            /// <summary>
            /// Enum FirstCousinOnceRemovedEnum for FirstCousinOnceRemoved
            /// </summary>
            [EnumMember(Value = "FirstCousinOnceRemoved")]
            FirstCousinOnceRemovedEnum = 16,
            
            /// <summary>
            /// Enum GreatGrandAuntUncleEnum for GreatGrandAuntUncle
            /// </summary>
            [EnumMember(Value = "GreatGrandAuntUncle")]
            GreatGrandAuntUncleEnum = 17,
            
            /// <summary>
            /// Enum GreatGreatGreatGrandChildEnum for GreatGreatGreatGrandChild
            /// </summary>
            [EnumMember(Value = "GreatGreatGreatGrandChild")]
            GreatGreatGreatGrandChildEnum = 18,
            
            /// <summary>
            /// Enum GreatGreatGreatGrandParentEnum for GreatGreatGreatGrandParent
            /// </summary>
            [EnumMember(Value = "GreatGreatGreatGrandParent")]
            GreatGreatGreatGrandParentEnum = 19,
            
            /// <summary>
            /// Enum FirstCousinTwiceRemovedEnum for FirstCousinTwiceRemoved
            /// </summary>
            [EnumMember(Value = "FirstCousinTwiceRemoved")]
            FirstCousinTwiceRemovedEnum = 20,
            
            /// <summary>
            /// Enum SecondCousinEnum for SecondCousin
            /// </summary>
            [EnumMember(Value = "SecondCousin")]
            SecondCousinEnum = 21,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 22
        }

        /// <summary>
        /// Party is the next of kin of another party but the relationship isnt specified. Party is parent of another party. Party is spouse of another party. Party is first cousin of another party. Party is child of another party. Party is sibling of another party. Party is grandchild of another party. Party is great grandchild of another party. Party is niece or nephew of another party. Party is aunt or uncle of another party. Party is great grandparent of another party. Party is great niece or great nephew of another party. Party is great aunt or great uncle of another party. Party is great-great grandparent of another party. Party is great-great grandchild of another party. Party is first cousin once removed of another party. Party is great grand aunt or great grand uncle of another party. Party is great-great-great grandchild of another party. Party is great-great-great grandparent of another party. Party is first cousin twice removed of another party. Party is second cousin of another party. Party is related to another party but the option is not listed. 
        /// </summary>
        /// <value>Party is the next of kin of another party but the relationship isnt specified. Party is parent of another party. Party is spouse of another party. Party is first cousin of another party. Party is child of another party. Party is sibling of another party. Party is grandchild of another party. Party is great grandchild of another party. Party is niece or nephew of another party. Party is aunt or uncle of another party. Party is great grandparent of another party. Party is great niece or great nephew of another party. Party is great aunt or great uncle of another party. Party is great-great grandparent of another party. Party is great-great grandchild of another party. Party is first cousin once removed of another party. Party is great grand aunt or great grand uncle of another party. Party is great-great-great grandchild of another party. Party is great-great-great grandparent of another party. Party is first cousin twice removed of another party. Party is second cousin of another party. Party is related to another party but the option is not listed. </value>
        [DataMember(Name="qualifier", EmitDefaultValue=true)]
        public QualifierEnum Qualifier { get; set; }

    }
}
