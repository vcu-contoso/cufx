/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Contact 
    {
        /// <summary>
        /// Unique identifier within system to uniquely identify this contact point. 
        /// </summary>
        /// <value>Unique identifier within system to uniquely identify this contact point. </value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public string ContactId { get; set; }


        /// <summary>
        /// High level category for contact point for the party. 
        /// </summary>
        /// <value>High level category for contact point for the party. </value>
        [TypeConverter(typeof(CustomEnumConverter<ContactTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContactTypeEnum
        {
            
            /// <summary>
            /// Enum AddressEnum for Address
            /// </summary>
            [EnumMember(Value = "Address")]
            AddressEnum = 1,
            
            /// <summary>
            /// Enum PhoneEnum for Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            PhoneEnum = 2,
            
            /// <summary>
            /// Enum EmailEnum for Email
            /// </summary>
            [EnumMember(Value = "Email")]
            EmailEnum = 3,
            
            /// <summary>
            /// Enum InstantMessagingEnum for InstantMessaging
            /// </summary>
            [EnumMember(Value = "InstantMessaging")]
            InstantMessagingEnum = 4,
            
            /// <summary>
            /// Enum SocialEnum for Social
            /// </summary>
            [EnumMember(Value = "Social")]
            SocialEnum = 5,
            
            /// <summary>
            /// Enum WebsiteEnum for Website
            /// </summary>
            [EnumMember(Value = "Website")]
            WebsiteEnum = 6,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 7,
            
            /// <summary>
            /// Enum SMSEnum for SMS
            /// </summary>
            [EnumMember(Value = "SMS")]
            SMSEnum = 8
        }

        /// <summary>
        /// High level category for contact point for the party. 
        /// </summary>
        /// <value>High level category for contact point for the party. </value>
        [DataMember(Name="contactType", EmitDefaultValue=true)]
        public ContactTypeEnum ContactType { get; set; }

        /// <summary>
        /// Gets or Sets ContactPersonName
        /// </summary>
        [DataMember(Name="contactPersonName", EmitDefaultValue=false)]
        public ContactContactPersonName ContactPersonName { get; set; }

        /// <summary>
        /// Gets or Sets ContactPoint
        /// </summary>
        [DataMember(Name="contactPoint", EmitDefaultValue=false)]
        public ContactContactPoint ContactPoint { get; set; }

        /// <summary>
        /// Describes additional information regarding the contact point selection. 
        /// </summary>
        /// <value>Describes additional information regarding the contact point selection. </value>
        [DataMember(Name="contactPointDescription", EmitDefaultValue=false)]
        public string ContactPointDescription { get; set; }


        /// <summary>
        /// The best time of day to call contacts phone numbers. 
        /// </summary>
        /// <value>The best time of day to call contacts phone numbers. </value>
        [TypeConverter(typeof(CustomEnumConverter<TimeOfDayEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimeOfDayEnum
        {
            
            /// <summary>
            /// Enum AfternoonEnum for Afternoon
            /// </summary>
            [EnumMember(Value = "Afternoon")]
            AfternoonEnum = 1,
            
            /// <summary>
            /// Enum EveningEnum for Evening
            /// </summary>
            [EnumMember(Value = "Evening")]
            EveningEnum = 2,
            
            /// <summary>
            /// Enum MorningEnum for Morning
            /// </summary>
            [EnumMember(Value = "Morning")]
            MorningEnum = 3
        }

        /// <summary>
        /// The best time of day to call contacts phone numbers. 
        /// </summary>
        /// <value>The best time of day to call contacts phone numbers. </value>
        [DataMember(Name="timeOfDay", EmitDefaultValue=true)]
        public TimeOfDayEnum TimeOfDay { get; set; }

        /// <summary>
        /// Gets or Sets DemonstratedAccess
        /// </summary>
        [DataMember(Name="demonstratedAccess", EmitDefaultValue=false)]
        public ContactDemonstratedAccess DemonstratedAccess { get; set; }

        /// <summary>
        /// Has the contact point been attempted and for some reason come back as invalid. For instance, a bounced email, returned mail, disconnected phone, etc. 
        /// </summary>
        /// <value>Has the contact point been attempted and for some reason come back as invalid. For instance, a bounced email, returned mail, disconnected phone, etc. </value>
        [DataMember(Name="badContactPoint", EmitDefaultValue=true)]
        public bool BadContactPoint { get; set; }

        /// <summary>
        /// Specifies the preference order of communication for the given contact. The lowest order will have the highest preference. 
        /// </summary>
        /// <value>Specifies the preference order of communication for the given contact. The lowest order will have the highest preference. </value>
        [DataMember(Name="preferenceOrder", EmitDefaultValue=true)]
        public int PreferenceOrder { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Date and time the contact was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date and time the contact was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="contactDateTimeCreated", EmitDefaultValue=false)]
        public string ContactDateTimeCreated { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="contactCreatedBy", EmitDefaultValue=false)]
        public string ContactCreatedBy { get; set; }

        /// <summary>
        /// Date and time the contact data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date and time the contact data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="contactDateTimeModified", EmitDefaultValue=false)]
        public string ContactDateTimeModified { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="contactModifiedBy", EmitDefaultValue=false)]
        public string ContactModifiedBy { get; set; }

        /// <summary>
        /// Date the contact data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date the contact data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="contactDateTimeDeleted", EmitDefaultValue=false)]
        public string ContactDateTimeDeleted { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="contactDeletedBy", EmitDefaultValue=false)]
        public string ContactDeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets PreferenceSettingList
        /// </summary>
        [DataMember(Name="preferenceSettingList", EmitDefaultValue=false)]
        public ContactPreferenceSettingList PreferenceSettingList { get; set; }

    }
}
