/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The secure message defines the information sent and then received by two or more parties. It also relates secure messages to the sending and receiving party(ies), and potentially to the relationship and/or account(s) to which the secure message is bound. 
    /// </summary>
    [DataContract]
    public partial class SecureMessage 
    {
        /// <summary>
        /// The secure message ID is a persistent and unique identifier for the secure message that is not related to the party, relationship or accounts that the secure message is for.  It should be unique for all secure messages across the institution and remain the same over the life of the secure message within the financial institution. 
        /// </summary>
        /// <value>The secure message ID is a persistent and unique identifier for the secure message that is not related to the party, relationship or accounts that the secure message is for.  It should be unique for all secure messages across the institution and remain the same over the life of the secure message within the financial institution. </value>
        [DataMember(Name="secureMessageId", EmitDefaultValue=false)]
        public string SecureMessageId { get; set; }

        /// <summary>
        /// The secure message ID is a persistent and unique identifier for the secure message that is not related to the party, relationship or accounts that the secure message is for.  It should be unique for all secure messages across the institution and remain the same over the life of the secure message within the financial institution. 
        /// </summary>
        /// <value>The secure message ID is a persistent and unique identifier for the secure message that is not related to the party, relationship or accounts that the secure message is for.  It should be unique for all secure messages across the institution and remain the same over the life of the secure message within the financial institution. </value>
        [DataMember(Name="previousSecureMessageId", EmitDefaultValue=false)]
        public string PreviousSecureMessageId { get; set; }

        /// <summary>
        /// The unique ID associated with a message or a group of messages. 
        /// </summary>
        /// <value>The unique ID associated with a message or a group of messages. </value>
        [DataMember(Name="threadId", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// Each secure message has a subject line supplied by the creator of the secure message. 
        /// </summary>
        /// <value>Each secure message has a subject line supplied by the creator of the secure message. </value>
        [DataMember(Name="subjectLine", EmitDefaultValue=false)]
        public string SubjectLine { get; set; }

        /// <summary>
        /// Gets or Sets MessageFromList
        /// </summary>
        [DataMember(Name="messageFromList", EmitDefaultValue=false)]
        public SecureMessageMessageFromList MessageFromList { get; set; }

        /// <summary>
        /// Gets or Sets MessageToList
        /// </summary>
        [DataMember(Name="messageToList", EmitDefaultValue=false)]
        public SecureMessageMessageFromList MessageToList { get; set; }

        /// <summary>
        /// Gets or Sets CarbonCopyList
        /// </summary>
        [DataMember(Name="carbonCopyList", EmitDefaultValue=false)]
        public SecureMessageMessageFromList CarbonCopyList { get; set; }

        /// <summary>
        /// Gets or Sets BlindCarbonCopyList
        /// </summary>
        [DataMember(Name="blindCarbonCopyList", EmitDefaultValue=false)]
        public SecureMessageMessageFromList BlindCarbonCopyList { get; set; }

        /// <summary>
        /// Gets or Sets ReplyToList
        /// </summary>
        [DataMember(Name="replyToList", EmitDefaultValue=false)]
        public SecureMessageMessageFromList ReplyToList { get; set; }


        /// <summary>
        /// Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. 
        /// </summary>
        /// <value>Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AlertEnum for Alert
            /// </summary>
            [EnumMember(Value = "Alert")]
            AlertEnum = 1,
            
            /// <summary>
            /// Enum GeneralMessageEnum for GeneralMessage
            /// </summary>
            [EnumMember(Value = "GeneralMessage")]
            GeneralMessageEnum = 2,
            
            /// <summary>
            /// Enum NoticeEnum for Notice
            /// </summary>
            [EnumMember(Value = "Notice")]
            NoticeEnum = 3,
            
            /// <summary>
            /// Enum ProductOfferingEnum for ProductOffering
            /// </summary>
            [EnumMember(Value = "ProductOffering")]
            ProductOfferingEnum = 4,
            
            /// <summary>
            /// Enum ScheduleMeetingEnum for ScheduleMeeting
            /// </summary>
            [EnumMember(Value = "ScheduleMeeting")]
            ScheduleMeetingEnum = 5,
            
            /// <summary>
            /// Enum ServiceUpdateEnum for ServiceUpdate
            /// </summary>
            [EnumMember(Value = "ServiceUpdate")]
            ServiceUpdateEnum = 6,
            
            /// <summary>
            /// Enum SignatureRequiredEnum for SignatureRequired
            /// </summary>
            [EnumMember(Value = "SignatureRequired")]
            SignatureRequiredEnum = 7,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 8
        }

        /// <summary>
        /// Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. 
        /// </summary>
        /// <value>Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. 
        /// </summary>
        /// <value>Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. </value>
        [TypeConverter(typeof(CustomEnumConverter<CurrentStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CurrentStatusEnum
        {
            
            /// <summary>
            /// Enum TemplateEnum for Template
            /// </summary>
            [EnumMember(Value = "Template")]
            TemplateEnum = 1,
            
            /// <summary>
            /// Enum DraftEnum for Draft
            /// </summary>
            [EnumMember(Value = "Draft")]
            DraftEnum = 2,
            
            /// <summary>
            /// Enum OutboxEnum for Outbox
            /// </summary>
            [EnumMember(Value = "Outbox")]
            OutboxEnum = 3,
            
            /// <summary>
            /// Enum SentEnum for Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            SentEnum = 4,
            
            /// <summary>
            /// Enum ReadEnum for Read
            /// </summary>
            [EnumMember(Value = "Read")]
            ReadEnum = 5,
            
            /// <summary>
            /// Enum RepliedEnum for Replied
            /// </summary>
            [EnumMember(Value = "Replied")]
            RepliedEnum = 6,
            
            /// <summary>
            /// Enum ForwardedEnum for Forwarded
            /// </summary>
            [EnumMember(Value = "Forwarded")]
            ForwardedEnum = 7,
            
            /// <summary>
            /// Enum ArchivedEnum for Archived
            /// </summary>
            [EnumMember(Value = "Archived")]
            ArchivedEnum = 8,
            
            /// <summary>
            /// Enum UnreadEnum for Unread
            /// </summary>
            [EnumMember(Value = "Unread")]
            UnreadEnum = 9,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 10,
            
            /// <summary>
            /// Enum ExpiredEnum for Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            ExpiredEnum = 11
        }

        /// <summary>
        /// Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. 
        /// </summary>
        /// <value>Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. </value>
        [DataMember(Name="currentStatus", EmitDefaultValue=true)]
        public CurrentStatusEnum CurrentStatus { get; set; }

        /// <summary>
        /// Gets or Sets StatusLog
        /// </summary>
        [DataMember(Name="statusLog", EmitDefaultValue=false)]
        public SecureMessageStatusLog StatusLog { get; set; }

        /// <summary>
        /// The actual content of the message. 
        /// </summary>
        /// <value>The actual content of the message. </value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }


        /// <summary>
        /// The format of the body content. The body contains full HTML markup. The body contains raw text in ASCII format. 
        /// </summary>
        /// <value>The format of the body content. The body contains full HTML markup. The body contains raw text in ASCII format. </value>
        [TypeConverter(typeof(CustomEnumConverter<BodyFormatEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BodyFormatEnum
        {
            
            /// <summary>
            /// Enum HtmlEnum for Html
            /// </summary>
            [EnumMember(Value = "Html")]
            HtmlEnum = 1,
            
            /// <summary>
            /// Enum TextEnum for Text
            /// </summary>
            [EnumMember(Value = "Text")]
            TextEnum = 2
        }

        /// <summary>
        /// The format of the body content. The body contains full HTML markup. The body contains raw text in ASCII format. 
        /// </summary>
        /// <value>The format of the body content. The body contains full HTML markup. The body contains raw text in ASCII format. </value>
        [DataMember(Name="bodyFormat", EmitDefaultValue=true)]
        public BodyFormatEnum BodyFormat { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIdList
        /// </summary>
        [DataMember(Name="documentIdList", EmitDefaultValue=false)]
        public DocumentFilterDocumentIdList DocumentIdList { get; set; }

        /// <summary>
        /// The date and time that the secure message should be sent if put on a delayed delivery schedule. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time that the secure message should be sent if put on a delayed delivery schedule. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="doNotDeliverBeforeDateTime", EmitDefaultValue=false)]
        public string DoNotDeliverBeforeDateTime { get; set; }

        /// <summary>
        /// The date and time that the secure message expires and should be removed from view. It is up to the end point to determine what to do with the message if it has expired. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time that the secure message expires and should be removed from view. It is up to the end point to determine what to do with the message if it has expired. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="expirationDateTime", EmitDefaultValue=false)]
        public string ExpirationDateTime { get; set; }

        /// <summary>
        /// Unique identifier for the request. 
        /// </summary>
        /// <value>Unique identifier for the request. </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// A boolean to indicate that a response is permitted. When false a response message should be not be sent. When not specified the value is assumed to be true. 
        /// </summary>
        /// <value>A boolean to indicate that a response is permitted. When false a response message should be not be sent. When not specified the value is assumed to be true. </value>
        [DataMember(Name="allowReply", EmitDefaultValue=true)]
        public bool AllowReply { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
