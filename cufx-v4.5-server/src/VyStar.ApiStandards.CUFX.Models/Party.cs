/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The party object defines all the fields necessary to define a person, credit union member, business or vendor related to a financial institution. The ID uniquely identifies the party within the financial institution. 
    /// </summary>
    [DataContract]
    public partial class Party 
    {
        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TaxInformationList
        /// </summary>
        [DataMember(Name="taxInformationList", EmitDefaultValue=false)]
        public PartyTaxInformationList TaxInformationList { get; set; }


        /// <summary>
        /// The party type is the textual representation of what the party record represents. If Organization is Noted, then certain fields like first and last name wont apply. 
        /// </summary>
        /// <value>The party type is the textual representation of what the party record represents. If Organization is Noted, then certain fields like first and last name wont apply. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum IndividualEnum for Individual
            /// </summary>
            [EnumMember(Value = "Individual")]
            IndividualEnum = 1,
            
            /// <summary>
            /// Enum OrganizationEnum for Organization
            /// </summary>
            [EnumMember(Value = "Organization")]
            OrganizationEnum = 2,
            
            /// <summary>
            /// Enum TrustEnum for Trust
            /// </summary>
            [EnumMember(Value = "Trust")]
            TrustEnum = 3,
            
            /// <summary>
            /// Enum EstateEnum for Estate
            /// </summary>
            [EnumMember(Value = "Estate")]
            EstateEnum = 4
        }

        /// <summary>
        /// The party type is the textual representation of what the party record represents. If Organization is Noted, then certain fields like first and last name wont apply. 
        /// </summary>
        /// <value>The party type is the textual representation of what the party record represents. If Organization is Noted, then certain fields like first and last name wont apply. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The party status is the textual representation of the status of the party within the system. This field is an string as status may be difficult to pin down to a specific enumeration list. 
        /// </summary>
        /// <value>The party status is the textual representation of the status of the party within the system. This field is an string as status may be difficult to pin down to a specific enumeration list. </value>
        [DataMember(Name="partyStatus", EmitDefaultValue=false)]
        public string PartyStatus { get; set; }

        /// <summary>
        /// The party sub status as to why the party is in a particular status. 
        /// </summary>
        /// <value>The party sub status as to why the party is in a particular status. </value>
        [DataMember(Name="partySubStatus", EmitDefaultValue=false)]
        public string PartySubStatus { get; set; }

        /// <summary>
        /// Gets or Sets Characteristics
        /// </summary>
        [DataMember(Name="characteristics", EmitDefaultValue=false)]
        public PartyCharacteristics Characteristics { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocumentList
        /// </summary>
        [DataMember(Name="identificationDocumentList", EmitDefaultValue=false)]
        public PartyIdentificationDocumentList IdentificationDocumentList { get; set; }

        /// <summary>
        /// Gets or Sets EligibilityRequirementMetList
        /// </summary>
        [DataMember(Name="eligibilityRequirementMetList", EmitDefaultValue=false)]
        public PartyEligibilityRequirementMetList EligibilityRequirementMetList { get; set; }

        /// <summary>
        /// Gets or Sets ContactIdList
        /// </summary>
        [DataMember(Name="contactIdList", EmitDefaultValue=false)]
        public ActivityActivityRelatedToContactIdList ContactIdList { get; set; }

        /// <summary>
        /// Gets or Sets ContactList
        /// </summary>
        [DataMember(Name="contactList", EmitDefaultValue=false)]
        public InvestmentPartyInvestmentContactList ContactList { get; set; }

        /// <summary>
        /// Gets or Sets FiUserIdList
        /// </summary>
        [DataMember(Name="fiUserIdList", EmitDefaultValue=false)]
        public CredentialGroupFilterFiUserIdList FiUserIdList { get; set; }

        /// <summary>
        /// Calculated and stored by the back end core system or some other marketing system.  This ID is used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address. 
        /// </summary>
        /// <value>Calculated and stored by the back end core system or some other marketing system.  This ID is used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address. </value>
        [DataMember(Name="householdId", EmitDefaultValue=false)]
        public string HouseholdId { get; set; }

        /// <summary>
        /// DEPRECATED in next major release due to name and data type correction. Date the party was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>DEPRECATED in next major release due to name and data type correction. Date the party was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateCreated", EmitDefaultValue=false)]
        public DateTime PartyDateCreated { get; set; }

        /// <summary>
        /// Date and time the party was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date and time the party was created in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateTimeCreated", EmitDefaultValue=false)]
        public string PartyDateTimeCreated { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="partyCreatedBy", EmitDefaultValue=false)]
        public string PartyCreatedBy { get; set; }

        /// <summary>
        /// DEPRECATED in next major release due to name and data type correction. Date the party data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>DEPRECATED in next major release due to name and data type correction. Date the party data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateModified", EmitDefaultValue=false)]
        public DateTime PartyDateModified { get; set; }

        /// <summary>
        /// Date and time the party data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date and time the party data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateTimeModified", EmitDefaultValue=false)]
        public string PartyDateTimeModified { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="partyModifiedBy", EmitDefaultValue=false)]
        public string PartyModifiedBy { get; set; }

        /// <summary>
        /// DEPRECATED in next major release due to name and data type correction. Date the party data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>DEPRECATED in next major release due to name and data type correction. Date the party data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateDeleted", EmitDefaultValue=false)]
        public DateTime PartyDateDeleted { get; set; }

        /// <summary>
        /// Date the party data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date the party data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="partyDateTimeDeleted", EmitDefaultValue=false)]
        public string PartyDateTimeDeleted { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="partyDeletedBy", EmitDefaultValue=false)]
        public string PartyDeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets NoteList
        /// </summary>
        [DataMember(Name="noteList", EmitDefaultValue=false)]
        public AccountAccountNoteList NoteList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Indicates whether IRS Form W-8BEN (for individuals), Form W-8BEN-E (for entities), Form W-8ECI, Form W-8EXP, or Form W-8IMY was filed for this party. 
        /// </summary>
        /// <value>Indicates whether IRS Form W-8BEN (for individuals), Form W-8BEN-E (for entities), Form W-8ECI, Form W-8EXP, or Form W-8IMY was filed for this party. </value>
        [DataMember(Name="nonresidentAlienCertificationtype", EmitDefaultValue=false)]
        public string NonresidentAlienCertificationtype { get; set; }

        /// <summary>
        /// Date the party signed the IRS Form W-8 Certificate of Foreign Status to certify non-resident alien status. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date the party signed the IRS Form W-8 Certificate of Foreign Status to certify non-resident alien status. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="nonresidentAlienCertificationDateTime", EmitDefaultValue=false)]
        public string NonresidentAlienCertificationDateTime { get; set; }

        /// <summary>
        /// Limitation on benefits category that qualifies the taxpayer for the requested treaty benefits. 
        /// </summary>
        /// <value>Limitation on benefits category that qualifies the taxpayer for the requested treaty benefits. </value>
        [DataMember(Name="nonresidentAlienLimitationOnBenefits", EmitDefaultValue=false)]
        public string NonresidentAlienLimitationOnBenefits { get; set; }


        /// <summary>
        /// Specifies if a claim has been made for a tax treaty benefit. No special withholding rate or exemption. Claimed special withholding rate applies see nonresidentAlienSpecialWithholdingRate. Special exemption from withholding. 
        /// </summary>
        /// <value>Specifies if a claim has been made for a tax treaty benefit. No special withholding rate or exemption. Claimed special withholding rate applies see nonresidentAlienSpecialWithholdingRate. Special exemption from withholding. </value>
        [TypeConverter(typeof(CustomEnumConverter<NonresidentAlienSpecialWithholdingStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NonresidentAlienSpecialWithholdingStatusEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum ClaimedEnum for Claimed
            /// </summary>
            [EnumMember(Value = "Claimed")]
            ClaimedEnum = 2,
            
            /// <summary>
            /// Enum ExemptEnum for Exempt
            /// </summary>
            [EnumMember(Value = "Exempt")]
            ExemptEnum = 3
        }

        /// <summary>
        /// Specifies if a claim has been made for a tax treaty benefit. No special withholding rate or exemption. Claimed special withholding rate applies see nonresidentAlienSpecialWithholdingRate. Special exemption from withholding. 
        /// </summary>
        /// <value>Specifies if a claim has been made for a tax treaty benefit. No special withholding rate or exemption. Claimed special withholding rate applies see nonresidentAlienSpecialWithholdingRate. Special exemption from withholding. </value>
        [DataMember(Name="nonresidentAlienSpecialWithholdingStatus", EmitDefaultValue=true)]
        public NonresidentAlienSpecialWithholdingStatusEnum NonresidentAlienSpecialWithholdingStatus { get; set; }

        /// <summary>
        /// Special withholding rate that is claimed by the party when filing IRS Form W-8BEN Certificate of Foreign Status of Beneficial Owner for United States Tax Withholding. NonresidentAlienSpecialWithholdingStatus is set as Claimed. Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 
        /// </summary>
        /// <value>Special withholding rate that is claimed by the party when filing IRS Form W-8BEN Certificate of Foreign Status of Beneficial Owner for United States Tax Withholding. NonresidentAlienSpecialWithholdingStatus is set as Claimed. Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 </value>
        [DataMember(Name="nonresidentAlienSpecialWithholdingRate", EmitDefaultValue=true)]
        public decimal NonresidentAlienSpecialWithholdingRate { get; set; }

    }
}
