/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Definition for the configuration parameters for the financial institution. 
    /// </summary>
    [DataContract]
    public partial class ConfigurationFinancialInstitution 
    {
        /// <summary>
        /// The unique identifier for the configuration and financial institution. 
        /// </summary>
        /// <value>The unique identifier for the configuration and financial institution. </value>
        [DataMember(Name="configurationFiId", EmitDefaultValue=false)]
        public string ConfigurationFiId { get; set; }

        /// <summary>
        /// The financial institution ID  is used by systems to uniquely identify each financial institution. This ID is determined outside of the process and stored in each system of record, e.g. local application database, vendor configuration file, FI core database, etc. This is helpful for applications that are multi-tenant and  service more than one financial institution. See dataSourceId for more information about multiple data sources for a single FI. A standard error will be returned if the FIID is not provided when it is required. 
        /// </summary>
        /// <value>The financial institution ID  is used by systems to uniquely identify each financial institution. This ID is determined outside of the process and stored in each system of record, e.g. local application database, vendor configuration file, FI core database, etc. This is helpful for applications that are multi-tenant and  service more than one financial institution. See dataSourceId for more information about multiple data sources for a single FI. A standard error will be returned if the FIID is not provided when it is required. </value>
        [DataMember(Name="fiId", EmitDefaultValue=false)]
        public string FiId { get; set; }

        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationFiVendorList
        /// </summary>
        [DataMember(Name="configurationFiVendorList", EmitDefaultValue=false)]
        public ConfigurationFinancialInstitutionConfigurationFiVendorList ConfigurationFiVendorList { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationFiAppList
        /// </summary>
        [DataMember(Name="configurationFiAppList", EmitDefaultValue=false)]
        public ConfigurationFinancialInstitutionConfigurationFiAppList ConfigurationFiAppList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
