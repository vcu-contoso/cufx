/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DepositPartyDepositPartyRelationshipTypeHolder 
    {
        /// <summary>
        /// Specifies whether the party has a relationship status of holder on the account. 
        /// </summary>
        /// <value>Specifies whether the party has a relationship status of holder on the account. </value>
        [DataMember(Name="isHolder", EmitDefaultValue=true)]
        public bool IsHolder { get; set; }


        /// <summary>
        /// Only one primary party can exist on a relationship or an account. More than one joint may exist on a relationship or an account. 
        /// </summary>
        /// <value>Only one primary party can exist on a relationship or an account. More than one joint may exist on a relationship or an account. </value>
        [TypeConverter(typeof(CustomEnumConverter<QualifierEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QualifierEnum
        {
            
            /// <summary>
            /// Enum PrimaryEnum for Primary
            /// </summary>
            [EnumMember(Value = "Primary")]
            PrimaryEnum = 1,
            
            /// <summary>
            /// Enum JointEnum for Joint
            /// </summary>
            [EnumMember(Value = "Joint")]
            JointEnum = 2
        }

        /// <summary>
        /// Only one primary party can exist on a relationship or an account. More than one joint may exist on a relationship or an account. 
        /// </summary>
        /// <value>Only one primary party can exist on a relationship or an account. More than one joint may exist on a relationship or an account. </value>
        [DataMember(Name="qualifier", EmitDefaultValue=true)]
        public QualifierEnum Qualifier { get; set; }


        /// <summary>
        /// Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. 
        /// </summary>
        /// <value>Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. </value>
        [TypeConverter(typeof(CustomEnumConverter<AuthorityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AuthorityEnum
        {
            
            /// <summary>
            /// Enum AuthorizedEnum for Authorized
            /// </summary>
            [EnumMember(Value = "Authorized")]
            AuthorizedEnum = 1,
            
            /// <summary>
            /// Enum UnauthorizedEnum for Unauthorized
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            UnauthorizedEnum = 2,
            
            /// <summary>
            /// Enum DividendOnlyEnum for DividendOnly
            /// </summary>
            [EnumMember(Value = "DividendOnly")]
            DividendOnlyEnum = 3
        }

        /// <summary>
        /// Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. 
        /// </summary>
        /// <value>Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. </value>
        [DataMember(Name="authority", EmitDefaultValue=true)]
        public AuthorityEnum Authority { get; set; }

    }
}
