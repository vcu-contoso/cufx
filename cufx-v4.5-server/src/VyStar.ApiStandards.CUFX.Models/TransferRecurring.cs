/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Single recurring transfer. 
    /// </summary>
    [DataContract]
    public partial class TransferRecurring 
    {
        /// <summary>
        /// ID to uniquely identify a recurring payment or transfer request. 
        /// </summary>
        /// <value>ID to uniquely identify a recurring payment or transfer request. </value>
        [DataMember(Name="recurringId", EmitDefaultValue=false)]
        public string RecurringId { get; set; }

        /// <summary>
        /// Gets or Sets RecurringAmount
        /// </summary>
        [DataMember(Name="recurringAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount RecurringAmount { get; set; }

        /// <summary>
        /// Gets or Sets RecurringAmountDetailList
        /// </summary>
        [DataMember(Name="recurringAmountDetailList", EmitDefaultValue=false)]
        public BillPaymentOccurrenceOccurrenceAmountDetailList RecurringAmountDetailList { get; set; }

        /// <summary>
        /// Gets or Sets RecurringFromAccount
        /// </summary>
        [DataMember(Name="recurringFromAccount", EmitDefaultValue=false)]
        public BillPaymentOccurrenceOccurrenceFromAccount RecurringFromAccount { get; set; }

        /// <summary>
        /// Gets or Sets RecurringToAccount
        /// </summary>
        [DataMember(Name="recurringToAccount", EmitDefaultValue=false)]
        public BillPaymentOccurrenceOccurrenceFromAccount RecurringToAccount { get; set; }


        /// <summary>
        /// This is the enumeration of statuses for a recurring payment or transfer request . The payment or transfer request is in process for immediate or future payment and is still cancellable by the party since its not InProcess yet. The recurring payment or transfer request has been scheduled. A recurring payment or transfer request was requested to be cancelled by the party, but has not yet been cancelled. A recurring payment or transfer request was requested to be cancelled by the partys financial institution. A recurring payment or transfer request was requested to be cancelled by the partys payment provider. A recurring payment or transfer request has been cancelled. All recurring payments or transfer requests have been completed. Payment or transfer request was scheduled for recurring payment but has been suspended until taken out of suspended status.  This status might be used if a party wants to keep the payment/transfer request in the system but temporarily stop payment or transfers from occurring. 
        /// </summary>
        /// <value>This is the enumeration of statuses for a recurring payment or transfer request . The payment or transfer request is in process for immediate or future payment and is still cancellable by the party since its not InProcess yet. The recurring payment or transfer request has been scheduled. A recurring payment or transfer request was requested to be cancelled by the party, but has not yet been cancelled. A recurring payment or transfer request was requested to be cancelled by the partys financial institution. A recurring payment or transfer request was requested to be cancelled by the partys payment provider. A recurring payment or transfer request has been cancelled. All recurring payments or transfer requests have been completed. Payment or transfer request was scheduled for recurring payment but has been suspended until taken out of suspended status.  This status might be used if a party wants to keep the payment/transfer request in the system but temporarily stop payment or transfers from occurring. </value>
        [TypeConverter(typeof(CustomEnumConverter<RecurringStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RecurringStatusEnum
        {
            
            /// <summary>
            /// Enum RequestedEnum for Requested
            /// </summary>
            [EnumMember(Value = "Requested")]
            RequestedEnum = 1,
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 2,
            
            /// <summary>
            /// Enum CancelRequestedByPartyEnum for CancelRequestedByParty
            /// </summary>
            [EnumMember(Value = "CancelRequestedByParty")]
            CancelRequestedByPartyEnum = 3,
            
            /// <summary>
            /// Enum CancelRequestedByFinancialInstitutionEnum for CancelRequestedByFinancialInstitution
            /// </summary>
            [EnumMember(Value = "CancelRequestedByFinancialInstitution")]
            CancelRequestedByFinancialInstitutionEnum = 4,
            
            /// <summary>
            /// Enum CancelRequestedByPaymentProviderEnum for CancelRequestedByPaymentProvider
            /// </summary>
            [EnumMember(Value = "CancelRequestedByPaymentProvider")]
            CancelRequestedByPaymentProviderEnum = 5,
            
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 6,
            
            /// <summary>
            /// Enum CompletedEnum for Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            CompletedEnum = 7,
            
            /// <summary>
            /// Enum SuspendedEnum for Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            SuspendedEnum = 8
        }

        /// <summary>
        /// This is the enumeration of statuses for a recurring payment or transfer request . The payment or transfer request is in process for immediate or future payment and is still cancellable by the party since its not InProcess yet. The recurring payment or transfer request has been scheduled. A recurring payment or transfer request was requested to be cancelled by the party, but has not yet been cancelled. A recurring payment or transfer request was requested to be cancelled by the partys financial institution. A recurring payment or transfer request was requested to be cancelled by the partys payment provider. A recurring payment or transfer request has been cancelled. All recurring payments or transfer requests have been completed. Payment or transfer request was scheduled for recurring payment but has been suspended until taken out of suspended status.  This status might be used if a party wants to keep the payment/transfer request in the system but temporarily stop payment or transfers from occurring. 
        /// </summary>
        /// <value>This is the enumeration of statuses for a recurring payment or transfer request . The payment or transfer request is in process for immediate or future payment and is still cancellable by the party since its not InProcess yet. The recurring payment or transfer request has been scheduled. A recurring payment or transfer request was requested to be cancelled by the party, but has not yet been cancelled. A recurring payment or transfer request was requested to be cancelled by the partys financial institution. A recurring payment or transfer request was requested to be cancelled by the partys payment provider. A recurring payment or transfer request has been cancelled. All recurring payments or transfer requests have been completed. Payment or transfer request was scheduled for recurring payment but has been suspended until taken out of suspended status.  This status might be used if a party wants to keep the payment/transfer request in the system but temporarily stop payment or transfers from occurring. </value>
        [DataMember(Name="recurringStatus", EmitDefaultValue=true)]
        public RecurringStatusEnum RecurringStatus { get; set; }

        /// <summary>
        /// The memo represents a short description that can be applied to each comment of the transaction or printed on a check. 
        /// </summary>
        /// <value>The memo represents a short description that can be applied to each comment of the transaction or printed on a check. </value>
        [DataMember(Name="recurringMemo", EmitDefaultValue=false)]
        public string RecurringMemo { get; set; }

        /// <summary>
        /// True for electronic processing, false for sending a paper check. 
        /// </summary>
        /// <value>True for electronic processing, false for sending a paper check. </value>
        [DataMember(Name="isElectronic", EmitDefaultValue=true)]
        public bool IsElectronic { get; set; }

        /// <summary>
        /// True for payments with no end date; false if there is an end date for payment. 
        /// </summary>
        /// <value>True for payments with no end date; false if there is an end date for payment. </value>
        [DataMember(Name="isOpenEnded", EmitDefaultValue=true)]
        public bool IsOpenEnded { get; set; }

        /// <summary>
        /// True if the recurring payment or transfer has not been deleted and the end date has passed; false if the recurring payment or transfer has not been deleted and the end date has not been reached. 
        /// </summary>
        /// <value>True if the recurring payment or transfer has not been deleted and the end date has passed; false if the recurring payment or transfer has not been deleted and the end date has not been reached. </value>
        [DataMember(Name="isCompleted", EmitDefaultValue=true)]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// True if the recurring payment or transfer has been deleted; false if not deleted. 
        /// </summary>
        /// <value>True if the recurring payment or transfer has been deleted; false if not deleted. </value>
        [DataMember(Name="isUserDeleted", EmitDefaultValue=true)]
        public bool IsUserDeleted { get; set; }

        /// <summary>
        /// FiUserId is a unique identifier for the credential group and is readable by the person. The person types this into systems to gain access, also using their password, PIN or whatever else is required to gain access. 
        /// </summary>
        /// <value>FiUserId is a unique identifier for the credential group and is readable by the person. The person types this into systems to gain access, also using their password, PIN or whatever else is required to gain access. </value>
        [DataMember(Name="createdByFiUserId", EmitDefaultValue=false)]
        public string CreatedByFiUserId { get; set; }


        /// <summary>
        /// Frequency of the recurring transfer or payment. 
        /// </summary>
        /// <value>Frequency of the recurring transfer or payment. </value>
        [TypeConverter(typeof(CustomEnumConverter<FrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// Frequency of the recurring transfer or payment. 
        /// </summary>
        /// <value>Frequency of the recurring transfer or payment. </value>
        [DataMember(Name="frequency", EmitDefaultValue=true)]
        public FrequencyEnum Frequency { get; set; }

        /// <summary>
        /// The total number of recurring payments to be made. 
        /// </summary>
        /// <value>The total number of recurring payments to be made. </value>
        [DataMember(Name="totalPaymentCount", EmitDefaultValue=true)]
        public int TotalPaymentCount { get; set; }

        /// <summary>
        /// The number of remaining recurring payments to be made. 
        /// </summary>
        /// <value>The number of remaining recurring payments to be made. </value>
        [DataMember(Name="paymentsLeft", EmitDefaultValue=true)]
        public int PaymentsLeft { get; set; }


        /// <summary>
        /// This is the enumeration of statuses for a recurring payment or transfer request . The funds will be pulled out of the account at the time that the payment or transfer request is made each time that the occurrence happens.  For example in a good funds model in bill payment. The funds will be pulled out of the account at the time that the payment or transfer clears the account each time that the occurrence happens.  For example a check. 
        /// </summary>
        /// <value>This is the enumeration of statuses for a recurring payment or transfer request . The funds will be pulled out of the account at the time that the payment or transfer request is made each time that the occurrence happens.  For example in a good funds model in bill payment. The funds will be pulled out of the account at the time that the payment or transfer clears the account each time that the occurrence happens.  For example a check. </value>
        [TypeConverter(typeof(CustomEnumConverter<FundsWithdrawalTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FundsWithdrawalTypeEnum
        {
            
            /// <summary>
            /// Enum WhenRequestedEnum for WhenRequested
            /// </summary>
            [EnumMember(Value = "WhenRequested")]
            WhenRequestedEnum = 1,
            
            /// <summary>
            /// Enum WhenClearedEnum for WhenCleared
            /// </summary>
            [EnumMember(Value = "WhenCleared")]
            WhenClearedEnum = 2
        }

        /// <summary>
        /// This is the enumeration of statuses for a recurring payment or transfer request . The funds will be pulled out of the account at the time that the payment or transfer request is made each time that the occurrence happens.  For example in a good funds model in bill payment. The funds will be pulled out of the account at the time that the payment or transfer clears the account each time that the occurrence happens.  For example a check. 
        /// </summary>
        /// <value>This is the enumeration of statuses for a recurring payment or transfer request . The funds will be pulled out of the account at the time that the payment or transfer request is made each time that the occurrence happens.  For example in a good funds model in bill payment. The funds will be pulled out of the account at the time that the payment or transfer clears the account each time that the occurrence happens.  For example a check. </value>
        [DataMember(Name="fundsWithdrawalType", EmitDefaultValue=true)]
        public FundsWithdrawalTypeEnum FundsWithdrawalType { get; set; }

        /// <summary>
        /// The date on which the recurring transfer or payment request was created. The date/time should be ISO 8601 UTC format:  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date on which the recurring transfer or payment request was created. The date/time should be ISO 8601 UTC format:  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="createRequestDateTime", EmitDefaultValue=false)]
        public string CreateRequestDateTime { get; set; }

        /// <summary>
        /// The first date of recurring payment or transfer. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The first date of recurring payment or transfer. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="firstScheduledDateTime", EmitDefaultValue=false)]
        public string FirstScheduledDateTime { get; set; }

        /// <summary>
        /// The last modified date of the recurring payment or transfer schedule. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The last modified date of the recurring payment or transfer schedule. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="lastModifiedDate", EmitDefaultValue=false)]
        public string LastModifiedDate { get; set; }

        /// <summary>
        /// The next date of the recurring payment or transfer schedule. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The next date of the recurring payment or transfer schedule. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="nextScheduledDateTime", EmitDefaultValue=false)]
        public string NextScheduledDateTime { get; set; }

        /// <summary>
        /// The last possible date and time that a scheduled transfer or payment may be executed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The last possible date and time that a scheduled transfer or payment may be executed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="scheduledEndDateTime", EmitDefaultValue=false)]
        public string ScheduledEndDateTime { get; set; }

        /// <summary>
        /// The date that all the scheduled transfers or payments are completed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date that all the scheduled transfers or payments are completed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public string CompletedDateTime { get; set; }

        /// <summary>
        /// Unique confirmation code for the scheduled recurring transfer or payment. 
        /// </summary>
        /// <value>Unique confirmation code for the scheduled recurring transfer or payment. </value>
        [DataMember(Name="recurringConfirmationCode", EmitDefaultValue=false)]
        public string RecurringConfirmationCode { get; set; }

        /// <summary>
        /// Gets or Sets RecurringOccurrenceIdList
        /// </summary>
        [DataMember(Name="recurringOccurrenceIdList", EmitDefaultValue=false)]
        public BillPaymentFilterOccurrenceIdList RecurringOccurrenceIdList { get; set; }

        /// <summary>
        /// Gets or Sets InitialAmount
        /// </summary>
        [DataMember(Name="initialAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount InitialAmount { get; set; }

        /// <summary>
        /// Gets or Sets FinalAmount
        /// </summary>
        [DataMember(Name="finalAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount FinalAmount { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }


        /// <summary>
        /// Acknowledgment Entry. Financial EDI Acknowledgment. Accounts Receivable Entry. Back Office Conversion Entry. Corporate Credit Debit Entry. Customer-Initiated Entry. Notification of Change or Refused Notification of Change. Corporate Trade Exchange. Death Notification Entry. Automated Enrollment Entry. International ACH Transaction. Machine Transfer Entry. Point of Purchase Entry. Prearranged Payment and Deposit Entry. Re-Presented Check Entry. Telephone Initiated Entry. Truncated Entry. Truncated Entries Exchange. Internet Initiated Entry. Destroyed Check Entry. 
        /// </summary>
        /// <value>Acknowledgment Entry. Financial EDI Acknowledgment. Accounts Receivable Entry. Back Office Conversion Entry. Corporate Credit Debit Entry. Customer-Initiated Entry. Notification of Change or Refused Notification of Change. Corporate Trade Exchange. Death Notification Entry. Automated Enrollment Entry. International ACH Transaction. Machine Transfer Entry. Point of Purchase Entry. Prearranged Payment and Deposit Entry. Re-Presented Check Entry. Telephone Initiated Entry. Truncated Entry. Truncated Entries Exchange. Internet Initiated Entry. Destroyed Check Entry. </value>
        [TypeConverter(typeof(CustomEnumConverter<AchStandardEntryClassEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AchStandardEntryClassEnum
        {
            
            /// <summary>
            /// Enum ACKEnum for ACK
            /// </summary>
            [EnumMember(Value = "ACK")]
            ACKEnum = 1,
            
            /// <summary>
            /// Enum ATXEnum for ATX
            /// </summary>
            [EnumMember(Value = "ATX")]
            ATXEnum = 2,
            
            /// <summary>
            /// Enum ARCEnum for ARC
            /// </summary>
            [EnumMember(Value = "ARC")]
            ARCEnum = 3,
            
            /// <summary>
            /// Enum BOCEnum for BOC
            /// </summary>
            [EnumMember(Value = "BOC")]
            BOCEnum = 4,
            
            /// <summary>
            /// Enum CCDEnum for CCD
            /// </summary>
            [EnumMember(Value = "CCD")]
            CCDEnum = 5,
            
            /// <summary>
            /// Enum CIEEnum for CIE
            /// </summary>
            [EnumMember(Value = "CIE")]
            CIEEnum = 6,
            
            /// <summary>
            /// Enum COREnum for COR
            /// </summary>
            [EnumMember(Value = "COR")]
            COREnum = 7,
            
            /// <summary>
            /// Enum CTXEnum for CTX
            /// </summary>
            [EnumMember(Value = "CTX")]
            CTXEnum = 8,
            
            /// <summary>
            /// Enum DNEEnum for DNE
            /// </summary>
            [EnumMember(Value = "DNE")]
            DNEEnum = 9,
            
            /// <summary>
            /// Enum ENREnum for ENR
            /// </summary>
            [EnumMember(Value = "ENR")]
            ENREnum = 10,
            
            /// <summary>
            /// Enum IATEnum for IAT
            /// </summary>
            [EnumMember(Value = "IAT")]
            IATEnum = 11,
            
            /// <summary>
            /// Enum MTEEnum for MTE
            /// </summary>
            [EnumMember(Value = "MTE")]
            MTEEnum = 12,
            
            /// <summary>
            /// Enum POPEnum for POP
            /// </summary>
            [EnumMember(Value = "POP")]
            POPEnum = 13,
            
            /// <summary>
            /// Enum PPDEnum for PPD
            /// </summary>
            [EnumMember(Value = "PPD")]
            PPDEnum = 14,
            
            /// <summary>
            /// Enum RCKEnum for RCK
            /// </summary>
            [EnumMember(Value = "RCK")]
            RCKEnum = 15,
            
            /// <summary>
            /// Enum TELEnum for TEL
            /// </summary>
            [EnumMember(Value = "TEL")]
            TELEnum = 16,
            
            /// <summary>
            /// Enum TRCEnum for TRC
            /// </summary>
            [EnumMember(Value = "TRC")]
            TRCEnum = 17,
            
            /// <summary>
            /// Enum TRXEnum for TRX
            /// </summary>
            [EnumMember(Value = "TRX")]
            TRXEnum = 18,
            
            /// <summary>
            /// Enum WEBEnum for WEB
            /// </summary>
            [EnumMember(Value = "WEB")]
            WEBEnum = 19,
            
            /// <summary>
            /// Enum XCKEnum for XCK
            /// </summary>
            [EnumMember(Value = "XCK")]
            XCKEnum = 20
        }

        /// <summary>
        /// Acknowledgment Entry. Financial EDI Acknowledgment. Accounts Receivable Entry. Back Office Conversion Entry. Corporate Credit Debit Entry. Customer-Initiated Entry. Notification of Change or Refused Notification of Change. Corporate Trade Exchange. Death Notification Entry. Automated Enrollment Entry. International ACH Transaction. Machine Transfer Entry. Point of Purchase Entry. Prearranged Payment and Deposit Entry. Re-Presented Check Entry. Telephone Initiated Entry. Truncated Entry. Truncated Entries Exchange. Internet Initiated Entry. Destroyed Check Entry. 
        /// </summary>
        /// <value>Acknowledgment Entry. Financial EDI Acknowledgment. Accounts Receivable Entry. Back Office Conversion Entry. Corporate Credit Debit Entry. Customer-Initiated Entry. Notification of Change or Refused Notification of Change. Corporate Trade Exchange. Death Notification Entry. Automated Enrollment Entry. International ACH Transaction. Machine Transfer Entry. Point of Purchase Entry. Prearranged Payment and Deposit Entry. Re-Presented Check Entry. Telephone Initiated Entry. Truncated Entry. Truncated Entries Exchange. Internet Initiated Entry. Destroyed Check Entry. </value>
        [DataMember(Name="achStandardEntryClass", EmitDefaultValue=true)]
        public AchStandardEntryClassEnum AchStandardEntryClass { get; set; }

        /// <summary>
        /// Gets or Sets NoteList
        /// </summary>
        [DataMember(Name="noteList", EmitDefaultValue=false)]
        public AccountAccountNoteList NoteList { get; set; }

        /// <summary>
        /// ACH Prenote Indicator is set to True when an alert of the transfer will be sent to the receiving institution in advance of the actual transfer. 
        /// </summary>
        /// <value>ACH Prenote Indicator is set to True when an alert of the transfer will be sent to the receiving institution in advance of the actual transfer. </value>
        [DataMember(Name="achPrenoteIndicator", EmitDefaultValue=true)]
        public bool AchPrenoteIndicator { get; set; }

    }
}
