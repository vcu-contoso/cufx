/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Card 
    {
        /// <summary>
        /// The card ID is a persistent and unique identifier for the card. It must be unique for all users across the institution and remain the same over the life of the card. The card ID should not be the same as the card number embossed on the card. 
        /// </summary>
        /// <value>The card ID is a persistent and unique identifier for the card. It must be unique for all users across the institution and remain the same over the life of the card. The card ID should not be the same as the card number embossed on the card. </value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// The card number is the visible sequence of numbers that appear on the card. It is up to the end points to determine if the card number can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. It must be unique for all users across the institution and remain the same over the life of the card. 
        /// </summary>
        /// <value>The card number is the visible sequence of numbers that appear on the card. It is up to the end points to determine if the card number can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. It must be unique for all users across the institution and remain the same over the life of the card. </value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }


        /// <summary>
        /// Enumeration of the different types of cards. 
        /// </summary>
        /// <value>Enumeration of the different types of cards. </value>
        [TypeConverter(typeof(CustomEnumConverter<CardTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CardTypeEnum
        {
            
            /// <summary>
            /// Enum AtmEnum for Atm
            /// </summary>
            [EnumMember(Value = "Atm")]
            AtmEnum = 1,
            
            /// <summary>
            /// Enum CreditEnum for Credit
            /// </summary>
            [EnumMember(Value = "Credit")]
            CreditEnum = 2,
            
            /// <summary>
            /// Enum DebitEnum for Debit
            /// </summary>
            [EnumMember(Value = "Debit")]
            DebitEnum = 3,
            
            /// <summary>
            /// Enum HomeEquityEnum for HomeEquity
            /// </summary>
            [EnumMember(Value = "HomeEquity")]
            HomeEquityEnum = 4,
            
            /// <summary>
            /// Enum PrepaidEnum for Prepaid
            /// </summary>
            [EnumMember(Value = "Prepaid")]
            PrepaidEnum = 5
        }

        /// <summary>
        /// Enumeration of the different types of cards. 
        /// </summary>
        /// <value>Enumeration of the different types of cards. </value>
        [DataMember(Name="cardType", EmitDefaultValue=true)]
        public CardTypeEnum CardType { get; set; }

        /// <summary>
        /// Specifies the \&quot;flavor\&quot; of the card (ie: platinum, sports team branded, etc.). 
        /// </summary>
        /// <value>Specifies the \&quot;flavor\&quot; of the card (ie: platinum, sports team branded, etc.). </value>
        [DataMember(Name="cardSubType", EmitDefaultValue=false)]
        public string CardSubType { get; set; }

        /// <summary>
        /// Expiration date is either the expiration date that is calculated by the card data provider or the expiration date that is provided in the creation of the card. It is up to the end points to determine if the expiration date can/should be transmitted. 
        /// </summary>
        /// <value>Expiration date is either the expiration date that is calculated by the card data provider or the expiration date that is provided in the creation of the card. It is up to the end points to determine if the expiration date can/should be transmitted. </value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card. It is up to the end points to determine if the PIN can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. The PIN is provided as a string in case encryption has been utilized. 
        /// </summary>
        /// <value>PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card. It is up to the end points to determine if the PIN can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. The PIN is provided as a string in case encryption has been utilized. </value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// cvv2 is the 3 or 4 digit security code that is printed on the back of the card. This field is typically read-only because it is generated 2-3 days after the card is requested to be printed. It is up to the end points to determine if the CVV2 date can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. The CVV2 is provided as a string in case encryption has been utilized. 
        /// </summary>
        /// <value>cvv2 is the 3 or 4 digit security code that is printed on the back of the card. This field is typically read-only because it is generated 2-3 days after the card is requested to be printed. It is up to the end points to determine if the CVV2 date can/should be transmitted. It is up to the end points to determine the encryption methodology, if required. The CVV2 is provided as a string in case encryption has been utilized. </value>
        [DataMember(Name="cvv2", EmitDefaultValue=false)]
        public string Cvv2 { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAccountList
        /// </summary>
        [DataMember(Name="linkedAccountList", EmitDefaultValue=false)]
        public CardLinkedAccountList LinkedAccountList { get; set; }

        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Unique identifier within system to uniquely identify this contact point. 
        /// </summary>
        /// <value>Unique identifier within system to uniquely identify this contact point. </value>
        [DataMember(Name="overrideAddressContactId", EmitDefaultValue=false)]
        public string OverrideAddressContactId { get; set; }

        /// <summary>
        /// Gets or Sets CardAddress
        /// </summary>
        [DataMember(Name="cardAddress", EmitDefaultValue=false)]
        public AccountExternalAccountBankAddress CardAddress { get; set; }

        /// <summary>
        /// Specifies the name on the card if overriding the name from the party. 0 instances - means use the party formatted name. 1st instance - use as line one. 2nd instance - use as line two. 
        /// </summary>
        /// <value>Specifies the name on the card if overriding the name from the party. 0 instances - means use the party formatted name. 1st instance - use as line one. 2nd instance - use as line two. </value>
        [DataMember(Name="nameOnCard", EmitDefaultValue=false)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Specifies the date when the card was activated. 
        /// </summary>
        /// <value>Specifies the date when the card was activated. </value>
        [DataMember(Name="activationDateTime", EmitDefaultValue=false)]
        public string ActivationDateTime { get; set; }


        /// <summary>
        /// Enumeration of the different types of statuses for a card. The card has been disabled typically controlled by the FI. Card is to be captured and destroyed at next presentation. The card has been disabled typically controlled by the card owner. 
        /// </summary>
        /// <value>Enumeration of the different types of statuses for a card. The card has been disabled typically controlled by the FI. Card is to be captured and destroyed at next presentation. The card has been disabled typically controlled by the card owner. </value>
        [TypeConverter(typeof(CustomEnumConverter<CardStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CardStatusEnum
        {
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum AssignPINEnum for AssignPIN
            /// </summary>
            [EnumMember(Value = "AssignPIN")]
            AssignPINEnum = 2,
            
            /// <summary>
            /// Enum BlockedEnum for Blocked
            /// </summary>
            [EnumMember(Value = "Blocked")]
            BlockedEnum = 3,
            
            /// <summary>
            /// Enum ClosedEnum for Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            ClosedEnum = 4,
            
            /// <summary>
            /// Enum ExpediteEnum for Expedite
            /// </summary>
            [EnumMember(Value = "Expedite")]
            ExpediteEnum = 5,
            
            /// <summary>
            /// Enum ExpiredEnum for Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            ExpiredEnum = 6,
            
            /// <summary>
            /// Enum HotCardedEnum for HotCarded
            /// </summary>
            [EnumMember(Value = "HotCarded")]
            HotCardedEnum = 7,
            
            /// <summary>
            /// Enum InactiveEnum for Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            InactiveEnum = 8,
            
            /// <summary>
            /// Enum IssuedEnum for Issued
            /// </summary>
            [EnumMember(Value = "Issued")]
            IssuedEnum = 9,
            
            /// <summary>
            /// Enum LostEnum for Lost
            /// </summary>
            [EnumMember(Value = "Lost")]
            LostEnum = 10,
            
            /// <summary>
            /// Enum ReadOnlyEnum for ReadOnly
            /// </summary>
            [EnumMember(Value = "ReadOnly")]
            ReadOnlyEnum = 11,
            
            /// <summary>
            /// Enum RestrictedEnum for Restricted
            /// </summary>
            [EnumMember(Value = "Restricted")]
            RestrictedEnum = 12,
            
            /// <summary>
            /// Enum StolenEnum for Stolen
            /// </summary>
            [EnumMember(Value = "Stolen")]
            StolenEnum = 13,
            
            /// <summary>
            /// Enum SuspendedEnum for Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            SuspendedEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15
        }

        /// <summary>
        /// Enumeration of the different types of statuses for a card. The card has been disabled typically controlled by the FI. Card is to be captured and destroyed at next presentation. The card has been disabled typically controlled by the card owner. 
        /// </summary>
        /// <value>Enumeration of the different types of statuses for a card. The card has been disabled typically controlled by the FI. Card is to be captured and destroyed at next presentation. The card has been disabled typically controlled by the card owner. </value>
        [DataMember(Name="cardStatus", EmitDefaultValue=true)]
        public CardStatusEnum CardStatus { get; set; }

        /// <summary>
        /// For a blocked card, specifies the reason for the block. Element deprecated in favor of cardStatusReason. 
        /// </summary>
        /// <value>For a blocked card, specifies the reason for the block. Element deprecated in favor of cardStatusReason. </value>
        [DataMember(Name="blockedReason", EmitDefaultValue=false)]
        public string BlockedReason { get; set; }

        /// <summary>
        /// For a blocked card, specifies the date on which the card was blocked. Element deprecated in favor of cardStatusDateTime. 
        /// </summary>
        /// <value>For a blocked card, specifies the date on which the card was blocked. Element deprecated in favor of cardStatusDateTime. </value>
        [DataMember(Name="blockedDateTime", EmitDefaultValue=false)]
        public string BlockedDateTime { get; set; }

        /// <summary>
        /// The date and time the current card status was applied. 
        /// </summary>
        /// <value>The date and time the current card status was applied. </value>
        [DataMember(Name="cardStatusDateTime", EmitDefaultValue=false)]
        public string CardStatusDateTime { get; set; }

        /// <summary>
        /// Specifies the reason for the current card status. 
        /// </summary>
        /// <value>Specifies the reason for the current card status. </value>
        [DataMember(Name="cardStatusReason", EmitDefaultValue=false)]
        public string CardStatusReason { get; set; }

        /// <summary>
        /// The virtual number associated with the card. 
        /// </summary>
        /// <value>The virtual number associated with the card. </value>
        [DataMember(Name="virtualNumber", EmitDefaultValue=false)]
        public string VirtualNumber { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCountryCodes
        /// </summary>
        [DataMember(Name="merchantCountryCodes", EmitDefaultValue=false)]
        public CardMerchantCountryCodes MerchantCountryCodes { get; set; }

        /// <summary>
        /// Gets or Sets CardDesignImageArtifactId
        /// </summary>
        [DataMember(Name="cardDesignImageArtifactId", EmitDefaultValue=false)]
        public ArtifactArtifactId CardDesignImageArtifactId { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
