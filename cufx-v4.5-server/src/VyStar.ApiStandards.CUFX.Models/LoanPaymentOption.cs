/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details related to the loan payment options. 
    /// </summary>
    [DataContract]
    public partial class LoanPaymentOption 
    {
        /// <summary>
        /// Payment calculation type in the loan record, which is used to tell the system how to calculate the loan payment. 
        /// </summary>
        /// <value>Payment calculation type in the loan record, which is used to tell the system how to calculate the loan payment. </value>
        [DataMember(Name="calculationCode", EmitDefaultValue=false)]
        public string CalculationCode { get; set; }


        /// <summary>
        /// Generally a code for fixed or variable type loans, but also could be a code indicating how the system will calculate/apply payments. 
        /// </summary>
        /// <value>Generally a code for fixed or variable type loans, but also could be a code indicating how the system will calculate/apply payments. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FixedEnum for Fixed
            /// </summary>
            [EnumMember(Value = "Fixed")]
            FixedEnum = 1,
            
            /// <summary>
            /// Enum LevelPaymentEnum for LevelPayment
            /// </summary>
            [EnumMember(Value = "LevelPayment")]
            LevelPaymentEnum = 2,
            
            /// <summary>
            /// Enum LevelPrincipalEnum for LevelPrincipal
            /// </summary>
            [EnumMember(Value = "LevelPrincipal")]
            LevelPrincipalEnum = 3,
            
            /// <summary>
            /// Enum VariableEnum for Variable
            /// </summary>
            [EnumMember(Value = "Variable")]
            VariableEnum = 4
        }

        /// <summary>
        /// Generally a code for fixed or variable type loans, but also could be a code indicating how the system will calculate/apply payments. 
        /// </summary>
        /// <value>Generally a code for fixed or variable type loans, but also could be a code indicating how the system will calculate/apply payments. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// FI-defined formula or method for calculating the payment. Its usually generated from product defaults, so from configuration or from a product default middle-ware message. 
        /// </summary>
        /// <value>FI-defined formula or method for calculating the payment. Its usually generated from product defaults, so from configuration or from a product default middle-ware message. </value>
        [DataMember(Name="calculationMethod", EmitDefaultValue=false)]
        public string CalculationMethod { get; set; }

        /// <summary>
        /// Payment calculation percentage conditional for variable payment lines of credit 
        /// </summary>
        /// <value>Payment calculation percentage conditional for variable payment lines of credit </value>
        [DataMember(Name="calculationPercentage", EmitDefaultValue=true)]
        public decimal CalculationPercentage { get; set; }

        /// <summary>
        /// FI-defined code that describes the order of applying loan payments, i.e. principal, interest, late fees, insurance. 
        /// </summary>
        /// <value>FI-defined code that describes the order of applying loan payments, i.e. principal, interest, late fees, insurance. </value>
        [DataMember(Name="paymentApplicationOrderCode", EmitDefaultValue=false)]
        public string PaymentApplicationOrderCode { get; set; }


        /// <summary>
        /// Used for corporate interface clients only. 
        /// </summary>
        /// <value>Used for corporate interface clients only. </value>
        [TypeConverter(typeof(CustomEnumConverter<FrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 3,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 6,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 7,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 8,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 9,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 10,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 11,
            
            /// <summary>
            /// Enum SinglePaymentEnum for SinglePayment
            /// </summary>
            [EnumMember(Value = "SinglePayment")]
            SinglePaymentEnum = 12,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 13,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 14,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 15
        }

        /// <summary>
        /// Used for corporate interface clients only. 
        /// </summary>
        /// <value>Used for corporate interface clients only. </value>
        [DataMember(Name="frequency", EmitDefaultValue=true)]
        public FrequencyEnum Frequency { get; set; }

        /// <summary>
        /// Number of payments per year. Note: this is for loans that are weekly or bi-weekly. 
        /// </summary>
        /// <value>Number of payments per year. Note: this is for loans that are weekly or bi-weekly. </value>
        [DataMember(Name="numberOfAnnualPayments", EmitDefaultValue=true)]
        public int NumberOfAnnualPayments { get; set; }

        /// <summary>
        /// FI-defined method by which payments are adjusted, based on the payment frequency. 
        /// </summary>
        /// <value>FI-defined method by which payments are adjusted, based on the payment frequency. </value>
        [DataMember(Name="adjustmentMethod", EmitDefaultValue=false)]
        public string AdjustmentMethod { get; set; }

        /// <summary>
        /// Whether or not to round off the payment amount. 
        /// </summary>
        /// <value>Whether or not to round off the payment amount. </value>
        [DataMember(Name="isRoundPayment", EmitDefaultValue=true)]
        public bool IsRoundPayment { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAmount
        /// </summary>
        [DataMember(Name="paymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PaymentAmount { get; set; }

        /// <summary>
        /// Due date of the payment. 
        /// </summary>
        /// <value>Due date of the payment. </value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// First payment date for a loan, which can be different than the due date for the month (example: first of the month). 
        /// </summary>
        /// <value>First payment date for a loan, which can be different than the due date for the month (example: first of the month). </value>
        [DataMember(Name="firstPaymentDueDate", EmitDefaultValue=false)]
        public DateTime FirstPaymentDueDate { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPaymentAmount
        /// </summary>
        [DataMember(Name="minimumPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets LatePaymentAmount
        /// </summary>
        [DataMember(Name="latePaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount LatePaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets FinalPaymentAmount
        /// </summary>
        [DataMember(Name="finalPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount FinalPaymentAmount { get; set; }

        /// <summary>
        /// The date which a financial instrument matures. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date which a financial instrument matures. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public DateTime MaturityDate { get; set; }

        /// <summary>
        /// Calendar day that the loan payment will be due, i.e. specific day of the month requested for due dates (15th of the month for example). 
        /// </summary>
        /// <value>Calendar day that the loan payment will be due, i.e. specific day of the month requested for due dates (15th of the month for example). </value>
        [DataMember(Name="paymentDay", EmitDefaultValue=true)]
        public int PaymentDay { get; set; }


        /// <summary>
        /// The chosen payment method, examples: automatic transfer, automatic debit, cash, counter, check, bill pay, phone, debit card, electronic, payroll, coupon, etc. 
        /// </summary>
        /// <value>The chosen payment method, examples: automatic transfer, automatic debit, cash, counter, check, bill pay, phone, debit card, electronic, payroll, coupon, etc. </value>
        [TypeConverter(typeof(CustomEnumConverter<PaymentMethodEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum AmortizationTransferEnum for AmortizationTransfer
            /// </summary>
            [EnumMember(Value = "AmortizationTransfer")]
            AmortizationTransferEnum = 1,
            
            /// <summary>
            /// Enum AutomaticDebitEnum for AutomaticDebit
            /// </summary>
            [EnumMember(Value = "AutomaticDebit")]
            AutomaticDebitEnum = 2,
            
            /// <summary>
            /// Enum AutomaticTransferEnum for AutomaticTransfer
            /// </summary>
            [EnumMember(Value = "AutomaticTransfer")]
            AutomaticTransferEnum = 3,
            
            /// <summary>
            /// Enum BillPayEnum for BillPay
            /// </summary>
            [EnumMember(Value = "BillPay")]
            BillPayEnum = 4,
            
            /// <summary>
            /// Enum CashEnum for Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            CashEnum = 5,
            
            /// <summary>
            /// Enum CheckEnum for Check
            /// </summary>
            [EnumMember(Value = "Check")]
            CheckEnum = 6,
            
            /// <summary>
            /// Enum CounterEnum for Counter
            /// </summary>
            [EnumMember(Value = "Counter")]
            CounterEnum = 7,
            
            /// <summary>
            /// Enum CouponEnum for Coupon
            /// </summary>
            [EnumMember(Value = "Coupon")]
            CouponEnum = 8,
            
            /// <summary>
            /// Enum DebitCardEnum for DebitCard
            /// </summary>
            [EnumMember(Value = "DebitCard")]
            DebitCardEnum = 9,
            
            /// <summary>
            /// Enum DistributionEnum for Distribution
            /// </summary>
            [EnumMember(Value = "Distribution")]
            DistributionEnum = 10,
            
            /// <summary>
            /// Enum DistributionAfterDueEnum for DistributionAfterDue
            /// </summary>
            [EnumMember(Value = "DistributionAfterDue")]
            DistributionAfterDueEnum = 11,
            
            /// <summary>
            /// Enum ElectronicEnum for Electronic
            /// </summary>
            [EnumMember(Value = "Electronic")]
            ElectronicEnum = 12,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 13,
            
            /// <summary>
            /// Enum PayrollEnum for Payroll
            /// </summary>
            [EnumMember(Value = "Payroll")]
            PayrollEnum = 14,
            
            /// <summary>
            /// Enum PayrollAfterDueEnum for PayrollAfterDue
            /// </summary>
            [EnumMember(Value = "PayrollAfterDue")]
            PayrollAfterDueEnum = 15,
            
            /// <summary>
            /// Enum PhoneEnum for Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            PhoneEnum = 16,
            
            /// <summary>
            /// Enum ScheduledAutomaticTransferEnum for ScheduledAutomaticTransfer
            /// </summary>
            [EnumMember(Value = "ScheduledAutomaticTransfer")]
            ScheduledAutomaticTransferEnum = 17,
            
            /// <summary>
            /// Enum ScheduledAutomaticTransferAfterDueEnum for ScheduledAutomaticTransferAfterDue
            /// </summary>
            [EnumMember(Value = "ScheduledAutomaticTransferAfterDue")]
            ScheduledAutomaticTransferAfterDueEnum = 18
        }

        /// <summary>
        /// The chosen payment method, examples: automatic transfer, automatic debit, cash, counter, check, bill pay, phone, debit card, electronic, payroll, coupon, etc. 
        /// </summary>
        /// <value>The chosen payment method, examples: automatic transfer, automatic debit, cash, counter, check, bill pay, phone, debit card, electronic, payroll, coupon, etc. </value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=true)]
        public PaymentMethodEnum PaymentMethod { get; set; }

        /// <summary>
        /// When Other is chosen for the payment method, this field is used for the other value. 
        /// </summary>
        /// <value>When Other is chosen for the payment method, this field is used for the other value. </value>
        [DataMember(Name="otherPaymentMethod", EmitDefaultValue=false)]
        public string OtherPaymentMethod { get; set; }

        /// <summary>
        /// Code used for batch programs to generate a coupon book. Conditional because its only for loans with a payment method equal to Coupon. 
        /// </summary>
        /// <value>Code used for batch programs to generate a coupon book. Conditional because its only for loans with a payment method equal to Coupon. </value>
        [DataMember(Name="couponCode", EmitDefaultValue=false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// Gets or Sets AmountIncludingPrincipalAndInterest
        /// </summary>
        [DataMember(Name="amountIncludingPrincipalAndInterest", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount AmountIncludingPrincipalAndInterest { get; set; }

    }
}
