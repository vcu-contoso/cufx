/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
        /// <summary>
        /// Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. 
        /// </summary>
        /// <value>Current status of the secure message, i.e. a template or in the process of being sent, viewed, returned (see signature type to determine if it was signed or not when returned), etc. The secure message has not yet been filled with information and can be used for any party, account or relationship as a template. The secure message has been created but not sent to the receiver. The secure message has been placed in an outbox to send, but has not been sent. The secure message has been sent to the intended receiver. The secureMessage has been read by the intended receiver. The secure message had a new message created in response to this message. The secure message was forwarded to another receiver.  Typically, a new secure message would be created for the new receiver to view. The secure message was archived. The secure message has been created and sent, but it has not been read by the recipient(s). The secure message was created and sent, but delivery to the recipient(s) failed. The secure message was sent.  The secure message had an associated expiration date. The expiration date has passed, so the secure message has expired. </value>
        [TypeConverter(typeof(CustomEnumConverter<SecureMessageStatus>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SecureMessageStatus
        {
            
            /// <summary>
            /// Enum TemplateEnum for Template
            /// </summary>
            [EnumMember(Value = "Template")]
            TemplateEnum = 1,
            
            /// <summary>
            /// Enum DraftEnum for Draft
            /// </summary>
            [EnumMember(Value = "Draft")]
            DraftEnum = 2,
            
            /// <summary>
            /// Enum OutboxEnum for Outbox
            /// </summary>
            [EnumMember(Value = "Outbox")]
            OutboxEnum = 3,
            
            /// <summary>
            /// Enum SentEnum for Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            SentEnum = 4,
            
            /// <summary>
            /// Enum ReadEnum for Read
            /// </summary>
            [EnumMember(Value = "Read")]
            ReadEnum = 5,
            
            /// <summary>
            /// Enum RepliedEnum for Replied
            /// </summary>
            [EnumMember(Value = "Replied")]
            RepliedEnum = 6,
            
            /// <summary>
            /// Enum ForwardedEnum for Forwarded
            /// </summary>
            [EnumMember(Value = "Forwarded")]
            ForwardedEnum = 7,
            
            /// <summary>
            /// Enum ArchivedEnum for Archived
            /// </summary>
            [EnumMember(Value = "Archived")]
            ArchivedEnum = 8,
            
            /// <summary>
            /// Enum UnreadEnum for Unread
            /// </summary>
            [EnumMember(Value = "Unread")]
            UnreadEnum = 9,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 10,
            
            /// <summary>
            /// Enum ExpiredEnum for Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            ExpiredEnum = 11
        }
}
