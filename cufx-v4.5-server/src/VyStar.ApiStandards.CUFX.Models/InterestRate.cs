/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Defines the interest rate fields for a product offering at the institution level. 
    /// </summary>
    [DataContract]
    public partial class InterestRate 
    {
        /// <summary>
        /// Unique identifier for the interest rate. 
        /// </summary>
        /// <value>Unique identifier for the interest rate. </value>
        [DataMember(Name="interestRateId", EmitDefaultValue=false)]
        public string InterestRateId { get; set; }

        /// <summary>
        /// Indicates whether this interest rate is only paid if the product is part of a points rewards program. 
        /// </summary>
        /// <value>Indicates whether this interest rate is only paid if the product is part of a points rewards program. </value>
        [DataMember(Name="interestPointsRewardsProgram", EmitDefaultValue=true)]
        public bool InterestPointsRewardsProgram { get; set; }

        /// <summary>
        /// Indicates whether this is an introductory/promotional rate for the product offering. 
        /// </summary>
        /// <value>Indicates whether this is an introductory/promotional rate for the product offering. </value>
        [DataMember(Name="introductoryRate", EmitDefaultValue=true)]
        public bool IntroductoryRate { get; set; }

        /// <summary>
        /// Indicates whether this is a balance consolidation rate for the product offering. Applicable to loans and lines of credit. 
        /// </summary>
        /// <value>Indicates whether this is a balance consolidation rate for the product offering. Applicable to loans and lines of credit. </value>
        [DataMember(Name="balanceConsolidationRate", EmitDefaultValue=true)]
        public bool BalanceConsolidationRate { get; set; }

        /// <summary>
        /// Indicates whether this is a risk-based rate for the product offering. 
        /// </summary>
        /// <value>Indicates whether this is a risk-based rate for the product offering. </value>
        [DataMember(Name="riskRate", EmitDefaultValue=true)]
        public bool RiskRate { get; set; }

        /// <summary>
        /// If this is a risk-based rate for the product offering, this is the risk classification minimum requirement to acquire or maintain this rate. For example: C Paper 
        /// </summary>
        /// <value>If this is a risk-based rate for the product offering, this is the risk classification minimum requirement to acquire or maintain this rate. For example: C Paper </value>
        [DataMember(Name="riskRateClassificationMinimum", EmitDefaultValue=false)]
        public string RiskRateClassificationMinimum { get; set; }

        /// <summary>
        /// If this is a risk-based rate for the product offering, this is the risk classification maximum requirement to acquire or maintain this rate. For example: A Paper. 
        /// </summary>
        /// <value>If this is a risk-based rate for the product offering, this is the risk classification maximum requirement to acquire or maintain this rate. For example: A Paper. </value>
        [DataMember(Name="riskRateClassificationMaximum", EmitDefaultValue=false)]
        public string RiskRateClassificationMaximum { get; set; }

        /// <summary>
        /// Description for the interest rate. 
        /// </summary>
        /// <value>Description for the interest rate. </value>
        [DataMember(Name="interestRateDescription", EmitDefaultValue=false)]
        public string InterestRateDescription { get; set; }

        /// <summary>
        /// This is free form description of the criteria as to when the interest rate applies. This is not used for processing, but as additional documentation beyond the interest rate description field. 
        /// </summary>
        /// <value>This is free form description of the criteria as to when the interest rate applies. This is not used for processing, but as additional documentation beyond the interest rate description field. </value>
        [DataMember(Name="interestRateCriteria", EmitDefaultValue=false)]
        public string InterestRateCriteria { get; set; }

        /// <summary>
        /// Gets or Sets MinimumBalance
        /// </summary>
        [DataMember(Name="minimumBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumBalance { get; set; }

        /// <summary>
        /// Gets or Sets MaximumBalance
        /// </summary>
        [DataMember(Name="maximumBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MaximumBalance { get; set; }

        /// <summary>
        /// The term needed to qualify for rate, using ISO 8601 duration format: P3M is three months, P90D is ninety days. 
        /// </summary>
        /// <value>The term needed to qualify for rate, using ISO 8601 duration format: P3M is three months, P90D is ninety days. </value>
        [DataMember(Name="term", EmitDefaultValue=false)]
        public string Term { get; set; }

        /// <summary>
        /// &lt;xs:annotation&gt; &lt;xs:documentation&gt; The date/time that the interest rate becomes effective. If this value is not specified or is in the past, then the interest rate is currently effective, unless the expiration date/time has also passed. If this value is in the future, then the interest rate is not effective. 
        /// </summary>
        /// <value>&lt;xs:annotation&gt; &lt;xs:documentation&gt; The date/time that the interest rate becomes effective. If this value is not specified or is in the past, then the interest rate is currently effective, unless the expiration date/time has also passed. If this value is in the future, then the interest rate is not effective. </value>
        [DataMember(Name="effectiveDateTime", EmitDefaultValue=false)]
        public string EffectiveDateTime { get; set; }

        /// <summary>
        /// &lt;xs:annotation&gt; &lt;xs:documentation&gt; The date/time that the interest rate becomes ineffective. If this value is not specified or is in the future, then the interest rate is currently effective, unless the effective date/time is also in the future. If this value is in the past, then the interest rate is not effective. 
        /// </summary>
        /// <value>&lt;xs:annotation&gt; &lt;xs:documentation&gt; The date/time that the interest rate becomes ineffective. If this value is not specified or is in the future, then the interest rate is currently effective, unless the effective date/time is also in the future. If this value is in the past, then the interest rate is not effective. </value>
        [DataMember(Name="expirationDateTime", EmitDefaultValue=false)]
        public string ExpirationDateTime { get; set; }

        /// <summary>
        /// Interest rate charged for a loan product or earned by a deposit or investment product. Determines the amount charged each time period based on the period. 
        /// </summary>
        /// <value>Interest rate charged for a loan product or earned by a deposit or investment product. Determines the amount charged each time period based on the period. </value>
        [DataMember(Name="interestRate", EmitDefaultValue=true)]
        public decimal VarInterestRate { get; set; }

        /// <summary>
        /// Calculated annual percentage rate (APR). Is the interest rate for a whole year (annualized). Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 
        /// </summary>
        /// <value>Calculated annual percentage rate (APR). Is the interest rate for a whole year (annualized). Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 </value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=true)]
        public decimal AnnualPercentageRate { get; set; }

    }
}
