/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LoanPartyLoanPartyRelationshipTypePayee 
    {
        /// <summary>
        /// Specifies whether the party has a relationship status of payee on the account. 
        /// </summary>
        /// <value>Specifies whether the party has a relationship status of payee on the account. </value>
        [DataMember(Name="isPayee", EmitDefaultValue=true)]
        public bool IsPayee { get; set; }


        /// <summary>
        /// Payee can receive non-maturing dividend and interest payments from deposit accounts. If this is defined at the relationship level, the party receives all non-maturing dividends from all accounts within the relationship. Party can receive maturing dividend and interest payments from maturing deposits. If this is defined at the relationship level, the party receives all maturing dividend and interest payments from all accounts within the relationship. Party can receive non-maturing dividend and interest payments as well as maturing dividend and interest payments from maturing deposits.  If this is defined at the relationship level, the party receives all non-maturing and maturing dividend and interest payments from all accounts within the relationship. 
        /// </summary>
        /// <value>Payee can receive non-maturing dividend and interest payments from deposit accounts. If this is defined at the relationship level, the party receives all non-maturing dividends from all accounts within the relationship. Party can receive maturing dividend and interest payments from maturing deposits. If this is defined at the relationship level, the party receives all maturing dividend and interest payments from all accounts within the relationship. Party can receive non-maturing dividend and interest payments as well as maturing dividend and interest payments from maturing deposits.  If this is defined at the relationship level, the party receives all non-maturing and maturing dividend and interest payments from all accounts within the relationship. </value>
        [TypeConverter(typeof(CustomEnumConverter<QualifierEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QualifierEnum
        {
            
            /// <summary>
            /// Enum DividendEnum for Dividend
            /// </summary>
            [EnumMember(Value = "Dividend")]
            DividendEnum = 1,
            
            /// <summary>
            /// Enum MaturityEnum for Maturity
            /// </summary>
            [EnumMember(Value = "Maturity")]
            MaturityEnum = 2,
            
            /// <summary>
            /// Enum DividendAndMaturityEnum for DividendAndMaturity
            /// </summary>
            [EnumMember(Value = "DividendAndMaturity")]
            DividendAndMaturityEnum = 3
        }

        /// <summary>
        /// Payee can receive non-maturing dividend and interest payments from deposit accounts. If this is defined at the relationship level, the party receives all non-maturing dividends from all accounts within the relationship. Party can receive maturing dividend and interest payments from maturing deposits. If this is defined at the relationship level, the party receives all maturing dividend and interest payments from all accounts within the relationship. Party can receive non-maturing dividend and interest payments as well as maturing dividend and interest payments from maturing deposits.  If this is defined at the relationship level, the party receives all non-maturing and maturing dividend and interest payments from all accounts within the relationship. 
        /// </summary>
        /// <value>Payee can receive non-maturing dividend and interest payments from deposit accounts. If this is defined at the relationship level, the party receives all non-maturing dividends from all accounts within the relationship. Party can receive maturing dividend and interest payments from maturing deposits. If this is defined at the relationship level, the party receives all maturing dividend and interest payments from all accounts within the relationship. Party can receive non-maturing dividend and interest payments as well as maturing dividend and interest payments from maturing deposits.  If this is defined at the relationship level, the party receives all non-maturing and maturing dividend and interest payments from all accounts within the relationship. </value>
        [DataMember(Name="qualifier", EmitDefaultValue=true)]
        public QualifierEnum Qualifier { get; set; }


        /// <summary>
        /// Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. 
        /// </summary>
        /// <value>Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. </value>
        [TypeConverter(typeof(CustomEnumConverter<AuthorityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AuthorityEnum
        {
            
            /// <summary>
            /// Enum AuthorizedEnum for Authorized
            /// </summary>
            [EnumMember(Value = "Authorized")]
            AuthorizedEnum = 1,
            
            /// <summary>
            /// Enum UnauthorizedEnum for Unauthorized
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            UnauthorizedEnum = 2,
            
            /// <summary>
            /// Enum DividendOnlyEnum for DividendOnly
            /// </summary>
            [EnumMember(Value = "DividendOnly")]
            DividendOnlyEnum = 3
        }

        /// <summary>
        /// Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. 
        /// </summary>
        /// <value>Has access to funds and can perform transactions. Does not have access to funds and cannot perform transactions. Has access to only to dividend funds and can perform dividend only transactions. </value>
        [DataMember(Name="authority", EmitDefaultValue=true)]
        public AuthorityEnum Authority { get; set; }

    }
}
