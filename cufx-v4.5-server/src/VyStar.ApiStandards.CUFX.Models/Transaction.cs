/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// If there is a start date where provided or required, the transactions collection/array should remain empty if no transactions were posted during the provided date period. In this case, the data provider should still return all other account information. 
    /// </summary>
    [DataContract]
    public partial class Transaction 
    {
        /// <summary>
        /// The transaction ID is a persistent and unique identifier for each transaction. It must be unique within the account as it is used for matching purposes. Transactions should always be returned with the same ID, even if transactional information has changed (type, amount, description, date, etc.) since the previous account data pull. 
        /// </summary>
        /// <value>The transaction ID is a persistent and unique identifier for each transaction. It must be unique within the account as it is used for matching purposes. Transactions should always be returned with the same ID, even if transactional information has changed (type, amount, description, date, etc.) since the previous account data pull. </value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<AccountTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public AccountTypeEnum AccountType { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="accountSubType", EmitDefaultValue=false)]
        public string AccountSubType { get; set; }


        /// <summary>
        /// The transaction type simply reflects whether the account was debited or credited. For comment-only transactions, the value can be either Debit or Credit and the transaction amount can be null, not return or 0.00. 
        /// </summary>
        /// <value>The transaction type simply reflects whether the account was debited or credited. For comment-only transactions, the value can be either Debit or Credit and the transaction amount can be null, not return or 0.00. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum DebitEnum for Debit
            /// </summary>
            [EnumMember(Value = "Debit")]
            DebitEnum = 1,
            
            /// <summary>
            /// Enum CreditEnum for Credit
            /// </summary>
            [EnumMember(Value = "Credit")]
            CreditEnum = 2
        }

        /// <summary>
        /// The transaction type simply reflects whether the account was debited or credited. For comment-only transactions, the value can be either Debit or Credit and the transaction amount can be null, not return or 0.00. 
        /// </summary>
        /// <value>The transaction type simply reflects whether the account was debited or credited. For comment-only transactions, the value can be either Debit or Credit and the transaction amount can be null, not return or 0.00. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount Amount { get; set; }

        /// <summary>
        /// The description represents the memo of the transaction. 
        /// </summary>
        /// <value>The description represents the memo of the transaction. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The number on the face of the check indicating the id of that check in a series. 
        /// </summary>
        /// <value>The number on the face of the check indicating the id of that check in a series. </value>
        [DataMember(Name="checkNumber", EmitDefaultValue=false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// The date/time posted is the date the transaction was posted to the account. If this date is unavailable, it is acceptable to use the date that the transaction took place.  The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date/time posted is the date the transaction was posted to the account. If this date is unavailable, it is acceptable to use the date that the transaction took place.  The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="dateTimePosted", EmitDefaultValue=false)]
        public string DateTimePosted { get; set; }

        /// <summary>
        /// The date/time effective is the date on which the transaction took place. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date/time effective is the date on which the transaction took place. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) and yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="dateTimeEffective", EmitDefaultValue=false)]
        public string DateTimeEffective { get; set; }


        /// <summary>
        /// An enumeration of possible statuses for a transaction request. Transaction is posted. Transaction is pending. Transaction was denied. Transaction was Voided. Transaction is on hold. See Hold message for additional information on the hold. Other transaction status, see 
        /// </summary>
        /// <value>An enumeration of possible statuses for a transaction request. Transaction is posted. Transaction is pending. Transaction was denied. Transaction was Voided. Transaction is on hold. See Hold message for additional information on the hold. Other transaction status, see </value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PostedEnum for Posted
            /// </summary>
            [EnumMember(Value = "Posted")]
            PostedEnum = 1,
            
            /// <summary>
            /// Enum PendingEnum for Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            PendingEnum = 2,
            
            /// <summary>
            /// Enum DeniedEnum for Denied
            /// </summary>
            [EnumMember(Value = "Denied")]
            DeniedEnum = 3,
            
            /// <summary>
            /// Enum VoidEnum for Void
            /// </summary>
            [EnumMember(Value = "Void")]
            VoidEnum = 4,
            
            /// <summary>
            /// Enum HoldEnum for Hold
            /// </summary>
            [EnumMember(Value = "Hold")]
            HoldEnum = 5,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 6
        }

        /// <summary>
        /// An enumeration of possible statuses for a transaction request. Transaction is posted. Transaction is pending. Transaction was denied. Transaction was Voided. Transaction is on hold. See Hold message for additional information on the hold. Other transaction status, see 
        /// </summary>
        /// <value>An enumeration of possible statuses for a transaction request. Transaction is posted. Transaction is pending. Transaction was denied. Transaction was Voided. Transaction is on hold. See Hold message for additional information on the hold. Other transaction status, see </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Free form text that describes the transaction type \&quot;Other\&quot; when it is set in the status element. 
        /// </summary>
        /// <value>Free form text that describes the transaction type \&quot;Other\&quot; when it is set in the status element. </value>
        [DataMember(Name="otherTransactionStatus", EmitDefaultValue=false)]
        public string OtherTransactionStatus { get; set; }

        /// <summary>
        /// Gets or Sets PostedActualBalance
        /// </summary>
        [DataMember(Name="postedActualBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PostedActualBalance { get; set; }

        /// <summary>
        /// Gets or Sets PostedAvailableBalance
        /// </summary>
        [DataMember(Name="postedAvailableBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PostedAvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalAmount
        /// </summary>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PrincipalAmount { get; set; }

        /// <summary>
        /// Gets or Sets InterestAmount
        /// </summary>
        [DataMember(Name="interestAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount InterestAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionFeeList
        /// </summary>
        [DataMember(Name="transactionFeeList", EmitDefaultValue=false)]
        public TransactionTransactionFeeList TransactionFeeList { get; set; }

        /// <summary>
        /// A four-digit number used by the payment card industry to classify businesses into market segments by the type of goods or services they provide. The MCC is assigned based on the supplierâ€™s primary line of business. Only applies to debit or credit card purchases. List should be based on standard merchant category codes. 
        /// </summary>
        /// <value>A four-digit number used by the payment card industry to classify businesses into market segments by the type of goods or services they provide. The MCC is assigned based on the supplierâ€™s primary line of business. Only applies to debit or credit card purchases. List should be based on standard merchant category codes. </value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// The default or overridden category for personal financial management. 
        /// </summary>
        /// <value>The default or overridden category for personal financial management. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }


        /// <summary>
        /// System or delivery channel that was the origination source for the transaction. Automated Clearing House. Automated Teller Machine. Interactive Voice Response. Point Of Sale. 
        /// </summary>
        /// <value>System or delivery channel that was the origination source for the transaction. Automated Clearing House. Automated Teller Machine. Interactive Voice Response. Point Of Sale. </value>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum AchEnum for Ach
            /// </summary>
            [EnumMember(Value = "Ach")]
            AchEnum = 1,
            
            /// <summary>
            /// Enum AdjustmentEnum for Adjustment
            /// </summary>
            [EnumMember(Value = "Adjustment")]
            AdjustmentEnum = 2,
            
            /// <summary>
            /// Enum AtmEnum for Atm
            /// </summary>
            [EnumMember(Value = "Atm")]
            AtmEnum = 3,
            
            /// <summary>
            /// Enum BalanceTransferEnum for BalanceTransfer
            /// </summary>
            [EnumMember(Value = "BalanceTransfer")]
            BalanceTransferEnum = 4,
            
            /// <summary>
            /// Enum BillPayEnum for BillPay
            /// </summary>
            [EnumMember(Value = "BillPay")]
            BillPayEnum = 5,
            
            /// <summary>
            /// Enum BulkDepositEnum for BulkDeposit
            /// </summary>
            [EnumMember(Value = "BulkDeposit")]
            BulkDepositEnum = 6,
            
            /// <summary>
            /// Enum CashEnum for Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            CashEnum = 7,
            
            /// <summary>
            /// Enum CheckEnum for Check
            /// </summary>
            [EnumMember(Value = "Check")]
            CheckEnum = 8,
            
            /// <summary>
            /// Enum FeeEnum for Fee
            /// </summary>
            [EnumMember(Value = "Fee")]
            FeeEnum = 9,
            
            /// <summary>
            /// Enum HomeBankingEnum for HomeBanking
            /// </summary>
            [EnumMember(Value = "HomeBanking")]
            HomeBankingEnum = 10,
            
            /// <summary>
            /// Enum InsuranceEnum for Insurance
            /// </summary>
            [EnumMember(Value = "Insurance")]
            InsuranceEnum = 11,
            
            /// <summary>
            /// Enum InterestEarnedEnum for InterestEarned
            /// </summary>
            [EnumMember(Value = "InterestEarned")]
            InterestEarnedEnum = 12,
            
            /// <summary>
            /// Enum InterestPaidEnum for InterestPaid
            /// </summary>
            [EnumMember(Value = "InterestPaid")]
            InterestPaidEnum = 13,
            
            /// <summary>
            /// Enum InterestRefundEnum for InterestRefund
            /// </summary>
            [EnumMember(Value = "InterestRefund")]
            InterestRefundEnum = 14,
            
            /// <summary>
            /// Enum IvrEnum for Ivr
            /// </summary>
            [EnumMember(Value = "Ivr")]
            IvrEnum = 15,
            
            /// <summary>
            /// Enum KioskEnum for Kiosk
            /// </summary>
            [EnumMember(Value = "Kiosk")]
            KioskEnum = 16,
            
            /// <summary>
            /// Enum MobileBankingEnum for MobileBanking
            /// </summary>
            [EnumMember(Value = "MobileBanking")]
            MobileBankingEnum = 17,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 18,
            
            /// <summary>
            /// Enum PayrollEnum for Payroll
            /// </summary>
            [EnumMember(Value = "Payroll")]
            PayrollEnum = 19,
            
            /// <summary>
            /// Enum PinPurchaseEnum for PinPurchase
            /// </summary>
            [EnumMember(Value = "PinPurchase")]
            PinPurchaseEnum = 20,
            
            /// <summary>
            /// Enum POSEnum for POS
            /// </summary>
            [EnumMember(Value = "POS")]
            POSEnum = 21,
            
            /// <summary>
            /// Enum SharedBranchEnum for SharedBranch
            /// </summary>
            [EnumMember(Value = "SharedBranch")]
            SharedBranchEnum = 22,
            
            /// <summary>
            /// Enum SignatureEnum for Signature
            /// </summary>
            [EnumMember(Value = "Signature")]
            SignatureEnum = 23,
            
            /// <summary>
            /// Enum WireEnum for Wire
            /// </summary>
            [EnumMember(Value = "Wire")]
            WireEnum = 24,
            
            /// <summary>
            /// Enum WithholdingEnum for Withholding
            /// </summary>
            [EnumMember(Value = "Withholding")]
            WithholdingEnum = 25
        }

        /// <summary>
        /// System or delivery channel that was the origination source for the transaction. Automated Clearing House. Automated Teller Machine. Interactive Voice Response. Point Of Sale. 
        /// </summary>
        /// <value>System or delivery channel that was the origination source for the transaction. Automated Clearing House. Automated Teller Machine. Interactive Voice Response. Point Of Sale. </value>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public SourceEnum Source { get; set; }

        /// <summary>
        /// Gets or Sets EscrowAmount
        /// </summary>
        [DataMember(Name="escrowAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount EscrowAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionArtifactId
        /// </summary>
        [DataMember(Name="transactionArtifactId", EmitDefaultValue=false)]
        public ArtifactArtifactId TransactionArtifactId { get; set; }

        /// <summary>
        /// The URI location of the artifact image. 
        /// </summary>
        /// <value>The URI location of the artifact image. </value>
        [DataMember(Name="transactionArtifactUri", EmitDefaultValue=false)]
        public string TransactionArtifactUri { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets NoteIdList
        /// </summary>
        [DataMember(Name="noteIdList", EmitDefaultValue=false)]
        public NotesFilterNoteIdList NoteIdList { get; set; }

        /// <summary>
        /// Method used for the entry of the transaction at the source of the transaction. Value may be a code or a description dependent upon the institutional usage. As example entry methods may include but not limited to Manual Entry, Bar Code, Contactless Chip. 
        /// </summary>
        /// <value>Method used for the entry of the transaction at the source of the transaction. Value may be a code or a description dependent upon the institutional usage. As example entry methods may include but not limited to Manual Entry, Bar Code, Contactless Chip. </value>
        [DataMember(Name="entryMethod", EmitDefaultValue=false)]
        public string EntryMethod { get; set; }

    }
}
