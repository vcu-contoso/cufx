/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The document defines the information stored when a person signs a document or agreement either electronically or manually.  This also relates documents to the party, relationship and/or account to which the document is legally bound. 
    /// </summary>
    [DataContract]
    public partial class Document 
    {
        /// <summary>
        /// The document ID is a persistent and unique identifier for the document not related to the party, relationship or accounts that the document is for. It should be unique for all documents across the institution and remain the same over the life of the document within the financial institution. 
        /// </summary>
        /// <value>The document ID is a persistent and unique identifier for the document not related to the party, relationship or accounts that the document is for. It should be unique for all documents across the institution and remain the same over the life of the document within the financial institution. </value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Each document has a title which is determined by the financial institution. Examples are: Loan Dislosure, Savings Disclosure, Checking Disclosure, Membership Disclosure, etc. 
        /// </summary>
        /// <value>Each document has a title which is determined by the financial institution. Examples are: Loan Dislosure, Savings Disclosure, Checking Disclosure, Membership Disclosure, etc. </value>
        [DataMember(Name="documentTitle", EmitDefaultValue=false)]
        public string DocumentTitle { get; set; }


        /// <summary>
        /// The type of document or document template, such as Notice, Statement, Disclosure, etc. A picture of a check.  If separate documents are used to denote the front and the back, then you may use the sub type to identify each side or just use the artifact collection to have each side. Legal information required to be delivered to party(ies) so they know how their accounts work and what their legal rights are. Information that is used to ID the consumer, organization, estate or trust when the party arrives at the front line. Information that relays the terms and agreements of a loan. Information that contains information about their applicatoon and relays the terms and agreements of joining a financial institution when an agreement is necessary to join. Legal notice to party(ies) that is required to be sent when an event happens on their associated accounts. Document that relays the image of a transaction or transactions that happened at a teller window, at an ATM or other delivery method. Balances, transactions and other information of the party(ies)s accounts at a point in time. A report that summarizes activities, segmentation, transactions, etc. May contain, but not limited to, information regarding their account, an image of the person, and a signature of the person for identification purposes. IRS-related information about earnings on accounts. This value can be used when no other types relate to the particular document.  What the document is can be found using the document title, sub type or appliesTo information. 
        /// </summary>
        /// <value>The type of document or document template, such as Notice, Statement, Disclosure, etc. A picture of a check.  If separate documents are used to denote the front and the back, then you may use the sub type to identify each side or just use the artifact collection to have each side. Legal information required to be delivered to party(ies) so they know how their accounts work and what their legal rights are. Information that is used to ID the consumer, organization, estate or trust when the party arrives at the front line. Information that relays the terms and agreements of a loan. Information that contains information about their applicatoon and relays the terms and agreements of joining a financial institution when an agreement is necessary to join. Legal notice to party(ies) that is required to be sent when an event happens on their associated accounts. Document that relays the image of a transaction or transactions that happened at a teller window, at an ATM or other delivery method. Balances, transactions and other information of the party(ies)s accounts at a point in time. A report that summarizes activities, segmentation, transactions, etc. May contain, but not limited to, information regarding their account, an image of the person, and a signature of the person for identification purposes. IRS-related information about earnings on accounts. This value can be used when no other types relate to the particular document.  What the document is can be found using the document title, sub type or appliesTo information. </value>
        [TypeConverter(typeof(CustomEnumConverter<DocumentTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DocumentTypeEnum
        {
            
            /// <summary>
            /// Enum CheckImageEnum for CheckImage
            /// </summary>
            [EnumMember(Value = "CheckImage")]
            CheckImageEnum = 1,
            
            /// <summary>
            /// Enum DisclosureEnum for Disclosure
            /// </summary>
            [EnumMember(Value = "Disclosure")]
            DisclosureEnum = 2,
            
            /// <summary>
            /// Enum IdentificationDocumentEnum for IdentificationDocument
            /// </summary>
            [EnumMember(Value = "IdentificationDocument")]
            IdentificationDocumentEnum = 3,
            
            /// <summary>
            /// Enum LoanDocumentEnum for LoanDocument
            /// </summary>
            [EnumMember(Value = "LoanDocument")]
            LoanDocumentEnum = 4,
            
            /// <summary>
            /// Enum MembershipDocumentEnum for MembershipDocument
            /// </summary>
            [EnumMember(Value = "MembershipDocument")]
            MembershipDocumentEnum = 5,
            
            /// <summary>
            /// Enum NoticeEnum for Notice
            /// </summary>
            [EnumMember(Value = "Notice")]
            NoticeEnum = 6,
            
            /// <summary>
            /// Enum ReceiptEnum for Receipt
            /// </summary>
            [EnumMember(Value = "Receipt")]
            ReceiptEnum = 7,
            
            /// <summary>
            /// Enum StatementEnum for Statement
            /// </summary>
            [EnumMember(Value = "Statement")]
            StatementEnum = 8,
            
            /// <summary>
            /// Enum ReportEnum for Report
            /// </summary>
            [EnumMember(Value = "Report")]
            ReportEnum = 9,
            
            /// <summary>
            /// Enum SignatureCardEnum for SignatureCard
            /// </summary>
            [EnumMember(Value = "SignatureCard")]
            SignatureCardEnum = 10,
            
            /// <summary>
            /// Enum TaxFormEnum for TaxForm
            /// </summary>
            [EnumMember(Value = "TaxForm")]
            TaxFormEnum = 11,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 12
        }

        /// <summary>
        /// The type of document or document template, such as Notice, Statement, Disclosure, etc. A picture of a check.  If separate documents are used to denote the front and the back, then you may use the sub type to identify each side or just use the artifact collection to have each side. Legal information required to be delivered to party(ies) so they know how their accounts work and what their legal rights are. Information that is used to ID the consumer, organization, estate or trust when the party arrives at the front line. Information that relays the terms and agreements of a loan. Information that contains information about their applicatoon and relays the terms and agreements of joining a financial institution when an agreement is necessary to join. Legal notice to party(ies) that is required to be sent when an event happens on their associated accounts. Document that relays the image of a transaction or transactions that happened at a teller window, at an ATM or other delivery method. Balances, transactions and other information of the party(ies)s accounts at a point in time. A report that summarizes activities, segmentation, transactions, etc. May contain, but not limited to, information regarding their account, an image of the person, and a signature of the person for identification purposes. IRS-related information about earnings on accounts. This value can be used when no other types relate to the particular document.  What the document is can be found using the document title, sub type or appliesTo information. 
        /// </summary>
        /// <value>The type of document or document template, such as Notice, Statement, Disclosure, etc. A picture of a check.  If separate documents are used to denote the front and the back, then you may use the sub type to identify each side or just use the artifact collection to have each side. Legal information required to be delivered to party(ies) so they know how their accounts work and what their legal rights are. Information that is used to ID the consumer, organization, estate or trust when the party arrives at the front line. Information that relays the terms and agreements of a loan. Information that contains information about their applicatoon and relays the terms and agreements of joining a financial institution when an agreement is necessary to join. Legal notice to party(ies) that is required to be sent when an event happens on their associated accounts. Document that relays the image of a transaction or transactions that happened at a teller window, at an ATM or other delivery method. Balances, transactions and other information of the party(ies)s accounts at a point in time. A report that summarizes activities, segmentation, transactions, etc. May contain, but not limited to, information regarding their account, an image of the person, and a signature of the person for identification purposes. IRS-related information about earnings on accounts. This value can be used when no other types relate to the particular document.  What the document is can be found using the document title, sub type or appliesTo information. </value>
        [DataMember(Name="documentType", EmitDefaultValue=true)]
        public DocumentTypeEnum DocumentType { get; set; }

        /// <summary>
        /// A further drill-down into the type of document that it is, i.e. a category within a Type.  These are defined by the financial institution based on the institutions needs. 
        /// </summary>
        /// <value>A further drill-down into the type of document that it is, i.e. a category within a Type.  These are defined by the financial institution based on the institutions needs. </value>
        [DataMember(Name="documentSubType", EmitDefaultValue=false)]
        public string DocumentSubType { get; set; }

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name="appliesTo", EmitDefaultValue=false)]
        public AccessProfileCustomData AppliesTo { get; set; }


        /// <summary>
        /// Current status of the document, i.e. in the process of being sent, viewed, returned, etc. (see signature type to determine if it was returned signed or not) The document has not yet been filled with information and can be used for any party, account or relationship as a template. The document has been sent to the person via mail or electronically, but it has not been signed. The document has been viewed online but it has not been signed.  Some documents may only require being viewed. The document has been returned.  See signature type to determine if it has been signed. The document is newly posted. it has not been viewed, nor returned, nor sent. 
        /// </summary>
        /// <value>Current status of the document, i.e. in the process of being sent, viewed, returned, etc. (see signature type to determine if it was returned signed or not) The document has not yet been filled with information and can be used for any party, account or relationship as a template. The document has been sent to the person via mail or electronically, but it has not been signed. The document has been viewed online but it has not been signed.  Some documents may only require being viewed. The document has been returned.  See signature type to determine if it has been signed. The document is newly posted. it has not been viewed, nor returned, nor sent. </value>
        [TypeConverter(typeof(CustomEnumConverter<DocumentStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DocumentStatusEnum
        {
            
            /// <summary>
            /// Enum TemplateEnum for Template
            /// </summary>
            [EnumMember(Value = "Template")]
            TemplateEnum = 1,
            
            /// <summary>
            /// Enum SentEnum for Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            SentEnum = 2,
            
            /// <summary>
            /// Enum ViewedEnum for Viewed
            /// </summary>
            [EnumMember(Value = "Viewed")]
            ViewedEnum = 3,
            
            /// <summary>
            /// Enum ReturnedEnum for Returned
            /// </summary>
            [EnumMember(Value = "Returned")]
            ReturnedEnum = 4,
            
            /// <summary>
            /// Enum RecentEnum for Recent
            /// </summary>
            [EnumMember(Value = "Recent")]
            RecentEnum = 5
        }

        /// <summary>
        /// Current status of the document, i.e. in the process of being sent, viewed, returned, etc. (see signature type to determine if it was returned signed or not) The document has not yet been filled with information and can be used for any party, account or relationship as a template. The document has been sent to the person via mail or electronically, but it has not been signed. The document has been viewed online but it has not been signed.  Some documents may only require being viewed. The document has been returned.  See signature type to determine if it has been signed. The document is newly posted. it has not been viewed, nor returned, nor sent. 
        /// </summary>
        /// <value>Current status of the document, i.e. in the process of being sent, viewed, returned, etc. (see signature type to determine if it was returned signed or not) The document has not yet been filled with information and can be used for any party, account or relationship as a template. The document has been sent to the person via mail or electronically, but it has not been signed. The document has been viewed online but it has not been signed.  Some documents may only require being viewed. The document has been returned.  See signature type to determine if it has been signed. The document is newly posted. it has not been viewed, nor returned, nor sent. </value>
        [DataMember(Name="documentStatus", EmitDefaultValue=true)]
        public DocumentStatusEnum DocumentStatus { get; set; }

        /// <summary>
        /// A description that identifies the version of this document so that multiple versions of the same document can be managed. 
        /// </summary>
        /// <value>A description that identifies the version of this document so that multiple versions of the same document can be managed. </value>
        [DataMember(Name="documentVersion", EmitDefaultValue=false)]
        public string DocumentVersion { get; set; }

        /// <summary>
        /// The date and time that the document can be come effective. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assume to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time that the document can be come effective. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assume to be 00:00Z if omitted. </value>
        [DataMember(Name="effectiveDateTime", EmitDefaultValue=false)]
        public string EffectiveDateTime { get; set; }

        /// <summary>
        /// The date and time that the document expires. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time that the document expires. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="expirationDateTime", EmitDefaultValue=false)]
        public string ExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DocumentArtifactIdList
        /// </summary>
        [DataMember(Name="documentArtifactIdList", EmitDefaultValue=false)]
        public ArtifactFilterArtifactIdList DocumentArtifactIdList { get; set; }

        /// <summary>
        /// Gets or Sets PartyIdList
        /// </summary>
        [DataMember(Name="partyIdList", EmitDefaultValue=false)]
        public AccountPartyIdList PartyIdList { get; set; }

        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdList
        /// </summary>
        [DataMember(Name="accountIdList", EmitDefaultValue=false)]
        public AccountFilterAccountIdList AccountIdList { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentificationList
        /// </summary>
        [DataMember(Name="accountIdentificationList", EmitDefaultValue=false)]
        public AccountFilterAccountIdentificationList AccountIdentificationList { get; set; }

        /// <summary>
        /// Identifies if the process can prefill the document template with party, relationship or account data. If this document is no longer a template, was the document prefillable before it became an instance of a party-, relationship- or account-related document? Refer to status field to determine if the document is a document template. 
        /// </summary>
        /// <value>Identifies if the process can prefill the document template with party, relationship or account data. If this document is no longer a template, was the document prefillable before it became an instance of a party-, relationship- or account-related document? Refer to status field to determine if the document is a document template. </value>
        [DataMember(Name="prefillable", EmitDefaultValue=true)]
        public bool Prefillable { get; set; }

        /// <summary>
        /// Identifies if the process prefilled a prefillable document template with party, relationship or account data. 
        /// </summary>
        /// <value>Identifies if the process prefilled a prefillable document template with party, relationship or account data. </value>
        [DataMember(Name="prefilled", EmitDefaultValue=true)]
        public bool Prefilled { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSignatureList
        /// </summary>
        [DataMember(Name="documentSignatureList", EmitDefaultValue=false)]
        public DocumentDocumentSignatureList DocumentSignatureList { get; set; }

        /// <summary>
        /// Gets or Sets WitnessList
        /// </summary>
        [DataMember(Name="witnessList", EmitDefaultValue=false)]
        public DocumentWitnessList WitnessList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets DocumentArtifactList
        /// </summary>
        [DataMember(Name="documentArtifactList", EmitDefaultValue=false)]
        public DocumentDocumentArtifactList DocumentArtifactList { get; set; }

    }
}
