/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details related to a specific note. 
    /// </summary>
    [DataContract]
    public partial class DetailedNoteCommonNoteData 
    {
        /// <summary>
        /// The note ID is a persistent and unique identifier for the note. It must be unique within the account. 
        /// </summary>
        /// <value>The note ID is a persistent and unique identifier for the note. It must be unique within the account. </value>
        [DataMember(Name="noteId", EmitDefaultValue=false)]
        public string NoteId { get; set; }


        /// <summary>
        /// Enumeration of the different types of top-level records. 
        /// </summary>
        /// <value>Enumeration of the different types of top-level records. </value>
        [TypeConverter(typeof(CustomEnumConverter<RecordTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RecordTypeEnum
        {
            
            /// <summary>
            /// Enum AccountEnum for Account
            /// </summary>
            [EnumMember(Value = "Account")]
            AccountEnum = 1,
            
            /// <summary>
            /// Enum ApplicationEnum for Application
            /// </summary>
            [EnumMember(Value = "Application")]
            ApplicationEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum PortfolioEnum for Portfolio
            /// </summary>
            [EnumMember(Value = "Portfolio")]
            PortfolioEnum = 4,
            
            /// <summary>
            /// Enum DepositEnum for Deposit
            /// </summary>
            [EnumMember(Value = "Deposit")]
            DepositEnum = 5,
            
            /// <summary>
            /// Enum ProductServiceRequestEnum for ProductServiceRequest
            /// </summary>
            [EnumMember(Value = "ProductServiceRequest")]
            ProductServiceRequestEnum = 6,
            
            /// <summary>
            /// Enum RelationshipEnum for Relationship
            /// </summary>
            [EnumMember(Value = "Relationship")]
            RelationshipEnum = 7,
            
            /// <summary>
            /// Enum RequestEnum for Request
            /// </summary>
            [EnumMember(Value = "Request")]
            RequestEnum = 8,
            
            /// <summary>
            /// Enum ActivityEnum for Activity
            /// </summary>
            [EnumMember(Value = "Activity")]
            ActivityEnum = 9,
            
            /// <summary>
            /// Enum TransactionEnum for Transaction
            /// </summary>
            [EnumMember(Value = "Transaction")]
            TransactionEnum = 10,
            
            /// <summary>
            /// Enum TransferEnum for Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            TransferEnum = 11,
            
            /// <summary>
            /// Enum TransferOccurrenceEnum for TransferOccurrence
            /// </summary>
            [EnumMember(Value = "TransferOccurrence")]
            TransferOccurrenceEnum = 12,
            
            /// <summary>
            /// Enum TransferRecurringEnum for TransferRecurring
            /// </summary>
            [EnumMember(Value = "TransferRecurring")]
            TransferRecurringEnum = 13
        }

        /// <summary>
        /// Enumeration of the different types of top-level records. 
        /// </summary>
        /// <value>Enumeration of the different types of top-level records. </value>
        [DataMember(Name="recordType", EmitDefaultValue=true)]
        public RecordTypeEnum RecordType { get; set; }

        /// <summary>
        /// The code associated to this note.  It could determine the type of note or reference predefined notes configured on the core. 
        /// </summary>
        /// <value>The code associated to this note.  It could determine the type of note or reference predefined notes configured on the core. </value>
        [DataMember(Name="noteCode", EmitDefaultValue=false)]
        public string NoteCode { get; set; }

        /// <summary>
        /// The text(s) of the note. 
        /// </summary>
        /// <value>The text(s) of the note. </value>
        [DataMember(Name="noteText", EmitDefaultValue=false)]
        public string NoteText { get; set; }

        /// <summary>
        /// UTC date and time when the note was created. 
        /// </summary>
        /// <value>UTC date and time when the note was created. </value>
        [DataMember(Name="noteCreatedDateTime", EmitDefaultValue=false)]
        public string NoteCreatedDateTime { get; set; }

        /// <summary>
        /// The date this note expires. 
        /// </summary>
        /// <value>The date this note expires. </value>
        [DataMember(Name="noteExpirationDate", EmitDefaultValue=false)]
        public DateTime NoteExpirationDate { get; set; }

        /// <summary>
        /// Either the name or ID of person, system or end user that created the note. 
        /// </summary>
        /// <value>Either the name or ID of person, system or end user that created the note. </value>
        [DataMember(Name="noteCreator", EmitDefaultValue=false)]
        public string NoteCreator { get; set; }

    }
}
