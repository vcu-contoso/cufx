/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Intended choice - Due to cross language serialization issues the choice construct has been removed. It is the responsibility of the implementer to add programmatic logic for this complex type to detect, handle and or error when population of more than one element is present. 
    /// </summary>
    [DataContract]
    public partial class IdentificationDocumentIdDocumentType 
    {

        /// <summary>
        /// Documentation type for individuals. 
        /// </summary>
        /// <value>Documentation type for individuals. </value>
        [TypeConverter(typeof(CustomEnumConverter<IndividualDocumentEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IndividualDocumentEnum
        {
            
            /// <summary>
            /// Enum DriversLicenseEnum for DriversLicense
            /// </summary>
            [EnumMember(Value = "DriversLicense")]
            DriversLicenseEnum = 1,
            
            /// <summary>
            /// Enum USPassportEnum for USPassport
            /// </summary>
            [EnumMember(Value = "USPassport")]
            USPassportEnum = 2,
            
            /// <summary>
            /// Enum MilitaryIdEnum for MilitaryId
            /// </summary>
            [EnumMember(Value = "MilitaryId")]
            MilitaryIdEnum = 3,
            
            /// <summary>
            /// Enum StateIssuedIdEnum for StateIssuedId
            /// </summary>
            [EnumMember(Value = "StateIssuedId")]
            StateIssuedIdEnum = 4,
            
            /// <summary>
            /// Enum BirthCertficateEnum for BirthCertficate
            /// </summary>
            [EnumMember(Value = "BirthCertficate")]
            BirthCertficateEnum = 5,
            
            /// <summary>
            /// Enum ForeignPassportEnum for ForeignPassport
            /// </summary>
            [EnumMember(Value = "ForeignPassport")]
            ForeignPassportEnum = 6,
            
            /// <summary>
            /// Enum KnownExistingPartyEnum for KnownExistingParty
            /// </summary>
            [EnumMember(Value = "KnownExistingParty")]
            KnownExistingPartyEnum = 7,
            
            /// <summary>
            /// Enum ForeignGovernmentIdEnum for ForeignGovernmentId
            /// </summary>
            [EnumMember(Value = "ForeignGovernmentId")]
            ForeignGovernmentIdEnum = 8,
            
            /// <summary>
            /// Enum ResidentAlienCardEnum for ResidentAlienCard
            /// </summary>
            [EnumMember(Value = "ResidentAlienCard")]
            ResidentAlienCardEnum = 9,
            
            /// <summary>
            /// Enum NonResidentAlienCardEnum for NonResidentAlienCard
            /// </summary>
            [EnumMember(Value = "NonResidentAlienCard")]
            NonResidentAlienCardEnum = 10,
            
            /// <summary>
            /// Enum DisabledElderlyWithNoIdEnum for DisabledElderlyWithNoId
            /// </summary>
            [EnumMember(Value = "DisabledElderlyWithNoId")]
            DisabledElderlyWithNoIdEnum = 11,
            
            /// <summary>
            /// Enum ForeignEntityWithNoIdEnum for ForeignEntityWithNoId
            /// </summary>
            [EnumMember(Value = "ForeignEntityWithNoId")]
            ForeignEntityWithNoIdEnum = 12,
            
            /// <summary>
            /// Enum LawEnforcementIdEnum for LawEnforcementId
            /// </summary>
            [EnumMember(Value = "LawEnforcementId")]
            LawEnforcementIdEnum = 13,
            
            /// <summary>
            /// Enum AmishPartyWithNoIdEnum for AmishPartyWithNoId
            /// </summary>
            [EnumMember(Value = "AmishPartyWithNoId")]
            AmishPartyWithNoIdEnum = 14,
            
            /// <summary>
            /// Enum ForeignDriversLicenseEnum for ForeignDriversLicense
            /// </summary>
            [EnumMember(Value = "ForeignDriversLicense")]
            ForeignDriversLicenseEnum = 15,
            
            /// <summary>
            /// Enum InsuranceCardEnum for InsuranceCard
            /// </summary>
            [EnumMember(Value = "InsuranceCard")]
            InsuranceCardEnum = 16,
            
            /// <summary>
            /// Enum OrganizationalMembershipCardEnum for OrganizationalMembershipCard
            /// </summary>
            [EnumMember(Value = "OrganizationalMembershipCard")]
            OrganizationalMembershipCardEnum = 17,
            
            /// <summary>
            /// Enum PassportEnum for Passport
            /// </summary>
            [EnumMember(Value = "Passport")]
            PassportEnum = 18,
            
            /// <summary>
            /// Enum PropertyTaxBillEnum for PropertyTaxBill
            /// </summary>
            [EnumMember(Value = "PropertyTaxBill")]
            PropertyTaxBillEnum = 19,
            
            /// <summary>
            /// Enum SocialSecurityCardEnum for SocialSecurityCard
            /// </summary>
            [EnumMember(Value = "SocialSecurityCard")]
            SocialSecurityCardEnum = 20,
            
            /// <summary>
            /// Enum StudentIdEnum for StudentId
            /// </summary>
            [EnumMember(Value = "StudentId")]
            StudentIdEnum = 21,
            
            /// <summary>
            /// Enum UtilityBillEnum for UtilityBill
            /// </summary>
            [EnumMember(Value = "UtilityBill")]
            UtilityBillEnum = 22,
            
            /// <summary>
            /// Enum VisaEnum for Visa
            /// </summary>
            [EnumMember(Value = "Visa")]
            VisaEnum = 23,
            
            /// <summary>
            /// Enum DepartmentHomelandSecurityEmploymentAuthorizationEnum for DepartmentHomelandSecurityEmploymentAuthorization
            /// </summary>
            [EnumMember(Value = "DepartmentHomelandSecurityEmploymentAuthorization")]
            DepartmentHomelandSecurityEmploymentAuthorizationEnum = 24,
            
            /// <summary>
            /// Enum VoterRegistrationCardEnum for VoterRegistrationCard
            /// </summary>
            [EnumMember(Value = "VoterRegistrationCard")]
            VoterRegistrationCardEnum = 25,
            
            /// <summary>
            /// Enum PhotoEnum for Photo
            /// </summary>
            [EnumMember(Value = "Photo")]
            PhotoEnum = 26,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 27
        }

        /// <summary>
        /// Documentation type for individuals. 
        /// </summary>
        /// <value>Documentation type for individuals. </value>
        [DataMember(Name="individualDocument", EmitDefaultValue=true)]
        public IndividualDocumentEnum IndividualDocument { get; set; }


        /// <summary>
        /// Documentation types for Organizations. 
        /// </summary>
        /// <value>Documentation types for Organizations. </value>
        [TypeConverter(typeof(CustomEnumConverter<OrganizationDocumentEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OrganizationDocumentEnum
        {
            
            /// <summary>
            /// Enum StateCorporateIdEnum for StateCorporateId
            /// </summary>
            [EnumMember(Value = "StateCorporateId")]
            StateCorporateIdEnum = 1,
            
            /// <summary>
            /// Enum StateDbaEnum for StateDba
            /// </summary>
            [EnumMember(Value = "StateDba")]
            StateDbaEnum = 2,
            
            /// <summary>
            /// Enum ArticlesOfIncorporationEnum for ArticlesOfIncorporation
            /// </summary>
            [EnumMember(Value = "ArticlesOfIncorporation")]
            ArticlesOfIncorporationEnum = 3,
            
            /// <summary>
            /// Enum BusinessLicenseEnum for BusinessLicense
            /// </summary>
            [EnumMember(Value = "BusinessLicense")]
            BusinessLicenseEnum = 4,
            
            /// <summary>
            /// Enum CorporateResolutionEnum for CorporateResolution
            /// </summary>
            [EnumMember(Value = "CorporateResolution")]
            CorporateResolutionEnum = 5,
            
            /// <summary>
            /// Enum SecretaryOfStateFilingReceiptEnum for SecretaryOfStateFilingReceipt
            /// </summary>
            [EnumMember(Value = "SecretaryOfStateFilingReceipt")]
            SecretaryOfStateFilingReceiptEnum = 6,
            
            /// <summary>
            /// Enum AssociationMinutesEnum for AssociationMinutes
            /// </summary>
            [EnumMember(Value = "AssociationMinutes")]
            AssociationMinutesEnum = 7,
            
            /// <summary>
            /// Enum PartnershipAgreementEnum for PartnershipAgreement
            /// </summary>
            [EnumMember(Value = "PartnershipAgreement")]
            PartnershipAgreementEnum = 8
        }

        /// <summary>
        /// Documentation types for Organizations. 
        /// </summary>
        /// <value>Documentation types for Organizations. </value>
        [DataMember(Name="organizationDocument", EmitDefaultValue=true)]
        public OrganizationDocumentEnum OrganizationDocument { get; set; }


        /// <summary>
        /// Documentation types for trusts. 
        /// </summary>
        /// <value>Documentation types for trusts. </value>
        [TypeConverter(typeof(CustomEnumConverter<TrustDocumentEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TrustDocumentEnum
        {
            
            /// <summary>
            /// Enum TrustDocumentEnum for TrustDocument
            /// </summary>
            [EnumMember(Value = "TrustDocument")]
            TrustDocumentEnum = 1
        }

        /// <summary>
        /// Documentation types for trusts. 
        /// </summary>
        /// <value>Documentation types for trusts. </value>
        [DataMember(Name="trustDocument", EmitDefaultValue=true)]
        public TrustDocumentEnum TrustDocument { get; set; }


        /// <summary>
        /// Documentation types for estates. 
        /// </summary>
        /// <value>Documentation types for estates. </value>
        [TypeConverter(typeof(CustomEnumConverter<EstateDocumentEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EstateDocumentEnum
        {
            
            /// <summary>
            /// Enum WillEnum for Will
            /// </summary>
            [EnumMember(Value = "Will")]
            WillEnum = 1,
            
            /// <summary>
            /// Enum EstateInstrumentEnum for EstateInstrument
            /// </summary>
            [EnumMember(Value = "EstateInstrument")]
            EstateInstrumentEnum = 2
        }

        /// <summary>
        /// Documentation types for estates. 
        /// </summary>
        /// <value>Documentation types for estates. </value>
        [DataMember(Name="estateDocument", EmitDefaultValue=true)]
        public EstateDocumentEnum EstateDocument { get; set; }

        /// <summary>
        /// For use with for all other document types. 
        /// </summary>
        /// <value>For use with for all other document types. </value>
        [DataMember(Name="otherDocument", EmitDefaultValue=false)]
        public string OtherDocument { get; set; }

    }
}
