/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelConfiguration 
    {
        /// <summary>
        /// Unique identification for the configuration. 
        /// </summary>
        /// <value>Unique identification for the configuration. </value>
        [DataMember(Name="configurationId", EmitDefaultValue=false)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Unique name for the configuration. 
        /// </summary>
        /// <value>Unique name for the configuration. </value>
        [DataMember(Name="configurationName", EmitDefaultValue=false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Description of the configuration. 
        /// </summary>
        /// <value>Description of the configuration. </value>
        [DataMember(Name="configurationDescription", EmitDefaultValue=false)]
        public string ConfigurationDescription { get; set; }

        /// <summary>
        /// Indicates the environment in which the message should be executed. Depends upon agreements between endpoints what is passed for each environment. Examples might be: Dev, QAInternal, UAT, Training, Sandbox, Production. 
        /// </summary>
        /// <value>Indicates the environment in which the message should be executed. Depends upon agreements between endpoints what is passed for each environment. Examples might be: Dev, QAInternal, UAT, Training, Sandbox, Production. </value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }


        /// <summary>
        /// Indicates the status of the overall configuration.  Valid values are for example: Online, Offline, ReadyToPurge 
        /// </summary>
        /// <value>Indicates the status of the overall configuration.  Valid values are for example: Online, Offline, ReadyToPurge </value>
        [TypeConverter(typeof(CustomEnumConverter<ConfigurationStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ConfigurationStatusEnum
        {
            
            /// <summary>
            /// Enum OnlineEnum for Online
            /// </summary>
            [EnumMember(Value = "Online")]
            OnlineEnum = 1,
            
            /// <summary>
            /// Enum OfflineEnum for Offline
            /// </summary>
            [EnumMember(Value = "Offline")]
            OfflineEnum = 2,
            
            /// <summary>
            /// Enum ReadyToPurgeEnum for ReadyToPurge
            /// </summary>
            [EnumMember(Value = "ReadyToPurge")]
            ReadyToPurgeEnum = 3,
            
            /// <summary>
            /// Enum TestModeEnum for TestMode
            /// </summary>
            [EnumMember(Value = "TestMode")]
            TestModeEnum = 4,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 5
        }

        /// <summary>
        /// Indicates the status of the overall configuration.  Valid values are for example: Online, Offline, ReadyToPurge 
        /// </summary>
        /// <value>Indicates the status of the overall configuration.  Valid values are for example: Online, Offline, ReadyToPurge </value>
        [DataMember(Name="configurationStatus", EmitDefaultValue=true)]
        public ConfigurationStatusEnum ConfigurationStatus { get; set; }

        /// <summary>
        /// More detail as to why the configuration is in a particular status.  For example, Waiting on Services setup. 
        /// </summary>
        /// <value>More detail as to why the configuration is in a particular status.  For example, Waiting on Services setup. </value>
        [DataMember(Name="configurationStatusComment", EmitDefaultValue=false)]
        public string ConfigurationStatusComment { get; set; }

        /// <summary>
        /// Gets or Sets FiIdList
        /// </summary>
        [DataMember(Name="fiIdList", EmitDefaultValue=false)]
        public ConfigurationFiIdList FiIdList { get; set; }

        /// <summary>
        /// Gets or Sets FiList
        /// </summary>
        [DataMember(Name="fiList", EmitDefaultValue=false)]
        public ConfigurationFiList FiList { get; set; }

        /// <summary>
        /// This element is depricated. Use serviceTimeZoneUTCOffset for all new use. The offset of the time zone from Universal Time where this service resides.  If the service provides a serviceTimeZoneUTOffset, it overrides this value for that service. For example, Atlantic Standard Time (AST) &#x3D;  UT - 4 hours  (serviceTimeZoneUTOffset would be -4) Eastern Standard Time (EST)  &#x3D;  UT - 5 hours Central Standard Time (CST)  &#x3D;  UT - 6 hours Mountain Standard Time (MST) &#x3D;  UT - 7 hours Pacific Standard Time (PST)  &#x3D;  UT - 8 hours If the location observes daylight savings time, this value may need to be updated. 
        /// </summary>
        /// <value>This element is depricated. Use serviceTimeZoneUTCOffset for all new use. The offset of the time zone from Universal Time where this service resides.  If the service provides a serviceTimeZoneUTOffset, it overrides this value for that service. For example, Atlantic Standard Time (AST) &#x3D;  UT - 4 hours  (serviceTimeZoneUTOffset would be -4) Eastern Standard Time (EST)  &#x3D;  UT - 5 hours Central Standard Time (CST)  &#x3D;  UT - 6 hours Mountain Standard Time (MST) &#x3D;  UT - 7 hours Pacific Standard Time (PST)  &#x3D;  UT - 8 hours If the location observes daylight savings time, this value may need to be updated. </value>
        [DataMember(Name="endPointTimeZoneUTOffset", EmitDefaultValue=true)]
        public int EndPointTimeZoneUTOffset { get; set; }

        /// <summary>
        /// The offset of the time zone from Universal Time from the reference point. For example Format : [+|-]HH:MM If the location observes daylight savings time, this value may need to be updated. 
        /// </summary>
        /// <value>The offset of the time zone from Universal Time from the reference point. For example Format : [+|-]HH:MM If the location observes daylight savings time, this value may need to be updated. </value>
        [DataMember(Name="serviceTimeZoneUTCOffset", EmitDefaultValue=false)]
        public string ServiceTimeZoneUTCOffset { get; set; }

        /// <summary>
        /// The time zone name. See reference https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations 
        /// </summary>
        /// <value>The time zone name. See reference https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations </value>
        [DataMember(Name="serviceTimeZoneName", EmitDefaultValue=false)]
        public string ServiceTimeZoneName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceList
        /// </summary>
        [DataMember(Name="serviceList", EmitDefaultValue=false)]
        public ConfigurationServiceList ServiceList { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationAppList
        /// </summary>
        [DataMember(Name="configurationAppList", EmitDefaultValue=false)]
        public ConfigurationConfigurationAppList ConfigurationAppList { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationNetworkNodeAddressList
        /// </summary>
        [DataMember(Name="configurationNetworkNodeAddressList", EmitDefaultValue=false)]
        public ConfigurationConfigurationNetworkNodeAddressList ConfigurationNetworkNodeAddressList { get; set; }

        /// <summary>
        /// The date and time this configuration was created. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time this configuration was created. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="configurationCreatedDateTime", EmitDefaultValue=false)]
        public string ConfigurationCreatedDateTime { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="configurationCreatedBy", EmitDefaultValue=false)]
        public string ConfigurationCreatedBy { get; set; }

        /// <summary>
        /// The date and time this configuration was last updated. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date and time this configuration was last updated. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="configurationLastUpdatedDateTime", EmitDefaultValue=false)]
        public string ConfigurationLastUpdatedDateTime { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="configurationLastUpdatedBy", EmitDefaultValue=false)]
        public string ConfigurationLastUpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
