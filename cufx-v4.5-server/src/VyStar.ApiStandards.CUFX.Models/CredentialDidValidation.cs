/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The population of data when credentialType is DID. When presented a verifiable DID credential may or may not be validated at the time of presentation. The following elements are necessary to determine the status of the credential and or provide the ability to execute a verification of the credential. The following map to the w3.org Verifiable Credentials Data Model v1.0. https://www.w3.org/TR/did-core/ 
    /// </summary>
    [DataContract]
    public partial class CredentialDidValidation 
    {
        /// <summary>
        /// A DID URL is a network location identifier for a specific resource. It can be used to retrieve things like representations of DID subjects, verification methods, services, specific parts of a DID document, or other resources. A string that conforms to the rules in Â§ 3.2 DID URL Syntax. 
        /// </summary>
        /// <value>A DID URL is a network location identifier for a specific resource. It can be used to retrieve things like representations of DID subjects, verification methods, services, specific parts of a DID document, or other resources. A string that conforms to the rules in Â§ 3.2 DID URL Syntax. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An entity that has the capability to make changes to a DID document. The generic DID scheme is a URI scheme conformant with [RFC3986]. A string that conforms to the rules in 3.1 DID Syntax. 
        /// </summary>
        /// <value>An entity that has the capability to make changes to a DID document. The generic DID scheme is a URI scheme conformant with [RFC3986]. A string that conforms to the rules in 3.1 DID Syntax. </value>
        [DataMember(Name="controller", EmitDefaultValue=false)]
        public string Controller { get; set; }

        /// <summary>
        /// The value of the type property MUST be a string that references exactly one verification method type. In order to maximize global interoperability, the verification method type SHOULD be registered in the DID Specification Registries [DID-SPEC-REGISTRIES]. https://www.w3.org/TR/did-core/#bib-did-spec-registries 
        /// </summary>
        /// <value>The value of the type property MUST be a string that references exactly one verification method type. In order to maximize global interoperability, the verification method type SHOULD be registered in the DID Specification Registries [DID-SPEC-REGISTRIES]. https://www.w3.org/TR/did-core/#bib-did-spec-registries </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// A map representing a JSON Web Key that conforms to [RFC7517]. See definition of publicKeyJwk for additional constraints. 
        /// </summary>
        /// <value>A map representing a JSON Web Key that conforms to [RFC7517]. See definition of publicKeyJwk for additional constraints. </value>
        [DataMember(Name="publicKeyJwk", EmitDefaultValue=false)]
        public string PublicKeyJwk { get; set; }

        /// <summary>
        /// A string that conforms to a base58btc encoded public key. 
        /// </summary>
        /// <value>A string that conforms to a base58btc encoded public key. </value>
        [DataMember(Name="publicKeyBase58", EmitDefaultValue=false)]
        public string PublicKeyBase58 { get; set; }

    }
}
