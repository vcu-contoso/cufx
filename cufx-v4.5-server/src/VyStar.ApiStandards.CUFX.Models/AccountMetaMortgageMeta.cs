/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountMetaMortgageMeta 
    {
        /// <summary>
        /// Interest rate charged to the mortgage. Determines the amount charged each time period based on the period. Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 
        /// </summary>
        /// <value>Interest rate charged to the mortgage. Determines the amount charged each time period based on the period. Value is formatted as a percentile. A passed value of 4.5 is equivalent to 0.045 actual. 4.500 may be displayed as 4.500% or 4.5% depending on the user interface. Decimals available: 999.999 </value>
        [DataMember(Name="interestRate", EmitDefaultValue=true)]
        public decimal InterestRate { get; set; }

        /// <summary>
        /// Gets or Sets OriginalBalance
        /// </summary>
        [DataMember(Name="originalBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount OriginalBalance { get; set; }

        /// <summary>
        /// The date which a financial instrument matures. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date which a financial instrument matures. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public DateTime MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets EscrowBalance
        /// </summary>
        [DataMember(Name="escrowBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount EscrowBalance { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPayment
        /// </summary>
        [DataMember(Name="minimumPayment", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumPayment { get; set; }

        /// <summary>
        /// The date that payment is due for the mortgage to keep in good standing and avoid penalties. Many times institutions will institute a grace period beyond this date, but this is the published due date.  The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date that payment is due for the mortgage to keep in good standing and avoid penalties. Many times institutions will institute a grace period beyond this date, but this is the published due date.  The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="currentDueDate", EmitDefaultValue=false)]
        public DateTime CurrentDueDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPayoffBalance
        /// </summary>
        [DataMember(Name="currentPayoffBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CurrentPayoffBalance { get; set; }

        /// <summary>
        /// Gets or Sets YtdTaxesPaid
        /// </summary>
        [DataMember(Name="ytdTaxesPaid", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount YtdTaxesPaid { get; set; }

        /// <summary>
        /// Gets or Sets YtdInterestPaid
        /// </summary>
        [DataMember(Name="ytdInterestPaid", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount YtdInterestPaid { get; set; }

        /// <summary>
        /// Gets or Sets PreviousYtdInterestPaid
        /// </summary>
        [DataMember(Name="previousYtdInterestPaid", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PreviousYtdInterestPaid { get; set; }

        /// <summary>
        /// Gets or Sets LatePaymentFee
        /// </summary>
        [DataMember(Name="latePaymentFee", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount LatePaymentFee { get; set; }

        /// <summary>
        /// Gets or Sets PastDueAmount
        /// </summary>
        [DataMember(Name="pastDueAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount PastDueAmount { get; set; }

        /// <summary>
        /// The date of the most recent statement The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date of the most recent statement The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="lastStatementDate", EmitDefaultValue=false)]
        public DateTime LastStatementDate { get; set; }

        /// <summary>
        /// The date of the previous statment The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date of the previous statment The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="previousStatementDate", EmitDefaultValue=false)]
        public DateTime PreviousStatementDate { get; set; }

        /// <summary>
        /// The date that the next payment is due. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). 
        /// </summary>
        /// <value>The date that the next payment is due. The date should be ISO 8601 format yyyy-mm-dd (2011-03-28). </value>
        [DataMember(Name="nextPaymentDate", EmitDefaultValue=false)]
        public DateTime NextPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets NextPaymentAmount
        /// </summary>
        [DataMember(Name="nextPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount NextPaymentAmount { get; set; }

    }
}
