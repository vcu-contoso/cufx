/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
        /// <summary>
        /// This is enumeration of statuses for the ebill Enrollment. The user is ineligible to enroll in ebills The user is currently enrolled in ebills The user is currently not enrolled in ebills The user has a pending enrollment in progress for ebills The user has a pending unenrollment in progress for ebills The user has an unspecified error with their ebill enrollment This value can be used when no other statuses relate to the ebill enrollment 
        /// </summary>
        /// <value>This is enumeration of statuses for the ebill Enrollment. The user is ineligible to enroll in ebills The user is currently enrolled in ebills The user is currently not enrolled in ebills The user has a pending enrollment in progress for ebills The user has a pending unenrollment in progress for ebills The user has an unspecified error with their ebill enrollment This value can be used when no other statuses relate to the ebill enrollment </value>
        [TypeConverter(typeof(CustomEnumConverter<EBillEnrollmentStatus>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EBillEnrollmentStatus
        {
            
            /// <summary>
            /// Enum IneligibleEnum for Ineligible
            /// </summary>
            [EnumMember(Value = "Ineligible")]
            IneligibleEnum = 1,
            
            /// <summary>
            /// Enum EnrolledEnum for Enrolled
            /// </summary>
            [EnumMember(Value = "Enrolled")]
            EnrolledEnum = 2,
            
            /// <summary>
            /// Enum NotEnrolledEnum for NotEnrolled
            /// </summary>
            [EnumMember(Value = "NotEnrolled")]
            NotEnrolledEnum = 3,
            
            /// <summary>
            /// Enum PendingEnrollmentEnum for PendingEnrollment
            /// </summary>
            [EnumMember(Value = "PendingEnrollment")]
            PendingEnrollmentEnum = 4,
            
            /// <summary>
            /// Enum PendingUnenrollmentEnum for PendingUnenrollment
            /// </summary>
            [EnumMember(Value = "PendingUnenrollment")]
            PendingUnenrollmentEnum = 5,
            
            /// <summary>
            /// Enum ErrorEnum for Error
            /// </summary>
            [EnumMember(Value = "Error")]
            ErrorEnum = 6,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 7
        }
}
