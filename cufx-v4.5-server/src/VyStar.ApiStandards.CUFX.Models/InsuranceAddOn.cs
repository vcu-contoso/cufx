/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details related to insurance details added to the loan. It is insurance directly related to the loan. 
    /// </summary>
    [DataContract]
    public partial class InsuranceAddOn 
    {
        /// <summary>
        /// Unique identifier for the insurance add-on. 
        /// </summary>
        /// <value>Unique identifier for the insurance add-on. </value>
        [DataMember(Name="insuranceAddOnId", EmitDefaultValue=false)]
        public string InsuranceAddOnId { get; set; }


        /// <summary>
        /// Guaranteed auto protection. Mechanical breakdown insurance. 
        /// </summary>
        /// <value>Guaranteed auto protection. Mechanical breakdown insurance. </value>
        [TypeConverter(typeof(CustomEnumConverter<InsuranceTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InsuranceTypeEnum
        {
            
            /// <summary>
            /// Enum AccidentalDeathAndDismembermentEnum for AccidentalDeathAndDismemberment
            /// </summary>
            [EnumMember(Value = "AccidentalDeathAndDismemberment")]
            AccidentalDeathAndDismembermentEnum = 1,
            
            /// <summary>
            /// Enum DebtCancellationEnum for DebtCancellation
            /// </summary>
            [EnumMember(Value = "DebtCancellation")]
            DebtCancellationEnum = 2,
            
            /// <summary>
            /// Enum DisabilityEnum for Disability
            /// </summary>
            [EnumMember(Value = "Disability")]
            DisabilityEnum = 3,
            
            /// <summary>
            /// Enum GapEnum for Gap
            /// </summary>
            [EnumMember(Value = "Gap")]
            GapEnum = 4,
            
            /// <summary>
            /// Enum LifeEnum for Life
            /// </summary>
            [EnumMember(Value = "Life")]
            LifeEnum = 5,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 6,
            
            /// <summary>
            /// Enum PaymentProtectionEnum for PaymentProtection
            /// </summary>
            [EnumMember(Value = "PaymentProtection")]
            PaymentProtectionEnum = 7,
            
            /// <summary>
            /// Enum MbiEnum for Mbi
            /// </summary>
            [EnumMember(Value = "Mbi")]
            MbiEnum = 8
        }

        /// <summary>
        /// Guaranteed auto protection. Mechanical breakdown insurance. 
        /// </summary>
        /// <value>Guaranteed auto protection. Mechanical breakdown insurance. </value>
        [DataMember(Name="insuranceType", EmitDefaultValue=true)]
        public InsuranceTypeEnum InsuranceType { get; set; }

        /// <summary>
        /// If insurance type is Other, this is used to describe the FI-defined type. 
        /// </summary>
        /// <value>If insurance type is Other, this is used to describe the FI-defined type. </value>
        [DataMember(Name="otherInsuranceType", EmitDefaultValue=false)]
        public string OtherInsuranceType { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceMaximum
        /// </summary>
        [DataMember(Name="insuranceMaximum", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount InsuranceMaximum { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceAmount
        /// </summary>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount InsuranceAmount { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceFeeAmount
        /// </summary>
        [DataMember(Name="insuranceFeeAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount InsuranceFeeAmount { get; set; }

        /// <summary>
        /// The FI-defined code related to the insurance sub type. 
        /// </summary>
        /// <value>The FI-defined code related to the insurance sub type. </value>
        [DataMember(Name="insuranceSubType", EmitDefaultValue=false)]
        public string InsuranceSubType { get; set; }

        /// <summary>
        /// Short description that appears on the statement, e.g. config. 
        /// </summary>
        /// <value>Short description that appears on the statement, e.g. config. </value>
        [DataMember(Name="insuranceShortDescription", EmitDefaultValue=false)]
        public string InsuranceShortDescription { get; set; }

        /// <summary>
        /// Description that appears on records, e.g. this is config. 
        /// </summary>
        /// <value>Description that appears on records, e.g. this is config. </value>
        [DataMember(Name="insuranceDescription", EmitDefaultValue=false)]
        public string InsuranceDescription { get; set; }

        /// <summary>
        /// Insurance posting consolidation flag; Indicates whether or not to post the Life and Disability Insurance Separately. True &#x3D; post as consolidated lump sum False &#x3D; post separately 
        /// </summary>
        /// <value>Insurance posting consolidation flag; Indicates whether or not to post the Life and Disability Insurance Separately. True &#x3D; post as consolidated lump sum False &#x3D; post separately </value>
        [DataMember(Name="insurancePostingConsolidationFlag", EmitDefaultValue=true)]
        public bool InsurancePostingConsolidationFlag { get; set; }

        /// <summary>
        /// Insureds date of birth. 
        /// </summary>
        /// <value>Insureds date of birth. </value>
        [DataMember(Name="primaryInsuredDateOfBirth", EmitDefaultValue=false)]
        public DateTime PrimaryInsuredDateOfBirth { get; set; }

        /// <summary>
        /// Second Insureds date of birth. 
        /// </summary>
        /// <value>Second Insureds date of birth. </value>
        [DataMember(Name="secondInsuredDateOfBirth", EmitDefaultValue=false)]
        public DateTime SecondInsuredDateOfBirth { get; set; }

    }
}
