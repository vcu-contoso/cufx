/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Bill 
    {
        /// <summary>
        /// The bill ID is a persistent and unique identifier for the bill from payee. 
        /// </summary>
        /// <value>The bill ID is a persistent and unique identifier for the bill from payee. </value>
        [DataMember(Name="billId", EmitDefaultValue=false)]
        public string BillId { get; set; }

        /// <summary>
        /// Gets or Sets BillImageArtifactId
        /// </summary>
        [DataMember(Name="billImageArtifactId", EmitDefaultValue=false)]
        public ArtifactArtifactId BillImageArtifactId { get; set; }

        /// <summary>
        /// The eBill location of the bill image. If it is stored by a third party location. 
        /// </summary>
        /// <value>The eBill location of the bill image. If it is stored by a third party location. </value>
        [DataMember(Name="eBillUri", EmitDefaultValue=false)]
        public string EBillUri { get; set; }

        /// <summary>
        /// The bill payee ID is a persistent and unique identifier for the bill payee of the consumer. 
        /// </summary>
        /// <value>The bill payee ID is a persistent and unique identifier for the bill payee of the consumer. </value>
        [DataMember(Name="billFromPayeeId", EmitDefaultValue=false)]
        public string BillFromPayeeId { get; set; }

        /// <summary>
        /// The bill payee global ID is a persistent and unique identifier for the bill payee in the bill pay system. This bill payee global ID does not change from consumer to consumer. 
        /// </summary>
        /// <value>The bill payee global ID is a persistent and unique identifier for the bill payee in the bill pay system. This bill payee global ID does not change from consumer to consumer. </value>
        [DataMember(Name="billFromPayeeGlobalId", EmitDefaultValue=false)]
        public string BillFromPayeeGlobalId { get; set; }

        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<AccountTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public AccountTypeEnum AccountType { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="accountSubType", EmitDefaultValue=false)]
        public string AccountSubType { get; set; }

        /// <summary>
        /// True if this bill has eBill attached. 
        /// </summary>
        /// <value>True if this bill has eBill attached. </value>
        [DataMember(Name="isEBill", EmitDefaultValue=true)]
        public bool IsEBill { get; set; }

        /// <summary>
        /// Gets or Sets DueAmount
        /// </summary>
        [DataMember(Name="dueAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount DueAmount { get; set; }

        /// <summary>
        /// Gets or Sets EarlyPaymentAmount
        /// </summary>
        [DataMember(Name="earlyPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount EarlyPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPaymentAmount
        /// </summary>
        [DataMember(Name="minimumPaymentAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumPaymentAmount { get; set; }

        /// <summary>
        /// The Date bill was sent by payee. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The Date bill was sent by payee. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="sentDateTime", EmitDefaultValue=false)]
        public string SentDateTime { get; set; }

        /// <summary>
        /// The due date of the bill. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The due date of the bill. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="dueDateTime", EmitDefaultValue=false)]
        public string DueDateTime { get; set; }

        /// <summary>
        /// The early payment date of the bill (if any). The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The early payment date of the bill (if any). The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="earlyPaymentDateTime", EmitDefaultValue=false)]
        public string EarlyPaymentDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LateFee
        /// </summary>
        [DataMember(Name="lateFee", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount LateFee { get; set; }

        /// <summary>
        /// The Date Updated is the date that the Bill Payee was last updated by the member. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The Date Updated is the date that the Bill Payee was last updated by the member. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="updatedDateTime", EmitDefaultValue=false)]
        public string UpdatedDateTime { get; set; }


        /// <summary>
        /// This is enumeration of statuses for the bill payee. This value indicates that the bill is due and had not been paid. This value indicates that the bill payemnt date has expired and the bill has not been paid. This value indicates that the bill was cancelled. This value indicates that the bill was placed on hold pending a resolution of some type to clear This value indicates that the bill has been paid. This value indicates that the bill has been voided. This value indicates that the bill is being disputed. This value indicates that the attempt to pay the bill failed. This value indicates that the bill has been scheduled to be paid. See otherBillStatus for more detail. 
        /// </summary>
        /// <value>This is enumeration of statuses for the bill payee. This value indicates that the bill is due and had not been paid. This value indicates that the bill payemnt date has expired and the bill has not been paid. This value indicates that the bill was cancelled. This value indicates that the bill was placed on hold pending a resolution of some type to clear This value indicates that the bill has been paid. This value indicates that the bill has been voided. This value indicates that the bill is being disputed. This value indicates that the attempt to pay the bill failed. This value indicates that the bill has been scheduled to be paid. See otherBillStatus for more detail. </value>
        [TypeConverter(typeof(CustomEnumConverter<BillStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BillStatusEnum
        {
            
            /// <summary>
            /// Enum DueEnum for Due
            /// </summary>
            [EnumMember(Value = "Due")]
            DueEnum = 1,
            
            /// <summary>
            /// Enum OverDueEnum for OverDue
            /// </summary>
            [EnumMember(Value = "OverDue")]
            OverDueEnum = 2,
            
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 3,
            
            /// <summary>
            /// Enum SuspendedEnum for Suspended
            /// </summary>
            [EnumMember(Value = "Suspended")]
            SuspendedEnum = 4,
            
            /// <summary>
            /// Enum PaidEnum for Paid
            /// </summary>
            [EnumMember(Value = "Paid")]
            PaidEnum = 5,
            
            /// <summary>
            /// Enum VoidEnum for Void
            /// </summary>
            [EnumMember(Value = "Void")]
            VoidEnum = 6,
            
            /// <summary>
            /// Enum DisputeEnum for Dispute
            /// </summary>
            [EnumMember(Value = "Dispute")]
            DisputeEnum = 7,
            
            /// <summary>
            /// Enum PaymentFailedEnum for PaymentFailed
            /// </summary>
            [EnumMember(Value = "PaymentFailed")]
            PaymentFailedEnum = 8,
            
            /// <summary>
            /// Enum ScheduledEnum for Scheduled
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            ScheduledEnum = 9,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 10
        }

        /// <summary>
        /// This is enumeration of statuses for the bill payee. This value indicates that the bill is due and had not been paid. This value indicates that the bill payemnt date has expired and the bill has not been paid. This value indicates that the bill was cancelled. This value indicates that the bill was placed on hold pending a resolution of some type to clear This value indicates that the bill has been paid. This value indicates that the bill has been voided. This value indicates that the bill is being disputed. This value indicates that the attempt to pay the bill failed. This value indicates that the bill has been scheduled to be paid. See otherBillStatus for more detail. 
        /// </summary>
        /// <value>This is enumeration of statuses for the bill payee. This value indicates that the bill is due and had not been paid. This value indicates that the bill payemnt date has expired and the bill has not been paid. This value indicates that the bill was cancelled. This value indicates that the bill was placed on hold pending a resolution of some type to clear This value indicates that the bill has been paid. This value indicates that the bill has been voided. This value indicates that the bill is being disputed. This value indicates that the attempt to pay the bill failed. This value indicates that the bill has been scheduled to be paid. See otherBillStatus for more detail. </value>
        [DataMember(Name="billStatus", EmitDefaultValue=true)]
        public BillStatusEnum BillStatus { get; set; }

        /// <summary>
        /// The date that the bill payment or check was received and processed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date that the bill payment or check was received and processed. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported. The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="paymentClearedDateTime", EmitDefaultValue=false)]
        public string PaymentClearedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Description of bill status when billStatus is set to Other. 
        /// </summary>
        /// <value>Description of bill status when billStatus is set to Other. </value>
        [DataMember(Name="otherBillStatus", EmitDefaultValue=false)]
        public string OtherBillStatus { get; set; }

    }
}
