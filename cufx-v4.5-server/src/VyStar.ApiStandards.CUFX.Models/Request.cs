/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// An individual request thats part of a larger request of products, services, etc. that the member is requesting. 
    /// </summary>
    [DataContract]
    public partial class Request 
    {
        /// <summary>
        /// Unique identifier for the request. 
        /// </summary>
        /// <value>Unique identifier for the request. </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets RequestItem
        /// </summary>
        [DataMember(Name="requestItem", EmitDefaultValue=false)]
        public ProductServiceEnrollmentRequestItem RequestItem { get; set; }


        /// <summary>
        /// Status of the activity within request to indicate how the activity is progressing from a workflow standpoint. The activity is new and has not been handled by internal teams. The activity  has been allocated to a resource but no time has been spent on the activity. The activity is being actively being worked on. The activity is in progress but has stalled due to some issue. The details of why its being held up will be in the notes related to the request/activity. The activity has been completed. The activity has been cancelled. The activity is intentionally on hold. The details of why it is on hold will be in the notes related to the request/activity. 
        /// </summary>
        /// <value>Status of the activity within request to indicate how the activity is progressing from a workflow standpoint. The activity is new and has not been handled by internal teams. The activity  has been allocated to a resource but no time has been spent on the activity. The activity is being actively being worked on. The activity is in progress but has stalled due to some issue. The details of why its being held up will be in the notes related to the request/activity. The activity has been completed. The activity has been cancelled. The activity is intentionally on hold. The details of why it is on hold will be in the notes related to the request/activity. </value>
        [TypeConverter(typeof(CustomEnumConverter<RequestStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RequestStatusEnum
        {
            
            /// <summary>
            /// Enum NewEnum for New
            /// </summary>
            [EnumMember(Value = "New")]
            NewEnum = 1,
            
            /// <summary>
            /// Enum AssignedEnum for Assigned
            /// </summary>
            [EnumMember(Value = "Assigned")]
            AssignedEnum = 2,
            
            /// <summary>
            /// Enum InProgressActiveEnum for InProgressActive
            /// </summary>
            [EnumMember(Value = "InProgressActive")]
            InProgressActiveEnum = 3,
            
            /// <summary>
            /// Enum InProgressInactiveEnum for InProgressInactive
            /// </summary>
            [EnumMember(Value = "InProgressInactive")]
            InProgressInactiveEnum = 4,
            
            /// <summary>
            /// Enum CompletedEnum for Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            CompletedEnum = 5,
            
            /// <summary>
            /// Enum CancelledEnum for Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            CancelledEnum = 6,
            
            /// <summary>
            /// Enum OnHoldEnum for OnHold
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHoldEnum = 7
        }

        /// <summary>
        /// Status of the activity within request to indicate how the activity is progressing from a workflow standpoint. The activity is new and has not been handled by internal teams. The activity  has been allocated to a resource but no time has been spent on the activity. The activity is being actively being worked on. The activity is in progress but has stalled due to some issue. The details of why its being held up will be in the notes related to the request/activity. The activity has been completed. The activity has been cancelled. The activity is intentionally on hold. The details of why it is on hold will be in the notes related to the request/activity. 
        /// </summary>
        /// <value>Status of the activity within request to indicate how the activity is progressing from a workflow standpoint. The activity is new and has not been handled by internal teams. The activity  has been allocated to a resource but no time has been spent on the activity. The activity is being actively being worked on. The activity is in progress but has stalled due to some issue. The details of why its being held up will be in the notes related to the request/activity. The activity has been completed. The activity has been cancelled. The activity is intentionally on hold. The details of why it is on hold will be in the notes related to the request/activity. </value>
        [DataMember(Name="requestStatus", EmitDefaultValue=true)]
        public RequestStatusEnum RequestStatus { get; set; }

        /// <summary>
        /// UTC date and time when activity was requested.  In most cases this will be the same as the product service request create date unless this request was subsequently added. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>UTC date and time when activity was requested.  In most cases this will be the same as the product service request create date unless this request was subsequently added. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="requestedDateTime", EmitDefaultValue=false)]
        public string RequestedDateTime { get; set; }

        /// <summary>
        /// UTC date and time when request is due.  This will most likely be the due date of the last activity related to the request. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>UTC date and time when request is due.  This will most likely be the due date of the last activity related to the request. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="dueDateTime", EmitDefaultValue=false)]
        public string DueDateTime { get; set; }

        /// <summary>
        /// UTC date and time when request was started to be serviced. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>UTC date and time when request was started to be serviced. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public string StartDateTime { get; set; }

        /// <summary>
        /// UTC date and time when request was completed.  THis is most likely when the last activity was completed related to the request. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>UTC date and time when request was completed.  THis is most likely when the last activity was completed related to the request. The date/time should be ISO 8601 UTC format: yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public string CompletedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets RequestNoteList
        /// </summary>
        [DataMember(Name="requestNoteList", EmitDefaultValue=false)]
        public AccountAccountNoteList RequestNoteList { get; set; }

        /// <summary>
        /// Gets or Sets RequestRelatedTo
        /// </summary>
        [DataMember(Name="requestRelatedTo", EmitDefaultValue=false)]
        public ActivityActivityRelatedTo RequestRelatedTo { get; set; }

        /// <summary>
        /// Gets or Sets ActivityList
        /// </summary>
        [DataMember(Name="activityList", EmitDefaultValue=false)]
        public RequestActivityList ActivityList { get; set; }

        /// <summary>
        /// Gets or Sets SecureMessageList
        /// </summary>
        [DataMember(Name="secureMessageList", EmitDefaultValue=false)]
        public RequestSecureMessageList SecureMessageList { get; set; }

        /// <summary>
        /// Gets or Sets DocumentList
        /// </summary>
        [DataMember(Name="documentList", EmitDefaultValue=false)]
        public DocumentFilterDocumentIdList DocumentList { get; set; }

        /// <summary>
        /// Gets or Sets RequestCustomData
        /// </summary>
        [DataMember(Name="requestCustomData", EmitDefaultValue=false)]
        public AccessProfileCustomData RequestCustomData { get; set; }

    }
}
