/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// The list of filter options for services requesting hold data. The options can be used in combination or by themselves. It is up to the data source to either return or affect the data requested or return a standard error identifying why the request was rejected. 
    /// </summary>
    [DataContract]
    public partial class HoldFilter 
    {
        /// <summary>
        /// Gets or Sets HoldIdList
        /// </summary>
        [DataMember(Name="holdIdList", EmitDefaultValue=false)]
        public HoldFilterHoldIdList HoldIdList { get; set; }

        /// <summary>
        /// Gets or Sets PartyIdList
        /// </summary>
        [DataMember(Name="partyIdList", EmitDefaultValue=false)]
        public AccountPartyIdList PartyIdList { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdList
        /// </summary>
        [DataMember(Name="accountIdList", EmitDefaultValue=false)]
        public AccountFilterAccountIdList AccountIdList { get; set; }

        /// <summary>
        /// Gets or Sets AccountStatusList
        /// </summary>
        [DataMember(Name="accountStatusList", EmitDefaultValue=false)]
        public AccountFilterAccountStatusList AccountStatusList { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipIdList
        /// </summary>
        [DataMember(Name="relationshipIdList", EmitDefaultValue=false)]
        public AccountFilterRelationshipIdList RelationshipIdList { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIdList
        /// </summary>
        [DataMember(Name="transactionIdList", EmitDefaultValue=false)]
        public HoldFilterTransactionIdList TransactionIdList { get; set; }


        /// <summary>
        /// This is the enumeration of statuses for holds. The hold is active. The hold is Inactive. 
        /// </summary>
        /// <value>This is the enumeration of statuses for holds. The hold is active. The hold is Inactive. </value>
        [TypeConverter(typeof(CustomEnumConverter<HoldStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum HoldStatusEnum
        {
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum InActiveEnum for InActive
            /// </summary>
            [EnumMember(Value = "InActive")]
            InActiveEnum = 2
        }

        /// <summary>
        /// This is the enumeration of statuses for holds. The hold is active. The hold is Inactive. 
        /// </summary>
        /// <value>This is the enumeration of statuses for holds. The hold is active. The hold is Inactive. </value>
        [DataMember(Name="holdStatus", EmitDefaultValue=true)]
        public HoldStatusEnum HoldStatus { get; set; }

        /// <summary>
        /// Gets or Sets HoldTypeList
        /// </summary>
        [DataMember(Name="holdTypeList", EmitDefaultValue=false)]
        public HoldFilterHoldTypeList HoldTypeList { get; set; }

        /// <summary>
        /// Gets or Sets HoldReasonTypeList
        /// </summary>
        [DataMember(Name="holdReasonTypeList", EmitDefaultValue=false)]
        public HoldFilterHoldReasonTypeList HoldReasonTypeList { get; set; }

        /// <summary>
        /// Gets or Sets MinAmount
        /// </summary>
        [DataMember(Name="minAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaxAmount
        /// </summary>
        [DataMember(Name="maxAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets HoldEffectiveDateRange
        /// </summary>
        [DataMember(Name="holdEffectiveDateRange", EmitDefaultValue=false)]
        public AccessProfileFilterCreateAccessDateRange HoldEffectiveDateRange { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentificationList
        /// </summary>
        [DataMember(Name="accountIdentificationList", EmitDefaultValue=false)]
        public AccountFilterAccountIdentificationList AccountIdentificationList { get; set; }

        /// <summary>
        /// The number on the face of the check indicating the id of that check in a series. 
        /// </summary>
        /// <value>The number on the face of the check indicating the id of that check in a series. </value>
        [DataMember(Name="startCheckNumber", EmitDefaultValue=false)]
        public string StartCheckNumber { get; set; }

        /// <summary>
        /// The number on the face of the check indicating the id of that check in a series. 
        /// </summary>
        /// <value>The number on the face of the check indicating the id of that check in a series. </value>
        [DataMember(Name="endCheckNumber", EmitDefaultValue=false)]
        public string EndCheckNumber { get; set; }

    }
}
