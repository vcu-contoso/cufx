/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EligibilityRequirement 
    {
        /// <summary>
        /// Identifier for the type of the eligibility requirement. For most financial institutions, this might be a select employee group, a community identifier or other field of membership criteria identifier. 
        /// </summary>
        /// <value>Identifier for the type of the eligibility requirement. For most financial institutions, this might be a select employee group, a community identifier or other field of membership criteria identifier. </value>
        [DataMember(Name="requirementId", EmitDefaultValue=false)]
        public string RequirementId { get; set; }

        /// <summary>
        /// Description of the eligibility requirement. 
        /// </summary>
        /// <value>Description of the eligibility requirement. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AffinityBrandList
        /// </summary>
        [DataMember(Name="affinityBrandList", EmitDefaultValue=false)]
        public EligibilityRequirementAffinityBrandList AffinityBrandList { get; set; }

        /// <summary>
        /// Not present unless the member selects this eligibility requirement and there are additional actions required besides continuing with the application, only then will this tell the application what action should be requested.  It is up to the application provider to work with the financial institution to determine what the nextActionRequiredIds represent and to present that in the applicable language. For example, \&quot;Please go to the nearest branch to complete the application\&quot;, \&quot;Please login to complete your application\&quot;, or other instances of gathering additional information regarding their eligibility.  For instance, if this was a geographically based qualification, it might ask for zip code or street address, or if it is a business requirement, then it may ask for the business unit.  The answers to the additional qualification criteria would be saved in the eligibilityRequirementMet referenceDescription field. 
        /// </summary>
        /// <value>Not present unless the member selects this eligibility requirement and there are additional actions required besides continuing with the application, only then will this tell the application what action should be requested.  It is up to the application provider to work with the financial institution to determine what the nextActionRequiredIds represent and to present that in the applicable language. For example, \&quot;Please go to the nearest branch to complete the application\&quot;, \&quot;Please login to complete your application\&quot;, or other instances of gathering additional information regarding their eligibility.  For instance, if this was a geographically based qualification, it might ask for zip code or street address, or if it is a business requirement, then it may ask for the business unit.  The answers to the additional qualification criteria would be saved in the eligibilityRequirementMet referenceDescription field. </value>
        [DataMember(Name="nextActionRequiredId", EmitDefaultValue=true)]
        public int NextActionRequiredId { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
