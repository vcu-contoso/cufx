/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentSignature 
    {

        /// <summary>
        /// If the document has been signed, how it was signed. The document has been been sent or viewed online, but it has not been signed. The document has been viewed online and the person agreed to it electronically. The document has been viewed online and the person agreed to it electronically with a single click. The document has been viewed and the person agreed to it in writing (handwrote signature in person). 
        /// </summary>
        /// <value>If the document has been signed, how it was signed. The document has been been sent or viewed online, but it has not been signed. The document has been viewed online and the person agreed to it electronically. The document has been viewed online and the person agreed to it electronically with a single click. The document has been viewed and the person agreed to it in writing (handwrote signature in person). </value>
        [TypeConverter(typeof(CustomEnumConverter<DocumentSignatureTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DocumentSignatureTypeEnum
        {
            
            /// <summary>
            /// Enum UnsignedEnum for Unsigned
            /// </summary>
            [EnumMember(Value = "Unsigned")]
            UnsignedEnum = 1,
            
            /// <summary>
            /// Enum ElectronicSignatureEnum for ElectronicSignature
            /// </summary>
            [EnumMember(Value = "ElectronicSignature")]
            ElectronicSignatureEnum = 2,
            
            /// <summary>
            /// Enum SingleClickAcceptanceEnum for SingleClickAcceptance
            /// </summary>
            [EnumMember(Value = "SingleClickAcceptance")]
            SingleClickAcceptanceEnum = 3,
            
            /// <summary>
            /// Enum WetSignatureEnum for WetSignature
            /// </summary>
            [EnumMember(Value = "WetSignature")]
            WetSignatureEnum = 4
        }

        /// <summary>
        /// If the document has been signed, how it was signed. The document has been been sent or viewed online, but it has not been signed. The document has been viewed online and the person agreed to it electronically. The document has been viewed online and the person agreed to it electronically with a single click. The document has been viewed and the person agreed to it in writing (handwrote signature in person). 
        /// </summary>
        /// <value>If the document has been signed, how it was signed. The document has been been sent or viewed online, but it has not been signed. The document has been viewed online and the person agreed to it electronically. The document has been viewed online and the person agreed to it electronically with a single click. The document has been viewed and the person agreed to it in writing (handwrote signature in person). </value>
        [DataMember(Name="documentSignatureType", EmitDefaultValue=true)]
        public DocumentSignatureTypeEnum DocumentSignatureType { get; set; }

        /// <summary>
        /// Defines the location and/or purpose of this instance of the signature. This may be acknowledging the terms and conditions, initialing a location on the page, or final signature. 
        /// </summary>
        /// <value>Defines the location and/or purpose of this instance of the signature. This may be acknowledging the terms and conditions, initialing a location on the page, or final signature. </value>
        [DataMember(Name="signaturePurpose", EmitDefaultValue=false)]
        public string SignaturePurpose { get; set; }

        /// <summary>
        /// Gets or Sets SignatureArtifactId
        /// </summary>
        [DataMember(Name="signatureArtifactId", EmitDefaultValue=false)]
        public ArtifactArtifactId SignatureArtifactId { get; set; }

        /// <summary>
        /// Current status of the document, such as if its in the process of being sent, presented, signed, unsigned, etc.  The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Current status of the document, such as if its in the process of being sent, presented, signed, unsigned, etc.  The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="documentSignedDateTime", EmitDefaultValue=false)]
        public string DocumentSignedDateTime { get; set; }

        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="signaturePartyId", EmitDefaultValue=false)]
        public string SignaturePartyId { get; set; }

        /// <summary>
        /// IP Address string 
        /// </summary>
        /// <value>IP Address string </value>
        [DataMember(Name="signedWithIpAddress", EmitDefaultValue=false)]
        public string SignedWithIpAddress { get; set; }

        /// <summary>
        /// The digital hash was created using a mathematical algorithm (typically SHA-1 but it is up to the end points to determine) on the document at the time that it was electronically signed. 
        /// </summary>
        /// <value>The digital hash was created using a mathematical algorithm (typically SHA-1 but it is up to the end points to determine) on the document at the time that it was electronically signed. </value>
        [DataMember(Name="documentDigitalFingerprint", EmitDefaultValue=false)]
        public string DocumentDigitalFingerprint { get; set; }

        /// <summary>
        /// The mathematical algorithm used to create the digital hash (typically SHA-1 but it is up to the end points to determine). 
        /// </summary>
        /// <value>The mathematical algorithm used to create the digital hash (typically SHA-1 but it is up to the end points to determine). </value>
        [DataMember(Name="documentDigitalAlgorithm", EmitDefaultValue=false)]
        public string DocumentDigitalAlgorithm { get; set; }

        /// <summary>
        /// The users digital certificate, issued by a certificate authority, that was used at the time that the document was electronically signed. 
        /// </summary>
        /// <value>The users digital certificate, issued by a certificate authority, that was used at the time that the document was electronically signed. </value>
        [DataMember(Name="documentDigitalCertificate", EmitDefaultValue=false)]
        public string DocumentDigitalCertificate { get; set; }

        /// <summary>
        /// When electronically signed, this is the users public key, which is part of the users certificate that was used to create the digital signature. 
        /// </summary>
        /// <value>When electronically signed, this is the users public key, which is part of the users certificate that was used to create the digital signature. </value>
        [DataMember(Name="usersPublicKey", EmitDefaultValue=false)]
        public string UsersPublicKey { get; set; }

        /// <summary>
        /// This is the value that the user is presented with to confirm that they were able to view document. 
        /// </summary>
        /// <value>This is the value that the user is presented with to confirm that they were able to view document. </value>
        [DataMember(Name="viewedConfirmationValue", EmitDefaultValue=false)]
        public string ViewedConfirmationValue { get; set; }


        /// <summary>
        /// The value has been presented. The user has confirmed the value presented. The user attempted to confirm value, but user value did not match presented value. 
        /// </summary>
        /// <value>The value has been presented. The user has confirmed the value presented. The user attempted to confirm value, but user value did not match presented value. </value>
        [TypeConverter(typeof(CustomEnumConverter<ViewedConfirmationStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ViewedConfirmationStatusEnum
        {
            
            /// <summary>
            /// Enum PresentedEnum for Presented
            /// </summary>
            [EnumMember(Value = "Presented")]
            PresentedEnum = 1,
            
            /// <summary>
            /// Enum ConfirmedEnum for Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            ConfirmedEnum = 2,
            
            /// <summary>
            /// Enum FailedEnum for Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            FailedEnum = 3
        }

        /// <summary>
        /// The value has been presented. The user has confirmed the value presented. The user attempted to confirm value, but user value did not match presented value. 
        /// </summary>
        /// <value>The value has been presented. The user has confirmed the value presented. The user attempted to confirm value, but user value did not match presented value. </value>
        [DataMember(Name="viewedConfirmationStatus", EmitDefaultValue=true)]
        public ViewedConfirmationStatusEnum ViewedConfirmationStatus { get; set; }

    }
}
