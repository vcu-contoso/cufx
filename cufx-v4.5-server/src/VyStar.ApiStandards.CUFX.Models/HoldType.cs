/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
        /// <summary>
        /// Hold any amount for any purpose. Hold the entire amount of a check or a partial amount until the check clears. Hold the entire amount of a certified draft or a partial amount until the certified draft clears. Stop payment on a draft/check (written authorization from the member). Reserve funds for a preauthorized credit card purchase or for an ATM point of sale transaction. Hold funds pledged against a hold. Prevent posting an automated clearing house transaction (written authorization from the member). Stop payment on a draft (verbal authorization from the member). Prevent posting an automated clearing house transaction (verbal authorization from the member). Prevent posting an automated clearing house transaction for as long as the hold remains in the account. Hold funds when a merchant calls to verify that funds are available to cover a members check. Hold when fees cannot be collected due to insufficient funds. Hold on a preapproved hold draft for a zero-balance preapproved hold. Hold on a member draft used for bill payment until the draft posts to the account, or until the hold expires. Hold for unauthorized ACH transactions. Hold on an account that is being used for ACH origination. Hold on account when a Death Notification Entry (DNE) has been received. Hold on PIN-based transactions. Prevent posting ACH debits for member business shares. Place the entire amount of a wire transfer on hold until the outgoing wire is posted. The transaction or account is in a disputed status. 
        /// </summary>
        /// <value>Hold any amount for any purpose. Hold the entire amount of a check or a partial amount until the check clears. Hold the entire amount of a certified draft or a partial amount until the certified draft clears. Stop payment on a draft/check (written authorization from the member). Reserve funds for a preauthorized credit card purchase or for an ATM point of sale transaction. Hold funds pledged against a hold. Prevent posting an automated clearing house transaction (written authorization from the member). Stop payment on a draft (verbal authorization from the member). Prevent posting an automated clearing house transaction (verbal authorization from the member). Prevent posting an automated clearing house transaction for as long as the hold remains in the account. Hold funds when a merchant calls to verify that funds are available to cover a members check. Hold when fees cannot be collected due to insufficient funds. Hold on a preapproved hold draft for a zero-balance preapproved hold. Hold on a member draft used for bill payment until the draft posts to the account, or until the hold expires. Hold for unauthorized ACH transactions. Hold on an account that is being used for ACH origination. Hold on account when a Death Notification Entry (DNE) has been received. Hold on PIN-based transactions. Prevent posting ACH debits for member business shares. Place the entire amount of a wire transfer on hold until the outgoing wire is posted. The transaction or account is in a disputed status. </value>
        [TypeConverter(typeof(CustomEnumConverter<HoldType>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum HoldType
        {
            
            /// <summary>
            /// Enum GeneralPurposeEnum for GeneralPurpose
            /// </summary>
            [EnumMember(Value = "GeneralPurpose")]
            GeneralPurposeEnum = 1,
            
            /// <summary>
            /// Enum CheckHoldEnum for CheckHold
            /// </summary>
            [EnumMember(Value = "CheckHold")]
            CheckHoldEnum = 2,
            
            /// <summary>
            /// Enum CertifiedDraftEnum for CertifiedDraft
            /// </summary>
            [EnumMember(Value = "CertifiedDraft")]
            CertifiedDraftEnum = 3,
            
            /// <summary>
            /// Enum StopDraftEnum for StopDraft
            /// </summary>
            [EnumMember(Value = "StopDraft")]
            StopDraftEnum = 4,
            
            /// <summary>
            /// Enum SignatureAuthEnum for SignatureAuth
            /// </summary>
            [EnumMember(Value = "SignatureAuth")]
            SignatureAuthEnum = 5,
            
            /// <summary>
            /// Enum PledgeHoldEnum for PledgeHold
            /// </summary>
            [EnumMember(Value = "PledgeHold")]
            PledgeHoldEnum = 6,
            
            /// <summary>
            /// Enum StopACHEnum for StopACH
            /// </summary>
            [EnumMember(Value = "StopACH")]
            StopACHEnum = 7,
            
            /// <summary>
            /// Enum StopDraftVerbalEnum for StopDraftVerbal
            /// </summary>
            [EnumMember(Value = "StopDraftVerbal")]
            StopDraftVerbalEnum = 8,
            
            /// <summary>
            /// Enum StopACHVerbalEnum for StopACHVerbal
            /// </summary>
            [EnumMember(Value = "StopACHVerbal")]
            StopACHVerbalEnum = 9,
            
            /// <summary>
            /// Enum RevokeACHEnum for RevokeACH
            /// </summary>
            [EnumMember(Value = "RevokeACH")]
            RevokeACHEnum = 10,
            
            /// <summary>
            /// Enum MerchantVerificationEnum for MerchantVerification
            /// </summary>
            [EnumMember(Value = "MerchantVerification")]
            MerchantVerificationEnum = 11,
            
            /// <summary>
            /// Enum UncollectedFeeEnum for UncollectedFee
            /// </summary>
            [EnumMember(Value = "UncollectedFee")]
            UncollectedFeeEnum = 12,
            
            /// <summary>
            /// Enum HoldDraftEnum for HoldDraft
            /// </summary>
            [EnumMember(Value = "HoldDraft")]
            HoldDraftEnum = 13,
            
            /// <summary>
            /// Enum BillPaymentEnum for BillPayment
            /// </summary>
            [EnumMember(Value = "BillPayment")]
            BillPaymentEnum = 14,
            
            /// <summary>
            /// Enum UnauthorizedACHStopEnum for UnauthorizedACHStop
            /// </summary>
            [EnumMember(Value = "UnauthorizedACHStop")]
            UnauthorizedACHStopEnum = 15,
            
            /// <summary>
            /// Enum ACHOriginationEnum for ACHOrigination
            /// </summary>
            [EnumMember(Value = "ACHOrigination")]
            ACHOriginationEnum = 16,
            
            /// <summary>
            /// Enum ACHDNEEnum for ACHDNE
            /// </summary>
            [EnumMember(Value = "ACHDNE")]
            ACHDNEEnum = 17,
            
            /// <summary>
            /// Enum PinAuthEnum for PinAuth
            /// </summary>
            [EnumMember(Value = "PinAuth")]
            PinAuthEnum = 18,
            
            /// <summary>
            /// Enum BusinessBlockACHDebitEnum for BusinessBlockACHDebit
            /// </summary>
            [EnumMember(Value = "BusinessBlockACHDebit")]
            BusinessBlockACHDebitEnum = 19,
            
            /// <summary>
            /// Enum WireHoldEnum for WireHold
            /// </summary>
            [EnumMember(Value = "WireHold")]
            WireHoldEnum = 20,
            
            /// <summary>
            /// Enum DisputedEnum for Disputed
            /// </summary>
            [EnumMember(Value = "Disputed")]
            DisputedEnum = 21
        }
}
