/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details relating to a deposit account. 
    /// </summary>
    [DataContract]
    public partial class Deposit 
    {
        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="accountSubType", EmitDefaultValue=false)]
        public string AccountSubType { get; set; }

        /// <summary>
        /// The date that the account was opened. 
        /// </summary>
        /// <value>The date that the account was opened. </value>
        [DataMember(Name="openDate", EmitDefaultValue=false)]
        public DateTime OpenDate { get; set; }

        /// <summary>
        /// The date that the account was closed. 
        /// </summary>
        /// <value>The date that the account was closed. </value>
        [DataMember(Name="closeDate", EmitDefaultValue=false)]
        public DateTime CloseDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public AccountAccountStatus AccountStatus { get; set; }

        /// <summary>
        /// For use to support additional acount sub statuses not present in enumerations. 
        /// </summary>
        /// <value>For use to support additional acount sub statuses not present in enumerations. </value>
        [DataMember(Name="accountSubStatus", EmitDefaultValue=false)]
        public string AccountSubStatus { get; set; }

        /// <summary>
        /// The account number portion of a draft or line of credit MICR line. 
        /// </summary>
        /// <value>The account number portion of a draft or line of credit MICR line. </value>
        [DataMember(Name="micrAccountNumber", EmitDefaultValue=false)]
        public string MicrAccountNumber { get; set; }

        /// <summary>
        /// Routing number for the account. 
        /// </summary>
        /// <value>Routing number for the account. </value>
        [DataMember(Name="routingNumber", EmitDefaultValue=false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The account ID as a masked or obfuscated representation of the Account ID (accountId). This can be used for display or document generation purposes as a security precaution, or in cases where the accountId element has been encrypted or tokenized. 
        /// </summary>
        /// <value>The account ID as a masked or obfuscated representation of the Account ID (accountId). This can be used for display or document generation purposes as a security precaution, or in cases where the accountId element has been encrypted or tokenized. </value>
        [DataMember(Name="displayAccountId", EmitDefaultValue=false)]
        public string DisplayAccountId { get; set; }


        /// <summary>
        /// Whether the ID is actual, or simply reserved. 
        /// </summary>
        /// <value>Whether the ID is actual, or simply reserved. </value>
        [TypeConverter(typeof(CustomEnumConverter<IdTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IdTypeEnum
        {
            
            /// <summary>
            /// Enum ReservedEnum for Reserved
            /// </summary>
            [EnumMember(Value = "Reserved")]
            ReservedEnum = 1,
            
            /// <summary>
            /// Enum ActualEnum for Actual
            /// </summary>
            [EnumMember(Value = "Actual")]
            ActualEnum = 2
        }

        /// <summary>
        /// Whether the ID is actual, or simply reserved. 
        /// </summary>
        /// <value>Whether the ID is actual, or simply reserved. </value>
        [DataMember(Name="idType", EmitDefaultValue=true)]
        public IdTypeEnum IdType { get; set; }

        /// <summary>
        /// The account description is the textual representation of the account. This value is visible to the user and must be human-readable. 
        /// </summary>
        /// <value>The account description is the textual representation of the account. This value is visible to the user and must be human-readable. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. Deprecated - See accountSubType in AccountBase. - Planned removal in v5.0. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. Deprecated - See accountSubType in AccountBase. - Planned removal in v5.0. </value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// The date that Escheatment was applied to the account. 
        /// </summary>
        /// <value>The date that Escheatment was applied to the account. </value>
        [DataMember(Name="accountEscheatDate", EmitDefaultValue=false)]
        public DateTime AccountEscheatDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountEscheatAmount
        /// </summary>
        [DataMember(Name="accountEscheatAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount AccountEscheatAmount { get; set; }

        /// <summary>
        /// The date that the account was charged off. 
        /// </summary>
        /// <value>The date that the account was charged off. </value>
        [DataMember(Name="chargeOffDate", EmitDefaultValue=false)]
        public DateTime ChargeOffDate { get; set; }

        /// <summary>
        /// Gets or Sets ChargeOffAmount
        /// </summary>
        [DataMember(Name="chargeOffAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount ChargeOffAmount { get; set; }

        /// <summary>
        /// Description by the party or user that overrides the default description. 
        /// </summary>
        /// <value>Description by the party or user that overrides the default description. </value>
        [DataMember(Name="accountNickName", EmitDefaultValue=false)]
        public string AccountNickName { get; set; }

        /// <summary>
        /// Name or number identifying which branch owns the account. 
        /// </summary>
        /// <value>Name or number identifying which branch owns the account. </value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets ActualBalance
        /// </summary>
        [DataMember(Name="actualBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount ActualBalance { get; set; }

        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name="availableBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount AvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceAvailableBalance
        /// </summary>
        [DataMember(Name="cashAdvanceAvailableBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceAvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceBalance
        /// </summary>
        [DataMember(Name="cashAdvanceBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceBalance { get; set; }

        /// <summary>
        /// Gets or Sets CashAdvanceLimit
        /// </summary>
        [DataMember(Name="cashAdvanceLimit", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount CashAdvanceLimit { get; set; }

        /// <summary>
        /// Gets or Sets MinimumBalance
        /// </summary>
        [DataMember(Name="minimumBalance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumBalance { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountBankAddress
        /// </summary>
        [DataMember(Name="externalAccountBankAddress", EmitDefaultValue=false)]
        public AccountExternalAccountBankAddress ExternalAccountBankAddress { get; set; }

        /// <summary>
        /// SWIFTCode for wire transfer. 
        /// </summary>
        /// <value>SWIFTCode for wire transfer. </value>
        [DataMember(Name="externalAccountSWIFTCode", EmitDefaultValue=false)]
        public string ExternalAccountSWIFTCode { get; set; }

        /// <summary>
        /// IBAN of external institution, used for wire transfers.  This replaces the micrAccountNumber for certain financial institutions in foreign nations, and no routing or SWIFT code is necessary when an IBAN (and potentially bank code, below) is provided to identify the account. 
        /// </summary>
        /// <value>IBAN of external institution, used for wire transfers.  This replaces the micrAccountNumber for certain financial institutions in foreign nations, and no routing or SWIFT code is necessary when an IBAN (and potentially bank code, below) is provided to identify the account. </value>
        [DataMember(Name="externalAccountIBANCode", EmitDefaultValue=false)]
        public string ExternalAccountIBANCode { get; set; }

        /// <summary>
        /// Bank code, required (in addition to other identifiers) for institutions in certain foreign nations, used for wire transfers. 
        /// </summary>
        /// <value>Bank code, required (in addition to other identifiers) for institutions in certain foreign nations, used for wire transfers. </value>
        [DataMember(Name="externalAccountBankCode", EmitDefaultValue=false)]
        public string ExternalAccountBankCode { get; set; }

        /// <summary>
        /// True for an external account, false for an internal account. 
        /// </summary>
        /// <value>True for an external account, false for an internal account. </value>
        [DataMember(Name="externalAccountFlag", EmitDefaultValue=true)]
        public bool ExternalAccountFlag { get; set; }

        /// <summary>
        /// Default is false.  When user confirms microdeposit, this becomes true. 
        /// </summary>
        /// <value>Default is false.  When user confirms microdeposit, this becomes true. </value>
        [DataMember(Name="externalAccountVerified", EmitDefaultValue=true)]
        public bool ExternalAccountVerified { get; set; }

        /// <summary>
        /// True when transfers are allowed from external account. 
        /// </summary>
        /// <value>True when transfers are allowed from external account. </value>
        [DataMember(Name="externalTransferFrom", EmitDefaultValue=true)]
        public bool ExternalTransferFrom { get; set; }

        /// <summary>
        /// True when transfers are allowed to external account. 
        /// </summary>
        /// <value>True when transfers are allowed to external account. </value>
        [DataMember(Name="externalTransferTo", EmitDefaultValue=true)]
        public bool ExternalTransferTo { get; set; }

        /// <summary>
        /// True when transfers are allowed from this account. 
        /// </summary>
        /// <value>True when transfers are allowed from this account. </value>
        [DataMember(Name="transferFrom", EmitDefaultValue=true)]
        public bool TransferFrom { get; set; }

        /// <summary>
        /// True when transfers are allowed to this account. 
        /// </summary>
        /// <value>True when transfers are allowed to this account. </value>
        [DataMember(Name="transferTo", EmitDefaultValue=true)]
        public bool TransferTo { get; set; }


        /// <summary>
        /// Whether the rate type is fixed or variable based on some index. 
        /// </summary>
        /// <value>Whether the rate type is fixed or variable based on some index. </value>
        [TypeConverter(typeof(CustomEnumConverter<RateTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RateTypeEnum
        {
            
            /// <summary>
            /// Enum FixedEnum for Fixed
            /// </summary>
            [EnumMember(Value = "Fixed")]
            FixedEnum = 1,
            
            /// <summary>
            /// Enum VariableEnum for Variable
            /// </summary>
            [EnumMember(Value = "Variable")]
            VariableEnum = 2
        }

        /// <summary>
        /// Whether the rate type is fixed or variable based on some index. 
        /// </summary>
        /// <value>Whether the rate type is fixed or variable based on some index. </value>
        [DataMember(Name="rateType", EmitDefaultValue=true)]
        public RateTypeEnum RateType { get; set; }

        /// <summary>
        /// FI defined code that identifies the source of the application that created the account such as customer request, cross sale, counter offer, promo, etc. 
        /// </summary>
        /// <value>FI defined code that identifies the source of the application that created the account such as customer request, cross sale, counter offer, promo, etc. </value>
        [DataMember(Name="sourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Gets or Sets PartyIdList
        /// </summary>
        [DataMember(Name="partyIdList", EmitDefaultValue=false)]
        public AccountPartyIdList PartyIdList { get; set; }

        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Gets or Sets AccountNoteList
        /// </summary>
        [DataMember(Name="accountNoteList", EmitDefaultValue=false)]
        public AccountAccountNoteList AccountNoteList { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public AccountMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets TransactionList
        /// </summary>
        [DataMember(Name="transactionList", EmitDefaultValue=false)]
        public AccountTransactionList TransactionList { get; set; }


        /// <summary>
        /// The time interval for posting interest to the account. 
        /// </summary>
        /// <value>The time interval for posting interest to the account. </value>
        [TypeConverter(typeof(CustomEnumConverter<InterestPostingFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InterestPostingFrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// The time interval for posting interest to the account. 
        /// </summary>
        /// <value>The time interval for posting interest to the account. </value>
        [DataMember(Name="interestPostingFrequency", EmitDefaultValue=true)]
        public InterestPostingFrequencyEnum InterestPostingFrequency { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingsInfoList
        /// </summary>
        [DataMember(Name="withholdingsInfoList", EmitDefaultValue=false)]
        public AccountWithholdingsInfoList WithholdingsInfoList { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="overDraftProtectionAccountId", EmitDefaultValue=false)]
        public string OverDraftProtectionAccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<OverDraftProtectionAccountTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OverDraftProtectionAccountTypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="overDraftProtectionAccountType", EmitDefaultValue=true)]
        public OverDraftProtectionAccountTypeEnum OverDraftProtectionAccountType { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="overDraftProtectionAccountSubType", EmitDefaultValue=false)]
        public string OverDraftProtectionAccountSubType { get; set; }

        /// <summary>
        /// Gets or Sets DepositPartyList
        /// </summary>
        [DataMember(Name="depositPartyList", EmitDefaultValue=false)]
        public DepositDepositPartyList DepositPartyList { get; set; }

        /// <summary>
        /// Date on which the bump rate becomes effective. 
        /// </summary>
        /// <value>Date on which the bump rate becomes effective. </value>
        [DataMember(Name="bumpEffectiveDate", EmitDefaultValue=false)]
        public DateTime BumpEffectiveDate { get; set; }

        /// <summary>
        /// Date on which the bump rate expires. 
        /// </summary>
        /// <value>Date on which the bump rate expires. </value>
        [DataMember(Name="bumpExpirationDate", EmitDefaultValue=false)]
        public DateTime BumpExpirationDate { get; set; }

        /// <summary>
        /// The percentage to add to the normal rate during dividend calculations. 
        /// </summary>
        /// <value>The percentage to add to the normal rate during dividend calculations. </value>
        [DataMember(Name="bumpRate", EmitDefaultValue=true)]
        public decimal BumpRate { get; set; }


        /// <summary>
        /// Provides types for posting dividends earned on the account. Dividends earned should be posted to the account. Dividends earned should be sent by check to the party. Dividends earned should be transferred to another account. Dividends earned should not be posted. 
        /// </summary>
        /// <value>Provides types for posting dividends earned on the account. Dividends earned should be posted to the account. Dividends earned should be sent by check to the party. Dividends earned should be transferred to another account. Dividends earned should not be posted. </value>
        [TypeConverter(typeof(CustomEnumConverter<DividendPostCodeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DividendPostCodeEnum
        {
            
            /// <summary>
            /// Enum ToAccountEnum for ToAccount
            /// </summary>
            [EnumMember(Value = "ToAccount")]
            ToAccountEnum = 1,
            
            /// <summary>
            /// Enum ByCheckEnum for ByCheck
            /// </summary>
            [EnumMember(Value = "ByCheck")]
            ByCheckEnum = 2,
            
            /// <summary>
            /// Enum TransferEnum for Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            TransferEnum = 3,
            
            /// <summary>
            /// Enum ForfeitEnum for Forfeit
            /// </summary>
            [EnumMember(Value = "Forfeit")]
            ForfeitEnum = 4
        }

        /// <summary>
        /// Provides types for posting dividends earned on the account. Dividends earned should be posted to the account. Dividends earned should be sent by check to the party. Dividends earned should be transferred to another account. Dividends earned should not be posted. 
        /// </summary>
        /// <value>Provides types for posting dividends earned on the account. Dividends earned should be posted to the account. Dividends earned should be sent by check to the party. Dividends earned should be transferred to another account. Dividends earned should not be posted. </value>
        [DataMember(Name="dividendPostCode", EmitDefaultValue=true)]
        public DividendPostCodeEnum DividendPostCode { get; set; }

        /// <summary>
        /// The percentage rate used to calculate dividends for this account. The dividend type must be set to allow for a custom rate. 
        /// </summary>
        /// <value>The percentage rate used to calculate dividends for this account. The dividend type must be set to allow for a custom rate. </value>
        [DataMember(Name="dividendRate", EmitDefaultValue=true)]
        public decimal DividendRate { get; set; }

        /// <summary>
        /// Annual percentage yield - the percentage rate reflecting the total amount of interest paid on an account, based on the interest rate and the frequency of compounding for a 365-day period. As example 3.125% is represented as 0.03125 
        /// </summary>
        /// <value>Annual percentage yield - the percentage rate reflecting the total amount of interest paid on an account, based on the interest rate and the frequency of compounding for a 365-day period. As example 3.125% is represented as 0.03125 </value>
        [DataMember(Name="annualPercentageYield", EmitDefaultValue=true)]
        public decimal AnnualPercentageYield { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="dividendTransferAccountId", EmitDefaultValue=false)]
        public string DividendTransferAccountId { get; set; }

        /// <summary>
        /// Name or number identifying the type of dividend calculation performed for this account. 
        /// </summary>
        /// <value>Name or number identifying the type of dividend calculation performed for this account. </value>
        [DataMember(Name="dividendType", EmitDefaultValue=false)]
        public string DividendType { get; set; }

        /// <summary>
        /// Defines IRS reporting requirements on this account.  Used to identify special requirements such as IRA or HSA. 
        /// </summary>
        /// <value>Defines IRS reporting requirements on this account.  Used to identify special requirements such as IRA or HSA. </value>
        [DataMember(Name="irsCode", EmitDefaultValue=false)]
        public string IrsCode { get; set; }


        /// <summary>
        /// Provides types for posting the account balance upon maturity. Account renews upon maturity. Account balance should be sent by check to the party. Account balance should be transferred to another account. Funds should remain in the account until transferred manually. Transfers part of the funds to another account at maturity, and then renew account with the remainder of the funds. 
        /// </summary>
        /// <value>Provides types for posting the account balance upon maturity. Account renews upon maturity. Account balance should be sent by check to the party. Account balance should be transferred to another account. Funds should remain in the account until transferred manually. Transfers part of the funds to another account at maturity, and then renew account with the remainder of the funds. </value>
        [TypeConverter(typeof(CustomEnumConverter<MaturityPostCodeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MaturityPostCodeEnum
        {
            
            /// <summary>
            /// Enum RenewEnum for Renew
            /// </summary>
            [EnumMember(Value = "Renew")]
            RenewEnum = 1,
            
            /// <summary>
            /// Enum ByCheckEnum for ByCheck
            /// </summary>
            [EnumMember(Value = "ByCheck")]
            ByCheckEnum = 2,
            
            /// <summary>
            /// Enum TransferEnum for Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            TransferEnum = 3,
            
            /// <summary>
            /// Enum SuspendEnum for Suspend
            /// </summary>
            [EnumMember(Value = "Suspend")]
            SuspendEnum = 4,
            
            /// <summary>
            /// Enum TransferAndRenewEnum for TransferAndRenew
            /// </summary>
            [EnumMember(Value = "TransferAndRenew")]
            TransferAndRenewEnum = 5
        }

        /// <summary>
        /// Provides types for posting the account balance upon maturity. Account renews upon maturity. Account balance should be sent by check to the party. Account balance should be transferred to another account. Funds should remain in the account until transferred manually. Transfers part of the funds to another account at maturity, and then renew account with the remainder of the funds. 
        /// </summary>
        /// <value>Provides types for posting the account balance upon maturity. Account renews upon maturity. Account balance should be sent by check to the party. Account balance should be transferred to another account. Funds should remain in the account until transferred manually. Transfers part of the funds to another account at maturity, and then renew account with the remainder of the funds. </value>
        [DataMember(Name="maturityPostCode", EmitDefaultValue=true)]
        public MaturityPostCodeEnum MaturityPostCode { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="maturityTransferAccountId", EmitDefaultValue=false)]
        public string MaturityTransferAccountId { get; set; }

        /// <summary>
        /// Gets or Sets MinimumDeposit
        /// </summary>
        [DataMember(Name="minimumDeposit", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumDeposit { get; set; }

        /// <summary>
        /// Gets or Sets MinimumWithdrawal
        /// </summary>
        [DataMember(Name="minimumWithdrawal", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MinimumWithdrawal { get; set; }

        /// <summary>
        /// Gets or Sets OverdraftTolerance
        /// </summary>
        [DataMember(Name="overdraftTolerance", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount OverdraftTolerance { get; set; }

        /// <summary>
        /// Gets or Sets MaturityTransferAmount
        /// </summary>
        [DataMember(Name="maturityTransferAmount", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount MaturityTransferAmount { get; set; }

        /// <summary>
        /// The percentage of the amount to transfer out upon maturity. Default is 100%. 
        /// </summary>
        /// <value>The percentage of the amount to transfer out upon maturity. Default is 100%. </value>
        [DataMember(Name="maturityTransferPercent", EmitDefaultValue=true)]
        public decimal MaturityTransferPercent { get; set; }

        /// <summary>
        /// The reason that the deposit service charge is waived. Population is determined by the financial institution. 
        /// </summary>
        /// <value>The reason that the deposit service charge is waived. Population is determined by the financial institution. </value>
        [DataMember(Name="serviceChargeWaivedReason", EmitDefaultValue=false)]
        public string ServiceChargeWaivedReason { get; set; }

    }
}
