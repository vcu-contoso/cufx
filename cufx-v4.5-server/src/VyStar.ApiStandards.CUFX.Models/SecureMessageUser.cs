/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// Details related to a secure message receiver or sender. Note that user:User contains the necessary information for identifying internal users, system accounts, external users and external fiUserId accounts. If this information is not present, the party ID, account, relationship, etc. may be the \&quot;receiver.\&quot; If both the user info is available and the info is provided below, then its an AND condition. e.g. The message was sent to fiUserId&#x3D;cufxuser, partyid&#x3D;123 on account&#x3D;12334. 
    /// </summary>
    [DataContract]
    public partial class SecureMessageUser 
    {
        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The processor session ID is a unique identifier for the user, based on the connection to the processor or core system for the message being performed. processorSessionId is depreciated in favor of sessionId in the MessageContext. 
        /// </summary>
        /// <value>The processor session ID is a unique identifier for the user, based on the connection to the processor or core system for the message being performed. processorSessionId is depreciated in favor of sessionId in the MessageContext. </value>
        [DataMember(Name="processorSessionId", EmitDefaultValue=false)]
        public string ProcessorSessionId { get; set; }


        /// <summary>
        /// The user ID is an employee ID for logging into the network. The user ID is a vendor employee ID for logging into the network. The user ID is essentially unknown, i.e. no credentials are required. Business rules will have been applied to either prevent or allow anonymous access to the service in question. The credential group identifier of a Financial Institution party that was used to access the service.  See credential group schema. The system user identifier of a system account that was used to access the service. A security token which was created from an identity provider. The user identification was not one of the above formats. 
        /// </summary>
        /// <value>The user ID is an employee ID for logging into the network. The user ID is a vendor employee ID for logging into the network. The user ID is essentially unknown, i.e. no credentials are required. Business rules will have been applied to either prevent or allow anonymous access to the service in question. The credential group identifier of a Financial Institution party that was used to access the service.  See credential group schema. The system user identifier of a system account that was used to access the service. A security token which was created from an identity provider. The user identification was not one of the above formats. </value>
        [TypeConverter(typeof(CustomEnumConverter<UserIdTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum UserIdTypeEnum
        {
            
            /// <summary>
            /// Enum EmployeeIdEnum for EmployeeId
            /// </summary>
            [EnumMember(Value = "EmployeeId")]
            EmployeeIdEnum = 1,
            
            /// <summary>
            /// Enum VendorEmployeeIdEnum for VendorEmployeeId
            /// </summary>
            [EnumMember(Value = "VendorEmployeeId")]
            VendorEmployeeIdEnum = 2,
            
            /// <summary>
            /// Enum AnonymousEnum for Anonymous
            /// </summary>
            [EnumMember(Value = "Anonymous")]
            AnonymousEnum = 3,
            
            /// <summary>
            /// Enum FIUserIdEnum for FIUserId
            /// </summary>
            [EnumMember(Value = "FIUserId")]
            FIUserIdEnum = 4,
            
            /// <summary>
            /// Enum SystemAccountIdEnum for SystemAccountId
            /// </summary>
            [EnumMember(Value = "SystemAccountId")]
            SystemAccountIdEnum = 5,
            
            /// <summary>
            /// Enum SecurityTokenEnum for SecurityToken
            /// </summary>
            [EnumMember(Value = "SecurityToken")]
            SecurityTokenEnum = 6,
            
            /// <summary>
            /// Enum CustomEnum for Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            CustomEnum = 7
        }

        /// <summary>
        /// The user ID is an employee ID for logging into the network. The user ID is a vendor employee ID for logging into the network. The user ID is essentially unknown, i.e. no credentials are required. Business rules will have been applied to either prevent or allow anonymous access to the service in question. The credential group identifier of a Financial Institution party that was used to access the service.  See credential group schema. The system user identifier of a system account that was used to access the service. A security token which was created from an identity provider. The user identification was not one of the above formats. 
        /// </summary>
        /// <value>The user ID is an employee ID for logging into the network. The user ID is a vendor employee ID for logging into the network. The user ID is essentially unknown, i.e. no credentials are required. Business rules will have been applied to either prevent or allow anonymous access to the service in question. The credential group identifier of a Financial Institution party that was used to access the service.  See credential group schema. The system user identifier of a system account that was used to access the service. A security token which was created from an identity provider. The user identification was not one of the above formats. </value>
        [DataMember(Name="userIdType", EmitDefaultValue=true)]
        public UserIdTypeEnum UserIdType { get; set; }

        /// <summary>
        /// The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The party ID is a persistent and unique identifier for the party not related to the accounts they own but tied to that person or organization. It should be unique for all parties across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The card ID is a persistent and unique identifier for the card. It must be unique for all users across the institution and remain the same over the life of the card. The card ID should not be the same as the card number embossed on the card. 
        /// </summary>
        /// <value>The card ID is a persistent and unique identifier for the card. It must be unique for all users across the institution and remain the same over the life of the card. The card ID should not be the same as the card number embossed on the card. </value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

    }
}
