/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
        /// <summary>
        /// Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. 
        /// </summary>
        /// <value>Type of secure message or secure message template, such as Product Offer, Notice, etc. Contains information about an alert due to an event that occurred. The party requested an alert for when this event occurs. Contains general information about a product or service. Contains a legal notice to the party(ies) that is required to be sent when an event happens on their associated accounts. Contains a product offering which may include confidential information. Contains information about a meeting request. Contains information on current or new services.  May contain information about the next steps that the FI is executing or that the party is supposed to perform. Documents contained within this type of message require an electronic or wet signature. This value can be used when no other statuses relate to the particular secure message. What the secure message is can be found using the secure message subject line. </value>
        [TypeConverter(typeof(CustomEnumConverter<SecureMessageType>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SecureMessageType
        {
            
            /// <summary>
            /// Enum AlertEnum for Alert
            /// </summary>
            [EnumMember(Value = "Alert")]
            AlertEnum = 1,
            
            /// <summary>
            /// Enum GeneralMessageEnum for GeneralMessage
            /// </summary>
            [EnumMember(Value = "GeneralMessage")]
            GeneralMessageEnum = 2,
            
            /// <summary>
            /// Enum NoticeEnum for Notice
            /// </summary>
            [EnumMember(Value = "Notice")]
            NoticeEnum = 3,
            
            /// <summary>
            /// Enum ProductOfferingEnum for ProductOffering
            /// </summary>
            [EnumMember(Value = "ProductOffering")]
            ProductOfferingEnum = 4,
            
            /// <summary>
            /// Enum ScheduleMeetingEnum for ScheduleMeeting
            /// </summary>
            [EnumMember(Value = "ScheduleMeeting")]
            ScheduleMeetingEnum = 5,
            
            /// <summary>
            /// Enum ServiceUpdateEnum for ServiceUpdate
            /// </summary>
            [EnumMember(Value = "ServiceUpdate")]
            ServiceUpdateEnum = 6,
            
            /// <summary>
            /// Enum SignatureRequiredEnum for SignatureRequired
            /// </summary>
            [EnumMember(Value = "SignatureRequired")]
            SignatureRequiredEnum = 7,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 8
        }
}
