/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InvestmentHolding 
    {
        /// <summary>
        /// The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. 
        /// </summary>
        /// <value>The account ID is a persistent and unique identifier for the account. It must be unique for all users across the institution and remain the same over the life of the account. </value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }


        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [TypeConverter(typeof(CustomEnumConverter<AccountTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum CheckingEnum for Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            CheckingEnum = 1,
            
            /// <summary>
            /// Enum SavingsEnum for Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            SavingsEnum = 2,
            
            /// <summary>
            /// Enum LoanEnum for Loan
            /// </summary>
            [EnumMember(Value = "Loan")]
            LoanEnum = 3,
            
            /// <summary>
            /// Enum CreditCardEnum for CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCardEnum = 4,
            
            /// <summary>
            /// Enum LineOfCreditEnum for LineOfCredit
            /// </summary>
            [EnumMember(Value = "LineOfCredit")]
            LineOfCreditEnum = 5,
            
            /// <summary>
            /// Enum MortgageEnum for Mortgage
            /// </summary>
            [EnumMember(Value = "Mortgage")]
            MortgageEnum = 6,
            
            /// <summary>
            /// Enum InvestmentEnum for Investment
            /// </summary>
            [EnumMember(Value = "Investment")]
            InvestmentEnum = 7,
            
            /// <summary>
            /// Enum PrePaidCardEnum for PrePaidCard
            /// </summary>
            [EnumMember(Value = "PrePaidCard")]
            PrePaidCardEnum = 8,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 9,
            
            /// <summary>
            /// Enum InstallmentEnum for Installment
            /// </summary>
            [EnumMember(Value = "Installment")]
            InstallmentEnum = 10,
            
            /// <summary>
            /// Enum CommercialLoanEnum for CommercialLoan
            /// </summary>
            [EnumMember(Value = "CommercialLoan")]
            CommercialLoanEnum = 11,
            
            /// <summary>
            /// Enum CommercialLineOfCreditEnum for CommercialLineOfCredit
            /// </summary>
            [EnumMember(Value = "CommercialLineOfCredit")]
            CommercialLineOfCreditEnum = 12,
            
            /// <summary>
            /// Enum GeneralLedgerEnum for GeneralLedger
            /// </summary>
            [EnumMember(Value = "GeneralLedger")]
            GeneralLedgerEnum = 13,
            
            /// <summary>
            /// Enum OtherLoanEnum for OtherLoan
            /// </summary>
            [EnumMember(Value = "OtherLoan")]
            OtherLoanEnum = 14
        }

        /// <summary>
        /// Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. 
        /// </summary>
        /// <value>Checking account, i.e., checks can be written against the account. Money market accounts can be included here or in money markets.  Its up to the institution. Savings and club accounts.  This can optionally include CDs, but its up to the institution. Auto loans, etc. Loans that are NOT lines of credit or credit cards. Loan behind the credit card.  Note the actual card information in the card object. Loan that is a line of credit but NOT a credit card. Loan that is made in exchange for taking title of property. Investment accounts such as brokerage and this can optionally include CDs and/or money markets, but its up to the institution. This account is a special type of checking account connected to a pre-paid card. Other account type. Loan that is made in installments. Loan is typically unsecured. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Installment. Loan that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of Commercial. Line of Credit that is a made to a business organization. This enumeration is considered deprecated. Recommend using account type Loan and subAccount of CommercialLineOfCredit. A general ledger account of the financial institution. A loan account type that has not been prevously defined. This enumeration is considered deprecated. Recommend using account type loan and subAccount of OtherLoan. </value>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public AccountTypeEnum AccountType { get; set; }

        /// <summary>
        /// The account subtype identifies the specific account type that the back end system will recognize. 
        /// </summary>
        /// <value>The account subtype identifies the specific account type that the back end system will recognize. </value>
        [DataMember(Name="accountSubType", EmitDefaultValue=false)]
        public string AccountSubType { get; set; }

        /// <summary>
        /// The holding ID is a persistent and unique identifier for the investment holding. 
        /// </summary>
        /// <value>The holding ID is a persistent and unique identifier for the investment holding. </value>
        [DataMember(Name="holdingID", EmitDefaultValue=false)]
        public string HoldingID { get; set; }

        /// <summary>
        /// Committee on Uniform Securites Identification Procedures (CUSIP) number of the holding. 
        /// </summary>
        /// <value>Committee on Uniform Securites Identification Procedures (CUSIP) number of the holding. </value>
        [DataMember(Name="holdingCusipNumber", EmitDefaultValue=false)]
        public string HoldingCusipNumber { get; set; }

        /// <summary>
        /// The date/time stamp of the evaluation of the investment or security. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date/time stamp of the evaluation of the investment or security. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingAsOfDateTime", EmitDefaultValue=false)]
        public string HoldingAsOfDateTime { get; set; }


        /// <summary>
        /// Real Estate Investment Trust. Registered Retirement Income Fund. Registered Retirement Savings Plan. Tax Free Savings Account. 
        /// </summary>
        /// <value>Real Estate Investment Trust. Registered Retirement Income Fund. Registered Retirement Savings Plan. Tax Free Savings Account. </value>
        [TypeConverter(typeof(CustomEnumConverter<HoldingTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum HoldingTypeEnum
        {
            
            /// <summary>
            /// Enum AssetEnum for Asset
            /// </summary>
            [EnumMember(Value = "Asset")]
            AssetEnum = 1,
            
            /// <summary>
            /// Enum BondEnum for Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            BondEnum = 2,
            
            /// <summary>
            /// Enum CertificateOfDepositEnum for Certificate of Deposit
            /// </summary>
            [EnumMember(Value = "Certificate of Deposit")]
            CertificateOfDepositEnum = 3,
            
            /// <summary>
            /// Enum ExchangeTradedFundEnum for Exchange-Traded Fund
            /// </summary>
            [EnumMember(Value = "Exchange-Traded Fund")]
            ExchangeTradedFundEnum = 4,
            
            /// <summary>
            /// Enum InsuranceEnum for Insurance
            /// </summary>
            [EnumMember(Value = "Insurance")]
            InsuranceEnum = 5,
            
            /// <summary>
            /// Enum IRATraditionalEnum for IRA Traditional
            /// </summary>
            [EnumMember(Value = "IRA Traditional")]
            IRATraditionalEnum = 6,
            
            /// <summary>
            /// Enum IRARothEnum for IRA Roth
            /// </summary>
            [EnumMember(Value = "IRA Roth")]
            IRARothEnum = 7,
            
            /// <summary>
            /// Enum IRASEPEnum for IRA SEP
            /// </summary>
            [EnumMember(Value = "IRA SEP")]
            IRASEPEnum = 8,
            
            /// <summary>
            /// Enum MoneyMarketAccountEnum for Money market account
            /// </summary>
            [EnumMember(Value = "Money market account")]
            MoneyMarketAccountEnum = 9,
            
            /// <summary>
            /// Enum MutualFundEnum for Mutual fund
            /// </summary>
            [EnumMember(Value = "Mutual fund")]
            MutualFundEnum = 10,
            
            /// <summary>
            /// Enum RealEstateEnum for Real Estate
            /// </summary>
            [EnumMember(Value = "Real Estate")]
            RealEstateEnum = 11,
            
            /// <summary>
            /// Enum REITEnum for REIT
            /// </summary>
            [EnumMember(Value = "REIT")]
            REITEnum = 12,
            
            /// <summary>
            /// Enum StockEnum for Stock
            /// </summary>
            [EnumMember(Value = "Stock")]
            StockEnum = 13,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 14,
            
            /// <summary>
            /// Enum RRIFEnum for RRIF
            /// </summary>
            [EnumMember(Value = "RRIF")]
            RRIFEnum = 15,
            
            /// <summary>
            /// Enum RRSPEnum for RRSP
            /// </summary>
            [EnumMember(Value = "RRSP")]
            RRSPEnum = 16,
            
            /// <summary>
            /// Enum TFSAEnum for TFSA
            /// </summary>
            [EnumMember(Value = "TFSA")]
            TFSAEnum = 17
        }

        /// <summary>
        /// Real Estate Investment Trust. Registered Retirement Income Fund. Registered Retirement Savings Plan. Tax Free Savings Account. 
        /// </summary>
        /// <value>Real Estate Investment Trust. Registered Retirement Income Fund. Registered Retirement Savings Plan. Tax Free Savings Account. </value>
        [DataMember(Name="holdingType", EmitDefaultValue=true)]
        public HoldingTypeEnum HoldingType { get; set; }

        /// <summary>
        /// The description of the holding detail 
        /// </summary>
        /// <value>The description of the holding detail </value>
        [DataMember(Name="holdingDescription", EmitDefaultValue=false)]
        public string HoldingDescription { get; set; }

        /// <summary>
        /// The quantity of shares held. 
        /// </summary>
        /// <value>The quantity of shares held. </value>
        [DataMember(Name="holdingQuantity", EmitDefaultValue=true)]
        public decimal HoldingQuantity { get; set; }

        /// <summary>
        /// Gets or Sets HoldingPrice
        /// </summary>
        [DataMember(Name="holdingPrice", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount HoldingPrice { get; set; }

        /// <summary>
        /// The date/time of holding price capture. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>The date/time of holding price capture. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingPriceDateTime", EmitDefaultValue=false)]
        public string HoldingPriceDateTime { get; set; }

        /// <summary>
        /// The stock symbol of the the holding. 
        /// </summary>
        /// <value>The stock symbol of the the holding. </value>
        [DataMember(Name="holdingStockSymbol", EmitDefaultValue=false)]
        public string HoldingStockSymbol { get; set; }

        /// <summary>
        /// Gets or Sets HoldingTotalValue
        /// </summary>
        [DataMember(Name="holdingTotalValue", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount HoldingTotalValue { get; set; }

        /// <summary>
        /// Holding Yield. 
        /// </summary>
        /// <value>Holding Yield. </value>
        [DataMember(Name="holdingYield", EmitDefaultValue=true)]
        public decimal HoldingYield { get; set; }

        /// <summary>
        /// Holding Yield as of date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Holding Yield as of date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingYieldAsOfDate", EmitDefaultValue=false)]
        public string HoldingYieldAsOfDate { get; set; }

        /// <summary>
        /// Asset class of the holding. Examples are Equities, Fixed Income, Cash. 
        /// </summary>
        /// <value>Asset class of the holding. Examples are Equities, Fixed Income, Cash. </value>
        [DataMember(Name="holdingAssetClass", EmitDefaultValue=false)]
        public string HoldingAssetClass { get; set; }

        /// <summary>
        /// Bond class of the holding. 
        /// </summary>
        /// <value>Bond class of the holding. </value>
        [DataMember(Name="holdingBondClass", EmitDefaultValue=false)]
        public string HoldingBondClass { get; set; }

        /// <summary>
        /// Bond type of the holding. 
        /// </summary>
        /// <value>Bond type of the holding. </value>
        [DataMember(Name="holdingBondType", EmitDefaultValue=false)]
        public string HoldingBondType { get; set; }

        /// <summary>
        /// Moody rating of the holding. 
        /// </summary>
        /// <value>Moody rating of the holding. </value>
        [DataMember(Name="holdingMoodyRating", EmitDefaultValue=false)]
        public string HoldingMoodyRating { get; set; }

        /// <summary>
        /// Standard and Poors rating of the holding. 
        /// </summary>
        /// <value>Standard and Poors rating of the holding. </value>
        [DataMember(Name="holdingStandardAndPoorsRating", EmitDefaultValue=false)]
        public string HoldingStandardAndPoorsRating { get; set; }

        /// <summary>
        /// Gets or Sets HoldingParValue
        /// </summary>
        [DataMember(Name="holdingParValue", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount HoldingParValue { get; set; }

        /// <summary>
        /// Coupon rate of the holding. 
        /// </summary>
        /// <value>Coupon rate of the holding. </value>
        [DataMember(Name="holdingCouponRate", EmitDefaultValue=true)]
        public decimal HoldingCouponRate { get; set; }


        /// <summary>
        /// Coupon frequency of the holding. OneTime: one time usage at any other point than at maturity. AtMaturity: one time usage at maturity. 
        /// </summary>
        /// <value>Coupon frequency of the holding. OneTime: one time usage at any other point than at maturity. AtMaturity: one time usage at maturity. </value>
        [TypeConverter(typeof(CustomEnumConverter<HoldingCouponFrequencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum HoldingCouponFrequencyEnum
        {
            
            /// <summary>
            /// Enum AmortizedScheduleEnum for AmortizedSchedule
            /// </summary>
            [EnumMember(Value = "AmortizedSchedule")]
            AmortizedScheduleEnum = 1,
            
            /// <summary>
            /// Enum AnnualEnum for Annual
            /// </summary>
            [EnumMember(Value = "Annual")]
            AnnualEnum = 2,
            
            /// <summary>
            /// Enum AtMaturityEnum for AtMaturity
            /// </summary>
            [EnumMember(Value = "AtMaturity")]
            AtMaturityEnum = 3,
            
            /// <summary>
            /// Enum BimonthlyEnum for Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            BimonthlyEnum = 4,
            
            /// <summary>
            /// Enum BiweeklyEnum for Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            BiweeklyEnum = 5,
            
            /// <summary>
            /// Enum BiweeklySkipFirstEnum for BiweeklySkipFirst
            /// </summary>
            [EnumMember(Value = "BiweeklySkipFirst")]
            BiweeklySkipFirstEnum = 6,
            
            /// <summary>
            /// Enum BiweeklySkipLastEnum for BiweeklySkipLast
            /// </summary>
            [EnumMember(Value = "BiweeklySkipLast")]
            BiweeklySkipLastEnum = 7,
            
            /// <summary>
            /// Enum DailyEnum for Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            DailyEnum = 8,
            
            /// <summary>
            /// Enum EventTriggerEnum for EventTrigger
            /// </summary>
            [EnumMember(Value = "EventTrigger")]
            EventTriggerEnum = 9,
            
            /// <summary>
            /// Enum HourlyEnum for Hourly
            /// </summary>
            [EnumMember(Value = "Hourly")]
            HourlyEnum = 10,
            
            /// <summary>
            /// Enum ImmediateEnum for Immediate
            /// </summary>
            [EnumMember(Value = "Immediate")]
            ImmediateEnum = 11,
            
            /// <summary>
            /// Enum MonthlyEnum for Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            MonthlyEnum = 12,
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 13,
            
            /// <summary>
            /// Enum OneTimeEnum for OneTime
            /// </summary>
            [EnumMember(Value = "OneTime")]
            OneTimeEnum = 14,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 15,
            
            /// <summary>
            /// Enum PerUseEnum for PerUse
            /// </summary>
            [EnumMember(Value = "PerUse")]
            PerUseEnum = 16,
            
            /// <summary>
            /// Enum QuarterlyEnum for Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            QuarterlyEnum = 17,
            
            /// <summary>
            /// Enum SemiAnnualEnum for SemiAnnual
            /// </summary>
            [EnumMember(Value = "SemiAnnual")]
            SemiAnnualEnum = 18,
            
            /// <summary>
            /// Enum SemiMonthlyEnum for SemiMonthly
            /// </summary>
            [EnumMember(Value = "SemiMonthly")]
            SemiMonthlyEnum = 19,
            
            /// <summary>
            /// Enum TriannualEnum for Triannual
            /// </summary>
            [EnumMember(Value = "Triannual")]
            TriannualEnum = 20,
            
            /// <summary>
            /// Enum WeeklyEnum for Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            WeeklyEnum = 21,
            
            /// <summary>
            /// Enum WeeklySkipFirstEnum for WeeklySkipFirst
            /// </summary>
            [EnumMember(Value = "WeeklySkipFirst")]
            WeeklySkipFirstEnum = 22,
            
            /// <summary>
            /// Enum WeeklySkipLastEnum for WeeklySkipLast
            /// </summary>
            [EnumMember(Value = "WeeklySkipLast")]
            WeeklySkipLastEnum = 23,
            
            /// <summary>
            /// Enum XDaysEnum for XDays
            /// </summary>
            [EnumMember(Value = "XDays")]
            XDaysEnum = 24,
            
            /// <summary>
            /// Enum XMonthsEnum for XMonths
            /// </summary>
            [EnumMember(Value = "XMonths")]
            XMonthsEnum = 25,
            
            /// <summary>
            /// Enum XYearsEnum for XYears
            /// </summary>
            [EnumMember(Value = "XYears")]
            XYearsEnum = 26
        }

        /// <summary>
        /// Coupon frequency of the holding. OneTime: one time usage at any other point than at maturity. AtMaturity: one time usage at maturity. 
        /// </summary>
        /// <value>Coupon frequency of the holding. OneTime: one time usage at any other point than at maturity. AtMaturity: one time usage at maturity. </value>
        [DataMember(Name="holdingCouponFrequency", EmitDefaultValue=true)]
        public HoldingCouponFrequencyEnum HoldingCouponFrequency { get; set; }

        /// <summary>
        /// Gets or Sets HoldingCallPrice
        /// </summary>
        [DataMember(Name="holdingCallPrice", EmitDefaultValue=false)]
        public AccountAccountEscheatAmount HoldingCallPrice { get; set; }

        /// <summary>
        /// Yield to call of the holding. 
        /// </summary>
        /// <value>Yield to call of the holding. </value>
        [DataMember(Name="holdingYieldToCall", EmitDefaultValue=true)]
        public decimal HoldingYieldToCall { get; set; }

        /// <summary>
        /// Call type of the holding. 
        /// </summary>
        /// <value>Call type of the holding. </value>
        [DataMember(Name="holdingCallType", EmitDefaultValue=false)]
        public string HoldingCallType { get; set; }

        /// <summary>
        /// Yield to maturity of the holding. 
        /// </summary>
        /// <value>Yield to maturity of the holding. </value>
        [DataMember(Name="holdingYieldToMaturity", EmitDefaultValue=true)]
        public decimal HoldingYieldToMaturity { get; set; }

        /// <summary>
        /// Holding maturity date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Holding maturity date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingMaturityDate", EmitDefaultValue=false)]
        public string HoldingMaturityDate { get; set; }

        /// <summary>
        /// Holding next coupon date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Holding next coupon date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingNextCouponDate", EmitDefaultValue=false)]
        public string HoldingNextCouponDate { get; set; }

        /// <summary>
        /// Holding next call date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Holding next call date. The date/time should be ISO 8601 UTC format.  yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="holdingNextCallDate", EmitDefaultValue=false)]
        public string HoldingNextCallDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

    }
}
