/*
 * Credit Union Financial eXchange
 *
 * Credit Union Industry Standard. The following API examples are producedz using scripting methods to create a swagger representation of the XML/XSDs. In the event of any noted deviations, the published XSDs on www.cufxstandards.com are the basis of intended content and behavior. Please see https://bonifii.com/cufx-terms-of-use for the terms of use applicable for CUFX.
 *
 * The version of the OpenAPI document: 4.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VyStar.ApiStandards.CUFX.Converters;

namespace VyStar.ApiStandards.CUFX.Models
{ 
    /// <summary>
    /// A grouping of related accounts tied to one or more parties that have an account relationship with the financial institution.  Some financial institutions may call this a membership, parent account or other term. 
    /// </summary>
    [DataContract]
    public partial class Relationship 
    {
        /// <summary>
        /// The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. 
        /// </summary>
        /// <value>The relationship ID is a persistent and unique identifier for the relationship. It should be unique for all relationships across the institution and remain the same over the life of the relationship with the financial institution. </value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Date of the creation of the relationship (i.e. membership date). 
        /// </summary>
        /// <value>Date of the creation of the relationship (i.e. membership date). </value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// End date of the relationship. 
        /// </summary>
        /// <value>End date of the relationship. </value>
        [DataMember(Name="dateRelationshipEnded", EmitDefaultValue=false)]
        public DateTime DateRelationshipEnded { get; set; }

        /// <summary>
        /// A code that represents a level of rewards that this relationship has access to based on all of the products and services used by the relationship. 
        /// </summary>
        /// <value>A code that represents a level of rewards that this relationship has access to based on all of the products and services used by the relationship. </value>
        [DataMember(Name="rewardsCode", EmitDefaultValue=false)]
        public string RewardsCode { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipPartyList
        /// </summary>
        [DataMember(Name="relationshipPartyList", EmitDefaultValue=false)]
        public RelationshipRelationshipPartyList RelationshipPartyList { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdList
        /// </summary>
        [DataMember(Name="accountIdList", EmitDefaultValue=false)]
        public AccountFilterAccountIdList AccountIdList { get; set; }


        /// <summary>
        /// Status of the Relationship. 
        /// </summary>
        /// <value>Status of the Relationship. </value>
        [TypeConverter(typeof(CustomEnumConverter<RelationshipStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RelationshipStatusEnum
        {
            
            /// <summary>
            /// Enum ActiveEnum for Active
            /// </summary>
            [EnumMember(Value = "Active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum ClosedEnum for Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            ClosedEnum = 2,
            
            /// <summary>
            /// Enum DeceasedEnum for Deceased
            /// </summary>
            [EnumMember(Value = "Deceased")]
            DeceasedEnum = 3,
            
            /// <summary>
            /// Enum InactiveEnum for Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            InactiveEnum = 4,
            
            /// <summary>
            /// Enum ProspectEnum for Prospect
            /// </summary>
            [EnumMember(Value = "Prospect")]
            ProspectEnum = 5,
            
            /// <summary>
            /// Enum RestrictedEnum for Restricted
            /// </summary>
            [EnumMember(Value = "Restricted")]
            RestrictedEnum = 6
        }

        /// <summary>
        /// Status of the Relationship. 
        /// </summary>
        /// <value>Status of the Relationship. </value>
        [DataMember(Name="relationshipStatus", EmitDefaultValue=true)]
        public RelationshipStatusEnum RelationshipStatus { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="relationshipCreatedBy", EmitDefaultValue=false)]
        public string RelationshipCreatedBy { get; set; }

        /// <summary>
        /// Date and time the relationship data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date and time the relationship data was modified in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="relationshipDateTimeModified", EmitDefaultValue=false)]
        public string RelationshipDateTimeModified { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="relationshipModifiedBy", EmitDefaultValue=false)]
        public string RelationshipModifiedBy { get; set; }

        /// <summary>
        /// Date the relationship data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. 
        /// </summary>
        /// <value>Date the relationship data was deleted or mark as inactive in the source system. The date/time should be ISO 8601 UTC format. yyyy-mm-ddThh:mmZ (2011-03-28T12:00Z) or yyyy-mm-dd (2011-03-28) formats are supported.  The time is assumed to be 00:00Z if omitted. </value>
        [DataMember(Name="relationshipDateTimeDeleted", EmitDefaultValue=false)]
        public string RelationshipDateTimeDeleted { get; set; }

        /// <summary>
        /// The unique identifier created by the system and or the user for identification. 
        /// </summary>
        /// <value>The unique identifier created by the system and or the user for identification. </value>
        [DataMember(Name="relationshipDeletedBy", EmitDefaultValue=false)]
        public string RelationshipDeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public AccessProfileCustomData CustomData { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentificationList
        /// </summary>
        [DataMember(Name="accountIdentificationList", EmitDefaultValue=false)]
        public AccountFilterAccountIdentificationList AccountIdentificationList { get; set; }

    }
}
